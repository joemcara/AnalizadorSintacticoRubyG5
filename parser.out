Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    DOT
    FOR
    GETS
    IN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> IF condition instructionBody END
Rule 5     instruction -> IF condition instructionBody conditionalElsif END
Rule 6     instruction -> IF condition instructionBody ELSE instructionBody END
Rule 7     instruction -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 8     elsif -> ELSIF instructionBody
Rule 9     conditionalElsif -> elsif
Rule 10    conditionalElsif -> elsif conditionalElsif
Rule 11    instruction -> WHILE condition instructionBody END
Rule 12    bodyLine -> ID ASSIGNMENT number
Rule 13    bodyLine -> ID ASSIGNMENT STRING
Rule 14    bodyLine -> PRINT printBody
Rule 15    instructionBody -> bodyLine
Rule 16    instructionBody -> bodyLine instructionBody
Rule 17    printBody -> ID
Rule 18    printBody -> TRUE
Rule 19    printBody -> FALSE
Rule 20    printBody -> dataType
Rule 21    printBody -> condition
Rule 22    parameters -> ID
Rule 23    parameters -> ID COMMA ID
Rule 24    arithmaticOperator -> PLUS
Rule 25    arithmaticOperator -> MINUS
Rule 26    arithmaticOperator -> POWER
Rule 27    arithmaticOperator -> MULTIPLICATION
Rule 28    arithmaticOperator -> DIVISION
Rule 29    operations -> number arithmaticOperator number
Rule 30    condition -> number comparator number
Rule 31    comparator -> GREATERTHAN
Rule 32    comparator -> LESSTHAN
Rule 33    comparator -> EQUALS
Rule 34    comparator -> GREATEROREQUALS
Rule 35    comparator -> LESSOREQUALS
Rule 36    number -> FLOAT
Rule 37    number -> INTEGER
Rule 38    dataType -> STRING
Rule 39    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 12 13
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 23
DEF                  : 2 3
DIVISION             : 28
DOT                  : 
ELSE                 : 6 7
ELSIF                : 8
END                  : 2 3 4 5 6 7 11
EQUALS               : 33
FALSE                : 19
FLOAT                : 36
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 34
GREATERTHAN          : 31
ID                   : 2 3 12 13 17 22 23 23
IF                   : 4 5 6 7
IN                   : 
INTEGER              : 37
LESSOREQUALS         : 35
LESSTHAN             : 32
LPAREN               : 2 3
MINUS                : 25
MULTIPLICATION       : 27
OPENBRACKET          : 
PLUS                 : 24
POWER                : 26
PRINT                : 14
PUTS                 : 
RPAREN               : 2 3
STRING               : 13 38
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 18
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

arithmaticOperator   : 29
bodyLine             : 15 16
comparator           : 30
condition            : 4 5 6 7 11 21
conditionalElsif     : 5 7 10
dataType             : 20
elsif                : 9 10
instruction          : 0
instructionBody      : 1 2 4 5 6 6 7 7 8 11 16
number               : 12 29 29 30 30 39
operations           : 
parameters           : 2
printBody            : 14

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . IF condition instructionBody END
    (5) instruction -> . IF condition instructionBody conditionalElsif END
    (6) instruction -> . IF condition instructionBody ELSE instructionBody END
    (7) instruction -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (11) instruction -> . WHILE condition instructionBody END
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    DEF             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    bodyLine                       shift and go to state 7

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 9


state 4

    (12) bodyLine -> ID . ASSIGNMENT number
    (13) bodyLine -> ID . ASSIGNMENT STRING

    ASSIGNMENT      shift and go to state 10


state 5

    (4) instruction -> IF . condition instructionBody END
    (5) instruction -> IF . condition instructionBody conditionalElsif END
    (6) instruction -> IF . condition instructionBody ELSE instructionBody END
    (7) instruction -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (30) condition -> . number comparator number
    (36) number -> . FLOAT
    (37) number -> . INTEGER

    FLOAT           shift and go to state 13
    INTEGER         shift and go to state 14

    condition                      shift and go to state 11
    number                         shift and go to state 12

state 6

    (11) instruction -> WHILE . condition instructionBody END
    (30) condition -> . number comparator number
    (36) number -> . FLOAT
    (37) number -> . INTEGER

    FLOAT           shift and go to state 13
    INTEGER         shift and go to state 14

    condition                      shift and go to state 15
    number                         shift and go to state 12

state 7

    (15) instructionBody -> bodyLine .
    (16) instructionBody -> bodyLine . instructionBody
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    $end            reduce using rule 15 (instructionBody -> bodyLine .)
    END             reduce using rule 15 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 15 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 15 (instructionBody -> bodyLine .)
    ID              shift and go to state 4
    PRINT           shift and go to state 8

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 16

state 8

    (14) bodyLine -> PRINT . printBody
    (17) printBody -> . ID
    (18) printBody -> . TRUE
    (19) printBody -> . FALSE
    (20) printBody -> . dataType
    (21) printBody -> . condition
    (38) dataType -> . STRING
    (39) dataType -> . number
    (30) condition -> . number comparator number
    (36) number -> . FLOAT
    (37) number -> . INTEGER

    ID              shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    STRING          shift and go to state 23
    FLOAT           shift and go to state 13
    INTEGER         shift and go to state 14

    printBody                      shift and go to state 17
    dataType                       shift and go to state 21
    condition                      shift and go to state 22
    number                         shift and go to state 24

state 9

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 25


state 10

    (12) bodyLine -> ID ASSIGNMENT . number
    (13) bodyLine -> ID ASSIGNMENT . STRING
    (36) number -> . FLOAT
    (37) number -> . INTEGER

    STRING          shift and go to state 27
    FLOAT           shift and go to state 13
    INTEGER         shift and go to state 14

    number                         shift and go to state 26

state 11

    (4) instruction -> IF condition . instructionBody END
    (5) instruction -> IF condition . instructionBody conditionalElsif END
    (6) instruction -> IF condition . instructionBody ELSE instructionBody END
    (7) instruction -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instructionBody                shift and go to state 28
    bodyLine                       shift and go to state 7

state 12

    (30) condition -> number . comparator number
    (31) comparator -> . GREATERTHAN
    (32) comparator -> . LESSTHAN
    (33) comparator -> . EQUALS
    (34) comparator -> . GREATEROREQUALS
    (35) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 30
    LESSTHAN        shift and go to state 31
    EQUALS          shift and go to state 32
    GREATEROREQUALS shift and go to state 33
    LESSOREQUALS    shift and go to state 34

    comparator                     shift and go to state 29

state 13

    (36) number -> FLOAT .

    GREATERTHAN     reduce using rule 36 (number -> FLOAT .)
    LESSTHAN        reduce using rule 36 (number -> FLOAT .)
    EQUALS          reduce using rule 36 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 36 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 36 (number -> FLOAT .)
    ID              reduce using rule 36 (number -> FLOAT .)
    PRINT           reduce using rule 36 (number -> FLOAT .)
    $end            reduce using rule 36 (number -> FLOAT .)
    END             reduce using rule 36 (number -> FLOAT .)
    ELSE            reduce using rule 36 (number -> FLOAT .)
    ELSIF           reduce using rule 36 (number -> FLOAT .)


state 14

    (37) number -> INTEGER .

    GREATERTHAN     reduce using rule 37 (number -> INTEGER .)
    LESSTHAN        reduce using rule 37 (number -> INTEGER .)
    EQUALS          reduce using rule 37 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 37 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 37 (number -> INTEGER .)
    ID              reduce using rule 37 (number -> INTEGER .)
    PRINT           reduce using rule 37 (number -> INTEGER .)
    $end            reduce using rule 37 (number -> INTEGER .)
    END             reduce using rule 37 (number -> INTEGER .)
    ELSE            reduce using rule 37 (number -> INTEGER .)
    ELSIF           reduce using rule 37 (number -> INTEGER .)


state 15

    (11) instruction -> WHILE condition . instructionBody END
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instructionBody                shift and go to state 35
    bodyLine                       shift and go to state 7

state 16

    (16) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 16 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 16 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 16 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 16 (instructionBody -> bodyLine instructionBody .)


state 17

    (14) bodyLine -> PRINT printBody .

    ID              reduce using rule 14 (bodyLine -> PRINT printBody .)
    PRINT           reduce using rule 14 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 14 (bodyLine -> PRINT printBody .)
    END             reduce using rule 14 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 14 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 14 (bodyLine -> PRINT printBody .)


state 18

    (17) printBody -> ID .

    ID              reduce using rule 17 (printBody -> ID .)
    PRINT           reduce using rule 17 (printBody -> ID .)
    $end            reduce using rule 17 (printBody -> ID .)
    END             reduce using rule 17 (printBody -> ID .)
    ELSE            reduce using rule 17 (printBody -> ID .)
    ELSIF           reduce using rule 17 (printBody -> ID .)


state 19

    (18) printBody -> TRUE .

    ID              reduce using rule 18 (printBody -> TRUE .)
    PRINT           reduce using rule 18 (printBody -> TRUE .)
    $end            reduce using rule 18 (printBody -> TRUE .)
    END             reduce using rule 18 (printBody -> TRUE .)
    ELSE            reduce using rule 18 (printBody -> TRUE .)
    ELSIF           reduce using rule 18 (printBody -> TRUE .)


state 20

    (19) printBody -> FALSE .

    ID              reduce using rule 19 (printBody -> FALSE .)
    PRINT           reduce using rule 19 (printBody -> FALSE .)
    $end            reduce using rule 19 (printBody -> FALSE .)
    END             reduce using rule 19 (printBody -> FALSE .)
    ELSE            reduce using rule 19 (printBody -> FALSE .)
    ELSIF           reduce using rule 19 (printBody -> FALSE .)


state 21

    (20) printBody -> dataType .

    ID              reduce using rule 20 (printBody -> dataType .)
    PRINT           reduce using rule 20 (printBody -> dataType .)
    $end            reduce using rule 20 (printBody -> dataType .)
    END             reduce using rule 20 (printBody -> dataType .)
    ELSE            reduce using rule 20 (printBody -> dataType .)
    ELSIF           reduce using rule 20 (printBody -> dataType .)


state 22

    (21) printBody -> condition .

    ID              reduce using rule 21 (printBody -> condition .)
    PRINT           reduce using rule 21 (printBody -> condition .)
    $end            reduce using rule 21 (printBody -> condition .)
    END             reduce using rule 21 (printBody -> condition .)
    ELSE            reduce using rule 21 (printBody -> condition .)
    ELSIF           reduce using rule 21 (printBody -> condition .)


state 23

    (38) dataType -> STRING .

    ID              reduce using rule 38 (dataType -> STRING .)
    PRINT           reduce using rule 38 (dataType -> STRING .)
    $end            reduce using rule 38 (dataType -> STRING .)
    END             reduce using rule 38 (dataType -> STRING .)
    ELSE            reduce using rule 38 (dataType -> STRING .)
    ELSIF           reduce using rule 38 (dataType -> STRING .)


state 24

    (39) dataType -> number .
    (30) condition -> number . comparator number
    (31) comparator -> . GREATERTHAN
    (32) comparator -> . LESSTHAN
    (33) comparator -> . EQUALS
    (34) comparator -> . GREATEROREQUALS
    (35) comparator -> . LESSOREQUALS

    ID              reduce using rule 39 (dataType -> number .)
    PRINT           reduce using rule 39 (dataType -> number .)
    $end            reduce using rule 39 (dataType -> number .)
    END             reduce using rule 39 (dataType -> number .)
    ELSE            reduce using rule 39 (dataType -> number .)
    ELSIF           reduce using rule 39 (dataType -> number .)
    GREATERTHAN     shift and go to state 30
    LESSTHAN        shift and go to state 31
    EQUALS          shift and go to state 32
    GREATEROREQUALS shift and go to state 33
    LESSOREQUALS    shift and go to state 34

    comparator                     shift and go to state 29

state 25

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (22) parameters -> . ID
    (23) parameters -> . ID COMMA ID

    RPAREN          shift and go to state 38
    ID              shift and go to state 36

    parameters                     shift and go to state 37

state 26

    (12) bodyLine -> ID ASSIGNMENT number .

    ID              reduce using rule 12 (bodyLine -> ID ASSIGNMENT number .)
    PRINT           reduce using rule 12 (bodyLine -> ID ASSIGNMENT number .)
    $end            reduce using rule 12 (bodyLine -> ID ASSIGNMENT number .)
    END             reduce using rule 12 (bodyLine -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 12 (bodyLine -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 12 (bodyLine -> ID ASSIGNMENT number .)


state 27

    (13) bodyLine -> ID ASSIGNMENT STRING .

    ID              reduce using rule 13 (bodyLine -> ID ASSIGNMENT STRING .)
    PRINT           reduce using rule 13 (bodyLine -> ID ASSIGNMENT STRING .)
    $end            reduce using rule 13 (bodyLine -> ID ASSIGNMENT STRING .)
    END             reduce using rule 13 (bodyLine -> ID ASSIGNMENT STRING .)
    ELSE            reduce using rule 13 (bodyLine -> ID ASSIGNMENT STRING .)
    ELSIF           reduce using rule 13 (bodyLine -> ID ASSIGNMENT STRING .)


state 28

    (4) instruction -> IF condition instructionBody . END
    (5) instruction -> IF condition instructionBody . conditionalElsif END
    (6) instruction -> IF condition instructionBody . ELSE instructionBody END
    (7) instruction -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (9) conditionalElsif -> . elsif
    (10) conditionalElsif -> . elsif conditionalElsif
    (8) elsif -> . ELSIF instructionBody

    END             shift and go to state 39
    ELSE            shift and go to state 41
    ELSIF           shift and go to state 43

    conditionalElsif               shift and go to state 40
    elsif                          shift and go to state 42

state 29

    (30) condition -> number comparator . number
    (36) number -> . FLOAT
    (37) number -> . INTEGER

    FLOAT           shift and go to state 13
    INTEGER         shift and go to state 14

    number                         shift and go to state 44

state 30

    (31) comparator -> GREATERTHAN .

    FLOAT           reduce using rule 31 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 31 (comparator -> GREATERTHAN .)


state 31

    (32) comparator -> LESSTHAN .

    FLOAT           reduce using rule 32 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 32 (comparator -> LESSTHAN .)


state 32

    (33) comparator -> EQUALS .

    FLOAT           reduce using rule 33 (comparator -> EQUALS .)
    INTEGER         reduce using rule 33 (comparator -> EQUALS .)


state 33

    (34) comparator -> GREATEROREQUALS .

    FLOAT           reduce using rule 34 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 34 (comparator -> GREATEROREQUALS .)


state 34

    (35) comparator -> LESSOREQUALS .

    FLOAT           reduce using rule 35 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 35 (comparator -> LESSOREQUALS .)


state 35

    (11) instruction -> WHILE condition instructionBody . END

    END             shift and go to state 45


state 36

    (22) parameters -> ID .
    (23) parameters -> ID . COMMA ID

    RPAREN          reduce using rule 22 (parameters -> ID .)
    COMMA           shift and go to state 46


state 37

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 47


state 38

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 48


state 39

    (4) instruction -> IF condition instructionBody END .

    $end            reduce using rule 4 (instruction -> IF condition instructionBody END .)


state 40

    (5) instruction -> IF condition instructionBody conditionalElsif . END
    (7) instruction -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 49
    ELSE            shift and go to state 50


state 41

    (6) instruction -> IF condition instructionBody ELSE . instructionBody END
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instructionBody                shift and go to state 51
    bodyLine                       shift and go to state 7

state 42

    (9) conditionalElsif -> elsif .
    (10) conditionalElsif -> elsif . conditionalElsif
    (9) conditionalElsif -> . elsif
    (10) conditionalElsif -> . elsif conditionalElsif
    (8) elsif -> . ELSIF instructionBody

    END             reduce using rule 9 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 9 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 43

    elsif                          shift and go to state 42
    conditionalElsif               shift and go to state 52

state 43

    (8) elsif -> ELSIF . instructionBody
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instructionBody                shift and go to state 53
    bodyLine                       shift and go to state 7

state 44

    (30) condition -> number comparator number .

    ID              reduce using rule 30 (condition -> number comparator number .)
    PRINT           reduce using rule 30 (condition -> number comparator number .)
    $end            reduce using rule 30 (condition -> number comparator number .)
    END             reduce using rule 30 (condition -> number comparator number .)
    ELSE            reduce using rule 30 (condition -> number comparator number .)
    ELSIF           reduce using rule 30 (condition -> number comparator number .)


state 45

    (11) instruction -> WHILE condition instructionBody END .

    $end            reduce using rule 11 (instruction -> WHILE condition instructionBody END .)


state 46

    (23) parameters -> ID COMMA . ID

    ID              shift and go to state 54


state 47

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instructionBody                shift and go to state 55
    bodyLine                       shift and go to state 7

state 48

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 49

    (5) instruction -> IF condition instructionBody conditionalElsif END .

    $end            reduce using rule 5 (instruction -> IF condition instructionBody conditionalElsif END .)


state 50

    (7) instruction -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (15) instructionBody -> . bodyLine
    (16) instructionBody -> . bodyLine instructionBody
    (12) bodyLine -> . ID ASSIGNMENT number
    (13) bodyLine -> . ID ASSIGNMENT STRING
    (14) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 8

    instructionBody                shift and go to state 56
    bodyLine                       shift and go to state 7

state 51

    (6) instruction -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 57


state 52

    (10) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 10 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 10 (conditionalElsif -> elsif conditionalElsif .)


state 53

    (8) elsif -> ELSIF instructionBody .

    ELSIF           reduce using rule 8 (elsif -> ELSIF instructionBody .)
    END             reduce using rule 8 (elsif -> ELSIF instructionBody .)
    ELSE            reduce using rule 8 (elsif -> ELSIF instructionBody .)


state 54

    (23) parameters -> ID COMMA ID .

    RPAREN          reduce using rule 23 (parameters -> ID COMMA ID .)


state 55

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 58


state 56

    (7) instruction -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 59


state 57

    (6) instruction -> IF condition instructionBody ELSE instructionBody END .

    $end            reduce using rule 6 (instruction -> IF condition instructionBody ELSE instructionBody END .)


state 58

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 59

    (7) instruction -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    $end            reduce using rule 7 (instruction -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)

