Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    DOT
    ELSE
    ELSIF
    EQUALS
    FOR
    GETS
    GREATEROREQUALS
    GREATERTHAN
    IN
    LESSTHAN
    OPENBRACKET
    PRINT
    PUTS
    STRING
    THEN
    TO_F
    TO_I
    WHILE

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> ID ASSIGNMENT dataType
Rule 2     instruction -> ID ASSIGNMENT condition
Rule 3     instruction -> DEF ID LPAREN parameters RPAREN END
Rule 4     instruction -> DEF ID LPAREN RPAREN END
Rule 5     parameters -> ID
Rule 6     parameters -> ID COMMA ID
Rule 7     instructionConditional -> IF condition
Rule 8     arithmetic -> PLUS
Rule 9     arithmetic -> MINUS
Rule 10    arithmetic -> POWER
Rule 11    arithmetic -> MULTIPLICATION
Rule 12    arithmetic -> DIVISION
Rule 13    operations -> dataType arithmetic dataType
Rule 14    operations -> arithmetic dataType
Rule 15    condition -> TRUE
Rule 16    condition -> FALSE
Rule 17    dataType -> FLOAT
Rule 18    dataType -> INTEGER

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 1 2
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 6
DEF                  : 3 4
DIVISION             : 12
DOT                  : 
ELSE                 : 
ELSIF                : 
END                  : 3 4
EQUALS               : 
FALSE                : 16
FLOAT                : 17
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 
GREATERTHAN          : 
ID                   : 1 2 3 4 5 6 6
IF                   : 7
IN                   : 
INTEGER              : 18
LESSTHAN             : 
LPAREN               : 3 4
MINUS                : 9
MULTIPLICATION       : 11
OPENBRACKET          : 
PLUS                 : 8
POWER                : 10
PRINT                : 
PUTS                 : 
RPAREN               : 3 4
STRING               : 
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 15
WHILE                : 
error                : 

Nonterminals, with rules where they appear

arithmetic           : 13 14
condition            : 2 7
dataType             : 1 13 13 14
instruction          : 0
instructionConditional : 
operations           : 
parameters           : 3

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . ID ASSIGNMENT dataType
    (2) instruction -> . ID ASSIGNMENT condition
    (3) instruction -> . DEF ID LPAREN parameters RPAREN END
    (4) instruction -> . DEF ID LPAREN RPAREN END

    ID              shift and go to state 2
    DEF             shift and go to state 3

    instruction                    shift and go to state 1

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> ID . ASSIGNMENT dataType
    (2) instruction -> ID . ASSIGNMENT condition

    ASSIGNMENT      shift and go to state 4


state 3

    (3) instruction -> DEF . ID LPAREN parameters RPAREN END
    (4) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 5


state 4

    (1) instruction -> ID ASSIGNMENT . dataType
    (2) instruction -> ID ASSIGNMENT . condition
    (17) dataType -> . FLOAT
    (18) dataType -> . INTEGER
    (15) condition -> . TRUE
    (16) condition -> . FALSE

    FLOAT           shift and go to state 8
    INTEGER         shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    dataType                       shift and go to state 6
    condition                      shift and go to state 7

state 5

    (3) instruction -> DEF ID . LPAREN parameters RPAREN END
    (4) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 12


state 6

    (1) instruction -> ID ASSIGNMENT dataType .

    $end            reduce using rule 1 (instruction -> ID ASSIGNMENT dataType .)


state 7

    (2) instruction -> ID ASSIGNMENT condition .

    $end            reduce using rule 2 (instruction -> ID ASSIGNMENT condition .)


state 8

    (17) dataType -> FLOAT .

    $end            reduce using rule 17 (dataType -> FLOAT .)


state 9

    (18) dataType -> INTEGER .

    $end            reduce using rule 18 (dataType -> INTEGER .)


state 10

    (15) condition -> TRUE .

    $end            reduce using rule 15 (condition -> TRUE .)


state 11

    (16) condition -> FALSE .

    $end            reduce using rule 16 (condition -> FALSE .)


state 12

    (3) instruction -> DEF ID LPAREN . parameters RPAREN END
    (4) instruction -> DEF ID LPAREN . RPAREN END
    (5) parameters -> . ID
    (6) parameters -> . ID COMMA ID

    RPAREN          shift and go to state 15
    ID              shift and go to state 13

    parameters                     shift and go to state 14

state 13

    (5) parameters -> ID .
    (6) parameters -> ID . COMMA ID

    RPAREN          reduce using rule 5 (parameters -> ID .)
    COMMA           shift and go to state 16


state 14

    (3) instruction -> DEF ID LPAREN parameters . RPAREN END

    RPAREN          shift and go to state 17


state 15

    (4) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 18


state 16

    (6) parameters -> ID COMMA . ID

    ID              shift and go to state 19


state 17

    (3) instruction -> DEF ID LPAREN parameters RPAREN . END

    END             shift and go to state 20


state 18

    (4) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 4 (instruction -> DEF ID LPAREN RPAREN END .)


state 19

    (6) parameters -> ID COMMA ID .

    RPAREN          reduce using rule 6 (parameters -> ID COMMA ID .)


state 20

    (3) instruction -> DEF ID LPAREN parameters RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN parameters RPAREN END .)

