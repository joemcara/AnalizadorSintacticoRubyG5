Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    DOT
    FOR
    GETS
    IN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    bodyLine -> assignmentRule
Rule 24    bodyLine -> PRINT printBody
Rule 25    bodyLine -> nestedConditional
Rule 26    bodyLine -> nestedWhile
Rule 27    instructionBody -> bodyLine
Rule 28    instructionBody -> bodyLine instructionBody
Rule 29    printBody -> ID
Rule 30    printBody -> TRUE
Rule 31    printBody -> FALSE
Rule 32    printBody -> dataType
Rule 33    printBody -> condition
Rule 34    parameters -> ID
Rule 35    parameters -> ID COMMA ID
Rule 36    arithmeticOperator -> PLUS
Rule 37    arithmeticOperator -> MINUS
Rule 38    arithmeticOperator -> POWER
Rule 39    arithmeticOperator -> MULTIPLICATION
Rule 40    arithmeticOperator -> DIVISION
Rule 41    operations -> number arithmeticOperator number
Rule 42    conditionValue -> ID
Rule 43    conditionValue -> number
Rule 44    condition -> conditionValue comparator conditionValue
Rule 45    comparator -> GREATERTHAN
Rule 46    comparator -> LESSTHAN
Rule 47    comparator -> EQUALS
Rule 48    comparator -> GREATEROREQUALS
Rule 49    comparator -> LESSOREQUALS
Rule 50    number -> FLOAT
Rule 51    number -> INTEGER
Rule 52    dataType -> STRING
Rule 53    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 35
DEF                  : 2 3
DIVISION             : 40
DOT                  : 
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 47
FALSE                : 22 31
FLOAT                : 50
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 48
GREATERTHAN          : 45
ID                   : 2 3 18 19 19 20 21 22 29 34 35 35 42
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 51
LESSOREQUALS         : 49
LESSTHAN             : 46
LPAREN               : 2 3
MINUS                : 37
MULTIPLICATION       : 39
OPENBRACKET          : 
PLUS                 : 36
POWER                : 38
PRINT                : 24
PUTS                 : 
RPAREN               : 2 3
STRING               : 52
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 30
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmeticOperator   : 41
assignmentRule       : 23
bodyLine             : 27 28
comparator           : 44
condition            : 5 6 7 8 9 15 20 33
conditionValue       : 44 44
conditional          : 4 10 11
conditionalElsif     : 6 8 13
dataType             : 32
elsif                : 12 13
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 28
nestedConditional    : 11 25
nestedWhile          : 17 26
number               : 18 41 41 43 53
operations           : 
parameters           : 2
printBody            : 24
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 14


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE

    ASSIGNMENT      shift and go to state 15


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 16
    nestedConditional              shift and go to state 17

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 18
    nestedWhile                    shift and go to state 19

state 7

    (27) instructionBody -> bodyLine .
    (28) instructionBody -> bodyLine . instructionBody
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 27 (instructionBody -> bodyLine .)
    END             reduce using rule 27 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 27 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 27 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 20
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (44) condition -> . conditionValue comparator conditionValue
    (42) conditionValue -> . ID
    (43) conditionValue -> . number
    (50) number -> . FLOAT
    (51) number -> . INTEGER

    ID              shift and go to state 23
    FLOAT           shift and go to state 25
    INTEGER         shift and go to state 26

    condition                      shift and go to state 21
    conditionValue                 shift and go to state 22
    number                         shift and go to state 24

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (44) condition -> . conditionValue comparator conditionValue
    (42) conditionValue -> . ID
    (43) conditionValue -> . number
    (50) number -> . FLOAT
    (51) number -> . INTEGER

    ID              shift and go to state 23
    FLOAT           shift and go to state 25
    INTEGER         shift and go to state 26

    condition                      shift and go to state 27
    conditionValue                 shift and go to state 22
    number                         shift and go to state 24

state 10

    (23) bodyLine -> assignmentRule .

    PRINT           reduce using rule 23 (bodyLine -> assignmentRule .)
    ID              reduce using rule 23 (bodyLine -> assignmentRule .)
    IF              reduce using rule 23 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 23 (bodyLine -> assignmentRule .)
    $end            reduce using rule 23 (bodyLine -> assignmentRule .)
    END             reduce using rule 23 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 23 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 23 (bodyLine -> assignmentRule .)


state 11

    (24) bodyLine -> PRINT . printBody
    (29) printBody -> . ID
    (30) printBody -> . TRUE
    (31) printBody -> . FALSE
    (32) printBody -> . dataType
    (33) printBody -> . condition
    (52) dataType -> . STRING
    (53) dataType -> . number
    (44) condition -> . conditionValue comparator conditionValue
    (50) number -> . FLOAT
    (51) number -> . INTEGER
    (42) conditionValue -> . ID
    (43) conditionValue -> . number

    ID              shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    STRING          shift and go to state 34
    FLOAT           shift and go to state 25
    INTEGER         shift and go to state 26

    printBody                      shift and go to state 28
    dataType                       shift and go to state 32
    condition                      shift and go to state 33
    number                         shift and go to state 35
    conditionValue                 shift and go to state 22

state 12

    (25) bodyLine -> nestedConditional .

    PRINT           reduce using rule 25 (bodyLine -> nestedConditional .)
    ID              reduce using rule 25 (bodyLine -> nestedConditional .)
    IF              reduce using rule 25 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 25 (bodyLine -> nestedConditional .)
    $end            reduce using rule 25 (bodyLine -> nestedConditional .)
    END             reduce using rule 25 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 25 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 25 (bodyLine -> nestedConditional .)


state 13

    (26) bodyLine -> nestedWhile .

    PRINT           reduce using rule 26 (bodyLine -> nestedWhile .)
    ID              reduce using rule 26 (bodyLine -> nestedWhile .)
    IF              reduce using rule 26 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 26 (bodyLine -> nestedWhile .)
    $end            reduce using rule 26 (bodyLine -> nestedWhile .)
    END             reduce using rule 26 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 26 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 26 (bodyLine -> nestedWhile .)


state 14

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 36


state 15

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (50) number -> . FLOAT
    (51) number -> . INTEGER
    (44) condition -> . conditionValue comparator conditionValue
    (42) conditionValue -> . ID
    (43) conditionValue -> . number

    ID              shift and go to state 37
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    FLOAT           shift and go to state 25
    INTEGER         shift and go to state 26

    number                         shift and go to state 38
    condition                      shift and go to state 39
    conditionValue                 shift and go to state 22

state 16

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 16
    nestedConditional              shift and go to state 17

state 17

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 18

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 18
    nestedWhile                    shift and go to state 19

state 19

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 20

    (28) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 28 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 28 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 28 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 28 (instructionBody -> bodyLine instructionBody .)


state 21

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 42
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 22

    (44) condition -> conditionValue . comparator conditionValue
    (45) comparator -> . GREATERTHAN
    (46) comparator -> . LESSTHAN
    (47) comparator -> . EQUALS
    (48) comparator -> . GREATEROREQUALS
    (49) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 44
    LESSTHAN        shift and go to state 45
    EQUALS          shift and go to state 46
    GREATEROREQUALS shift and go to state 47
    LESSOREQUALS    shift and go to state 48

    comparator                     shift and go to state 43

state 23

    (42) conditionValue -> ID .

    GREATERTHAN     reduce using rule 42 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 42 (conditionValue -> ID .)
    EQUALS          reduce using rule 42 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 42 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 42 (conditionValue -> ID .)
    PRINT           reduce using rule 42 (conditionValue -> ID .)
    ID              reduce using rule 42 (conditionValue -> ID .)
    IF              reduce using rule 42 (conditionValue -> ID .)
    WHILE           reduce using rule 42 (conditionValue -> ID .)
    $end            reduce using rule 42 (conditionValue -> ID .)
    END             reduce using rule 42 (conditionValue -> ID .)
    ELSE            reduce using rule 42 (conditionValue -> ID .)
    ELSIF           reduce using rule 42 (conditionValue -> ID .)


state 24

    (43) conditionValue -> number .

    GREATERTHAN     reduce using rule 43 (conditionValue -> number .)
    LESSTHAN        reduce using rule 43 (conditionValue -> number .)
    EQUALS          reduce using rule 43 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 43 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 43 (conditionValue -> number .)
    PRINT           reduce using rule 43 (conditionValue -> number .)
    ID              reduce using rule 43 (conditionValue -> number .)
    IF              reduce using rule 43 (conditionValue -> number .)
    WHILE           reduce using rule 43 (conditionValue -> number .)
    $end            reduce using rule 43 (conditionValue -> number .)
    END             reduce using rule 43 (conditionValue -> number .)
    ELSE            reduce using rule 43 (conditionValue -> number .)
    ELSIF           reduce using rule 43 (conditionValue -> number .)


state 25

    (50) number -> FLOAT .

    GREATERTHAN     reduce using rule 50 (number -> FLOAT .)
    LESSTHAN        reduce using rule 50 (number -> FLOAT .)
    EQUALS          reduce using rule 50 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 50 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 50 (number -> FLOAT .)
    PRINT           reduce using rule 50 (number -> FLOAT .)
    ID              reduce using rule 50 (number -> FLOAT .)
    IF              reduce using rule 50 (number -> FLOAT .)
    WHILE           reduce using rule 50 (number -> FLOAT .)
    $end            reduce using rule 50 (number -> FLOAT .)
    END             reduce using rule 50 (number -> FLOAT .)
    ELSE            reduce using rule 50 (number -> FLOAT .)
    ELSIF           reduce using rule 50 (number -> FLOAT .)


state 26

    (51) number -> INTEGER .

    GREATERTHAN     reduce using rule 51 (number -> INTEGER .)
    LESSTHAN        reduce using rule 51 (number -> INTEGER .)
    EQUALS          reduce using rule 51 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 51 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 51 (number -> INTEGER .)
    PRINT           reduce using rule 51 (number -> INTEGER .)
    ID              reduce using rule 51 (number -> INTEGER .)
    IF              reduce using rule 51 (number -> INTEGER .)
    WHILE           reduce using rule 51 (number -> INTEGER .)
    $end            reduce using rule 51 (number -> INTEGER .)
    END             reduce using rule 51 (number -> INTEGER .)
    ELSE            reduce using rule 51 (number -> INTEGER .)
    ELSIF           reduce using rule 51 (number -> INTEGER .)


state 27

    (15) whileLoop -> WHILE condition . instructionBody END
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 49
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 28

    (24) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 24 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 24 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 24 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 24 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 24 (bodyLine -> PRINT printBody .)
    END             reduce using rule 24 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 24 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 24 (bodyLine -> PRINT printBody .)


state 29

    (29) printBody -> ID .
    (42) conditionValue -> ID .

    PRINT           reduce using rule 29 (printBody -> ID .)
    ID              reduce using rule 29 (printBody -> ID .)
    IF              reduce using rule 29 (printBody -> ID .)
    WHILE           reduce using rule 29 (printBody -> ID .)
    $end            reduce using rule 29 (printBody -> ID .)
    END             reduce using rule 29 (printBody -> ID .)
    ELSE            reduce using rule 29 (printBody -> ID .)
    ELSIF           reduce using rule 29 (printBody -> ID .)
    GREATERTHAN     reduce using rule 42 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 42 (conditionValue -> ID .)
    EQUALS          reduce using rule 42 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 42 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 42 (conditionValue -> ID .)


state 30

    (30) printBody -> TRUE .

    PRINT           reduce using rule 30 (printBody -> TRUE .)
    ID              reduce using rule 30 (printBody -> TRUE .)
    IF              reduce using rule 30 (printBody -> TRUE .)
    WHILE           reduce using rule 30 (printBody -> TRUE .)
    $end            reduce using rule 30 (printBody -> TRUE .)
    END             reduce using rule 30 (printBody -> TRUE .)
    ELSE            reduce using rule 30 (printBody -> TRUE .)
    ELSIF           reduce using rule 30 (printBody -> TRUE .)


state 31

    (31) printBody -> FALSE .

    PRINT           reduce using rule 31 (printBody -> FALSE .)
    ID              reduce using rule 31 (printBody -> FALSE .)
    IF              reduce using rule 31 (printBody -> FALSE .)
    WHILE           reduce using rule 31 (printBody -> FALSE .)
    $end            reduce using rule 31 (printBody -> FALSE .)
    END             reduce using rule 31 (printBody -> FALSE .)
    ELSE            reduce using rule 31 (printBody -> FALSE .)
    ELSIF           reduce using rule 31 (printBody -> FALSE .)


state 32

    (32) printBody -> dataType .

    PRINT           reduce using rule 32 (printBody -> dataType .)
    ID              reduce using rule 32 (printBody -> dataType .)
    IF              reduce using rule 32 (printBody -> dataType .)
    WHILE           reduce using rule 32 (printBody -> dataType .)
    $end            reduce using rule 32 (printBody -> dataType .)
    END             reduce using rule 32 (printBody -> dataType .)
    ELSE            reduce using rule 32 (printBody -> dataType .)
    ELSIF           reduce using rule 32 (printBody -> dataType .)


state 33

    (33) printBody -> condition .

    PRINT           reduce using rule 33 (printBody -> condition .)
    ID              reduce using rule 33 (printBody -> condition .)
    IF              reduce using rule 33 (printBody -> condition .)
    WHILE           reduce using rule 33 (printBody -> condition .)
    $end            reduce using rule 33 (printBody -> condition .)
    END             reduce using rule 33 (printBody -> condition .)
    ELSE            reduce using rule 33 (printBody -> condition .)
    ELSIF           reduce using rule 33 (printBody -> condition .)


state 34

    (52) dataType -> STRING .

    PRINT           reduce using rule 52 (dataType -> STRING .)
    ID              reduce using rule 52 (dataType -> STRING .)
    IF              reduce using rule 52 (dataType -> STRING .)
    WHILE           reduce using rule 52 (dataType -> STRING .)
    $end            reduce using rule 52 (dataType -> STRING .)
    END             reduce using rule 52 (dataType -> STRING .)
    ELSE            reduce using rule 52 (dataType -> STRING .)
    ELSIF           reduce using rule 52 (dataType -> STRING .)


state 35

    (53) dataType -> number .
    (43) conditionValue -> number .

    PRINT           reduce using rule 53 (dataType -> number .)
    ID              reduce using rule 53 (dataType -> number .)
    IF              reduce using rule 53 (dataType -> number .)
    WHILE           reduce using rule 53 (dataType -> number .)
    $end            reduce using rule 53 (dataType -> number .)
    END             reduce using rule 53 (dataType -> number .)
    ELSE            reduce using rule 53 (dataType -> number .)
    ELSIF           reduce using rule 53 (dataType -> number .)
    GREATERTHAN     reduce using rule 43 (conditionValue -> number .)
    LESSTHAN        reduce using rule 43 (conditionValue -> number .)
    EQUALS          reduce using rule 43 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 43 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 43 (conditionValue -> number .)


state 36

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (34) parameters -> . ID
    (35) parameters -> . ID COMMA ID

    RPAREN          shift and go to state 52
    ID              shift and go to state 50

    parameters                     shift and go to state 51

state 37

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (42) conditionValue -> ID .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    GREATERTHAN     reduce using rule 42 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 42 (conditionValue -> ID .)
    EQUALS          reduce using rule 42 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 42 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 42 (conditionValue -> ID .)


state 38

    (18) assignmentRule -> ID ASSIGNMENT number .
    (43) conditionValue -> number .

    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 43 (conditionValue -> number .)
    LESSTHAN        reduce using rule 43 (conditionValue -> number .)
    EQUALS          reduce using rule 43 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 43 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 43 (conditionValue -> number .)


state 39

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 40

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 41

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 42

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 53
    ELSE            shift and go to state 55
    ELSIF           shift and go to state 57

    conditionalElsif               shift and go to state 54
    elsif                          shift and go to state 56

state 43

    (44) condition -> conditionValue comparator . conditionValue
    (42) conditionValue -> . ID
    (43) conditionValue -> . number
    (50) number -> . FLOAT
    (51) number -> . INTEGER

    ID              shift and go to state 23
    FLOAT           shift and go to state 25
    INTEGER         shift and go to state 26

    conditionValue                 shift and go to state 58
    number                         shift and go to state 24

state 44

    (45) comparator -> GREATERTHAN .

    ID              reduce using rule 45 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 45 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 45 (comparator -> GREATERTHAN .)


state 45

    (46) comparator -> LESSTHAN .

    ID              reduce using rule 46 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 46 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 46 (comparator -> LESSTHAN .)


state 46

    (47) comparator -> EQUALS .

    ID              reduce using rule 47 (comparator -> EQUALS .)
    FLOAT           reduce using rule 47 (comparator -> EQUALS .)
    INTEGER         reduce using rule 47 (comparator -> EQUALS .)


state 47

    (48) comparator -> GREATEROREQUALS .

    ID              reduce using rule 48 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 48 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 48 (comparator -> GREATEROREQUALS .)


state 48

    (49) comparator -> LESSOREQUALS .

    ID              reduce using rule 49 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 49 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 49 (comparator -> LESSOREQUALS .)


state 49

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 59


state 50

    (34) parameters -> ID .
    (35) parameters -> ID . COMMA ID

    RPAREN          reduce using rule 34 (parameters -> ID .)
    COMMA           shift and go to state 60


state 51

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 61


state 52

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 62


state 53

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 54

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 63
    ELSE            shift and go to state 64


state 55

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 65
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 56

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 57

    elsif                          shift and go to state 56
    conditionalElsif               shift and go to state 66

state 57

    (9) elsif -> ELSIF . condition instructionBody
    (44) condition -> . conditionValue comparator conditionValue
    (42) conditionValue -> . ID
    (43) conditionValue -> . number
    (50) number -> . FLOAT
    (51) number -> . INTEGER

    ID              shift and go to state 23
    FLOAT           shift and go to state 25
    INTEGER         shift and go to state 26

    condition                      shift and go to state 67
    conditionValue                 shift and go to state 22
    number                         shift and go to state 24

state 58

    (44) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 44 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 44 (condition -> conditionValue comparator conditionValue .)


state 59

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 60

    (35) parameters -> ID COMMA . ID

    ID              shift and go to state 68


state 61

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 69
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 62

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 63

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 64

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 70
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 65

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 71


state 66

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 67

    (9) elsif -> ELSIF condition . instructionBody
    (27) instructionBody -> . bodyLine
    (28) instructionBody -> . bodyLine instructionBody
    (23) bodyLine -> . assignmentRule
    (24) bodyLine -> . PRINT printBody
    (25) bodyLine -> . nestedConditional
    (26) bodyLine -> . nestedWhile
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 72
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    conditional                    shift and go to state 16
    whileLoop                      shift and go to state 18

state 68

    (35) parameters -> ID COMMA ID .

    RPAREN          reduce using rule 35 (parameters -> ID COMMA ID .)


state 69

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 73


state 70

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 74


state 71

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 72

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 73

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 74

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 16 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 18 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
