Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    FOR
    GETS
    IN
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    assignmentRule -> ID ASSIGNMENT operations
Rule 25    assignmentRule -> ID ASSIGNMENT array
Rule 26    assignmentRule -> ID ASSIGNMENT ID array
Rule 27    bodyLine -> assignmentRule
Rule 28    bodyLine -> PRINT printBody
Rule 29    bodyLine -> nestedConditional
Rule 30    bodyLine -> nestedWhile
Rule 31    bodyLine -> funcionCall
Rule 32    bodyLine -> arrayConcat
Rule 33    instructionBody -> bodyLine
Rule 34    instructionBody -> bodyLine instructionBody
Rule 35    printBody -> ID
Rule 36    printBody -> TRUE
Rule 37    printBody -> FALSE
Rule 38    printBody -> dataType
Rule 39    printBody -> condition
Rule 40    parameters -> ID
Rule 41    parameters -> ID COMMA parameters
Rule 42    funcionCall -> ID LPAREN parameters RPAREN
Rule 43    funcionCall -> ID LPAREN RPAREN
Rule 44    creationStack -> STACK DOT NEW
Rule 45    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 46    creationNode -> NODE DOT NEW LPAREN RPAREN
Rule 47    creationNode -> NODE DOT NEW LPAREN ID RPAREN
Rule 48    creationLinkedList -> LINKEDLIST DOT NEW
Rule 49    creationTDA -> creationStack
Rule 50    creationTDA -> creationLinkedList
Rule 51    creationTDA -> creationHashmap
Rule 52    creationHashmap -> HASH DOT NEW
Rule 53    creationHashmap -> LBRACE pairs RBRACE
Rule 54    creationHashmap -> LBRACE RBRACE
Rule 55    pair -> STRING COLON value
Rule 56    pairs -> pair
Rule 57    pairs -> pair COMMA pairs
Rule 58    value -> ID
Rule 59    value -> STRING
Rule 60    value -> number
Rule 61    value -> LBRACE pairs RBRACE
Rule 62    value -> LBRACE RBRACE
Rule 63    arithmeticOperator -> PLUS
Rule 64    arithmeticOperator -> MINUS
Rule 65    arithmeticOperator -> POWER
Rule 66    arithmeticOperator -> MULTIPLICATION
Rule 67    arithmeticOperator -> DIVISION
Rule 68    getAttribute -> ID DOT ID
Rule 69    operationValue -> ID
Rule 70    operationValue -> number
Rule 71    operationValue -> getAttribute
Rule 72    operation -> operationValue arithmeticOperator operationValue
Rule 73    operations -> operation
Rule 74    operations -> operation arithmeticOperator operations
Rule 75    operations -> operationValue
Rule 76    array -> OPENBRACKET element_list CLOSEDBRACKET
Rule 77    element_list -> conditionValue
Rule 78    element_list -> element_list COMMA conditionValue
Rule 79    conditionValue -> ID
Rule 80    conditionValue -> number
Rule 81    arrayConcat -> ID ARRAYAPPEND ID
Rule 82    arrayConcat -> ID ARRAYAPPEND number
Rule 83    condition -> conditionValue comparator conditionValue
Rule 84    comparator -> GREATERTHAN
Rule 85    comparator -> LESSTHAN
Rule 86    comparator -> EQUALS
Rule 87    comparator -> GREATEROREQUALS
Rule 88    comparator -> LESSOREQUALS
Rule 89    number -> FLOAT
Rule 90    number -> INTEGER
Rule 91    dataType -> STRING
Rule 92    dataType -> number

Terminals, with rules where they appear

AND                  : 
ARRAYAPPEND          : 81 82
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22 23 24 25 26
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 45 76
COLON                : 55
COMMA                : 41 57 78
DEF                  : 2 3
DIVISION             : 67
DOT                  : 44 46 47 48 52 68
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 86
FALSE                : 22 37
FLOAT                : 89
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 87
GREATERTHAN          : 84
HASH                 : 52
ID                   : 2 3 18 19 19 20 21 22 23 24 25 26 26 35 40 41 42 43 47 58 68 68 69 79 81 81 82
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 90
LBRACE               : 53 54 61 62
LESSOREQUALS         : 88
LESSTHAN             : 85
LINKEDLIST           : 48
LPAREN               : 2 3 42 43 46 47
MINUS                : 64
MULTIPLICATION       : 66
NEW                  : 44 46 47 48 52
NODE                 : 46 47
OPENBRACKET          : 45 76
PLUS                 : 63
POWER                : 65
PRINT                : 28
PUTS                 : 
RBRACE               : 53 54 61 62
RPAREN               : 2 3 42 43 46 47
STACK                : 44
STRING               : 55 59 91
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 36
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmeticOperator   : 72 74
array                : 25 26
arrayConcat          : 32
assignmentRule       : 27
bodyLine             : 33 34
comparator           : 83
condition            : 5 6 7 8 9 15 20 39
conditionValue       : 77 78 83 83
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationHashmap      : 51
creationLinkedList   : 50
creationNode         : 
creationStack        : 49
creationTDA          : 23
dataType             : 38
element_list         : 76 78
elsif                : 12 13
funcionCall          : 31
getAttribute         : 71
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 34
nestedConditional    : 11 29
nestedWhile          : 17 30
number               : 18 60 70 80 82 92
operation            : 73 74
operationValue       : 72 72 75
operations           : 24 74
pair                 : 56 57
pairs                : 53 57 61
parameters           : 2 41 42
printBody            : 28
value                : 55
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 16


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (24) assignmentRule -> ID . ASSIGNMENT operations
    (25) assignmentRule -> ID . ASSIGNMENT array
    (26) assignmentRule -> ID . ASSIGNMENT ID array
    (42) funcionCall -> ID . LPAREN parameters RPAREN
    (43) funcionCall -> ID . LPAREN RPAREN
    (81) arrayConcat -> ID . ARRAYAPPEND ID
    (82) arrayConcat -> ID . ARRAYAPPEND number

    ASSIGNMENT      shift and go to state 17
    LPAREN          shift and go to state 18
    ARRAYAPPEND     shift and go to state 19


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 20
    nestedConditional              shift and go to state 21

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 22
    nestedWhile                    shift and go to state 23

state 7

    (33) instructionBody -> bodyLine .
    (34) instructionBody -> bodyLine . instructionBody
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 33 (instructionBody -> bodyLine .)
    END             reduce using rule 33 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 33 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 33 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 24
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (83) condition -> . conditionValue comparator conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    condition                      shift and go to state 25
    conditionValue                 shift and go to state 26
    number                         shift and go to state 28

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (83) condition -> . conditionValue comparator conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    condition                      shift and go to state 31
    conditionValue                 shift and go to state 26
    number                         shift and go to state 28

state 10

    (27) bodyLine -> assignmentRule .

    PRINT           reduce using rule 27 (bodyLine -> assignmentRule .)
    ID              reduce using rule 27 (bodyLine -> assignmentRule .)
    IF              reduce using rule 27 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 27 (bodyLine -> assignmentRule .)
    $end            reduce using rule 27 (bodyLine -> assignmentRule .)
    END             reduce using rule 27 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 27 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 27 (bodyLine -> assignmentRule .)


state 11

    (28) bodyLine -> PRINT . printBody
    (35) printBody -> . ID
    (36) printBody -> . TRUE
    (37) printBody -> . FALSE
    (38) printBody -> . dataType
    (39) printBody -> . condition
    (91) dataType -> . STRING
    (92) dataType -> . number
    (83) condition -> . conditionValue comparator conditionValue
    (89) number -> . FLOAT
    (90) number -> . INTEGER
    (79) conditionValue -> . ID
    (80) conditionValue -> . number

    ID              shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    STRING          shift and go to state 38
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    printBody                      shift and go to state 32
    dataType                       shift and go to state 36
    condition                      shift and go to state 37
    number                         shift and go to state 39
    conditionValue                 shift and go to state 26

state 12

    (29) bodyLine -> nestedConditional .

    PRINT           reduce using rule 29 (bodyLine -> nestedConditional .)
    ID              reduce using rule 29 (bodyLine -> nestedConditional .)
    IF              reduce using rule 29 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 29 (bodyLine -> nestedConditional .)
    $end            reduce using rule 29 (bodyLine -> nestedConditional .)
    END             reduce using rule 29 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 29 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 29 (bodyLine -> nestedConditional .)


state 13

    (30) bodyLine -> nestedWhile .

    PRINT           reduce using rule 30 (bodyLine -> nestedWhile .)
    ID              reduce using rule 30 (bodyLine -> nestedWhile .)
    IF              reduce using rule 30 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 30 (bodyLine -> nestedWhile .)
    $end            reduce using rule 30 (bodyLine -> nestedWhile .)
    END             reduce using rule 30 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 30 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 30 (bodyLine -> nestedWhile .)


state 14

    (31) bodyLine -> funcionCall .

    PRINT           reduce using rule 31 (bodyLine -> funcionCall .)
    ID              reduce using rule 31 (bodyLine -> funcionCall .)
    IF              reduce using rule 31 (bodyLine -> funcionCall .)
    WHILE           reduce using rule 31 (bodyLine -> funcionCall .)
    $end            reduce using rule 31 (bodyLine -> funcionCall .)
    END             reduce using rule 31 (bodyLine -> funcionCall .)
    ELSE            reduce using rule 31 (bodyLine -> funcionCall .)
    ELSIF           reduce using rule 31 (bodyLine -> funcionCall .)


state 15

    (32) bodyLine -> arrayConcat .

    PRINT           reduce using rule 32 (bodyLine -> arrayConcat .)
    ID              reduce using rule 32 (bodyLine -> arrayConcat .)
    IF              reduce using rule 32 (bodyLine -> arrayConcat .)
    WHILE           reduce using rule 32 (bodyLine -> arrayConcat .)
    $end            reduce using rule 32 (bodyLine -> arrayConcat .)
    END             reduce using rule 32 (bodyLine -> arrayConcat .)
    ELSE            reduce using rule 32 (bodyLine -> arrayConcat .)
    ELSIF           reduce using rule 32 (bodyLine -> arrayConcat .)


state 16

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 40


state 17

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (24) assignmentRule -> ID ASSIGNMENT . operations
    (25) assignmentRule -> ID ASSIGNMENT . array
    (26) assignmentRule -> ID ASSIGNMENT . ID array
    (89) number -> . FLOAT
    (90) number -> . INTEGER
    (83) condition -> . conditionValue comparator conditionValue
    (49) creationTDA -> . creationStack
    (50) creationTDA -> . creationLinkedList
    (51) creationTDA -> . creationHashmap
    (73) operations -> . operation
    (74) operations -> . operation arithmeticOperator operations
    (75) operations -> . operationValue
    (76) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (44) creationStack -> . STACK DOT NEW
    (45) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (48) creationLinkedList -> . LINKEDLIST DOT NEW
    (52) creationHashmap -> . HASH DOT NEW
    (53) creationHashmap -> . LBRACE pairs RBRACE
    (54) creationHashmap -> . LBRACE RBRACE
    (72) operation -> . operationValue arithmeticOperator operationValue
    (69) operationValue -> . ID
    (70) operationValue -> . number
    (71) operationValue -> . getAttribute
    (68) getAttribute -> . ID DOT ID

    ID              shift and go to state 41
    TRUE            shift and go to state 44
    FALSE           shift and go to state 45
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    OPENBRACKET     shift and go to state 54
    STACK           shift and go to state 55
    LINKEDLIST      shift and go to state 56
    HASH            shift and go to state 57
    LBRACE          shift and go to state 58

    number                         shift and go to state 42
    condition                      shift and go to state 43
    creationTDA                    shift and go to state 46
    operations                     shift and go to state 47
    array                          shift and go to state 48
    conditionValue                 shift and go to state 26
    creationStack                  shift and go to state 49
    creationLinkedList             shift and go to state 50
    creationHashmap                shift and go to state 51
    operation                      shift and go to state 52
    operationValue                 shift and go to state 53
    getAttribute                   shift and go to state 59

state 18

    (42) funcionCall -> ID LPAREN . parameters RPAREN
    (43) funcionCall -> ID LPAREN . RPAREN
    (40) parameters -> . ID
    (41) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 62
    ID              shift and go to state 60

    parameters                     shift and go to state 61

state 19

    (81) arrayConcat -> ID ARRAYAPPEND . ID
    (82) arrayConcat -> ID ARRAYAPPEND . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 63
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    number                         shift and go to state 64

state 20

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 20
    nestedConditional              shift and go to state 21

state 21

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 22

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 22
    nestedWhile                    shift and go to state 23

state 23

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 24

    (34) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 34 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 34 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 34 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 34 (instructionBody -> bodyLine instructionBody .)


state 25

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 65
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 26

    (83) condition -> conditionValue . comparator conditionValue
    (84) comparator -> . GREATERTHAN
    (85) comparator -> . LESSTHAN
    (86) comparator -> . EQUALS
    (87) comparator -> . GREATEROREQUALS
    (88) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 67
    LESSTHAN        shift and go to state 68
    EQUALS          shift and go to state 69
    GREATEROREQUALS shift and go to state 70
    LESSOREQUALS    shift and go to state 71

    comparator                     shift and go to state 66

state 27

    (79) conditionValue -> ID .

    GREATERTHAN     reduce using rule 79 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 79 (conditionValue -> ID .)
    EQUALS          reduce using rule 79 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 79 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 79 (conditionValue -> ID .)
    CLOSEDBRACKET   reduce using rule 79 (conditionValue -> ID .)
    COMMA           reduce using rule 79 (conditionValue -> ID .)
    PRINT           reduce using rule 79 (conditionValue -> ID .)
    ID              reduce using rule 79 (conditionValue -> ID .)
    IF              reduce using rule 79 (conditionValue -> ID .)
    WHILE           reduce using rule 79 (conditionValue -> ID .)
    $end            reduce using rule 79 (conditionValue -> ID .)
    END             reduce using rule 79 (conditionValue -> ID .)
    ELSE            reduce using rule 79 (conditionValue -> ID .)
    ELSIF           reduce using rule 79 (conditionValue -> ID .)


state 28

    (80) conditionValue -> number .

    GREATERTHAN     reduce using rule 80 (conditionValue -> number .)
    LESSTHAN        reduce using rule 80 (conditionValue -> number .)
    EQUALS          reduce using rule 80 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 80 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 80 (conditionValue -> number .)
    CLOSEDBRACKET   reduce using rule 80 (conditionValue -> number .)
    COMMA           reduce using rule 80 (conditionValue -> number .)
    PRINT           reduce using rule 80 (conditionValue -> number .)
    ID              reduce using rule 80 (conditionValue -> number .)
    IF              reduce using rule 80 (conditionValue -> number .)
    WHILE           reduce using rule 80 (conditionValue -> number .)
    $end            reduce using rule 80 (conditionValue -> number .)
    END             reduce using rule 80 (conditionValue -> number .)
    ELSE            reduce using rule 80 (conditionValue -> number .)
    ELSIF           reduce using rule 80 (conditionValue -> number .)


state 29

    (89) number -> FLOAT .

    GREATERTHAN     reduce using rule 89 (number -> FLOAT .)
    LESSTHAN        reduce using rule 89 (number -> FLOAT .)
    EQUALS          reduce using rule 89 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 89 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 89 (number -> FLOAT .)
    PRINT           reduce using rule 89 (number -> FLOAT .)
    ID              reduce using rule 89 (number -> FLOAT .)
    IF              reduce using rule 89 (number -> FLOAT .)
    WHILE           reduce using rule 89 (number -> FLOAT .)
    $end            reduce using rule 89 (number -> FLOAT .)
    END             reduce using rule 89 (number -> FLOAT .)
    ELSE            reduce using rule 89 (number -> FLOAT .)
    ELSIF           reduce using rule 89 (number -> FLOAT .)
    PLUS            reduce using rule 89 (number -> FLOAT .)
    MINUS           reduce using rule 89 (number -> FLOAT .)
    POWER           reduce using rule 89 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 89 (number -> FLOAT .)
    DIVISION        reduce using rule 89 (number -> FLOAT .)
    CLOSEDBRACKET   reduce using rule 89 (number -> FLOAT .)
    COMMA           reduce using rule 89 (number -> FLOAT .)
    RBRACE          reduce using rule 89 (number -> FLOAT .)


state 30

    (90) number -> INTEGER .

    GREATERTHAN     reduce using rule 90 (number -> INTEGER .)
    LESSTHAN        reduce using rule 90 (number -> INTEGER .)
    EQUALS          reduce using rule 90 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 90 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 90 (number -> INTEGER .)
    PRINT           reduce using rule 90 (number -> INTEGER .)
    ID              reduce using rule 90 (number -> INTEGER .)
    IF              reduce using rule 90 (number -> INTEGER .)
    WHILE           reduce using rule 90 (number -> INTEGER .)
    $end            reduce using rule 90 (number -> INTEGER .)
    END             reduce using rule 90 (number -> INTEGER .)
    ELSE            reduce using rule 90 (number -> INTEGER .)
    ELSIF           reduce using rule 90 (number -> INTEGER .)
    PLUS            reduce using rule 90 (number -> INTEGER .)
    MINUS           reduce using rule 90 (number -> INTEGER .)
    POWER           reduce using rule 90 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 90 (number -> INTEGER .)
    DIVISION        reduce using rule 90 (number -> INTEGER .)
    CLOSEDBRACKET   reduce using rule 90 (number -> INTEGER .)
    COMMA           reduce using rule 90 (number -> INTEGER .)
    RBRACE          reduce using rule 90 (number -> INTEGER .)


state 31

    (15) whileLoop -> WHILE condition . instructionBody END
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 72
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 32

    (28) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 28 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 28 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 28 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 28 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 28 (bodyLine -> PRINT printBody .)
    END             reduce using rule 28 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 28 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 28 (bodyLine -> PRINT printBody .)


state 33

    (35) printBody -> ID .
    (79) conditionValue -> ID .

    PRINT           reduce using rule 35 (printBody -> ID .)
    ID              reduce using rule 35 (printBody -> ID .)
    IF              reduce using rule 35 (printBody -> ID .)
    WHILE           reduce using rule 35 (printBody -> ID .)
    $end            reduce using rule 35 (printBody -> ID .)
    END             reduce using rule 35 (printBody -> ID .)
    ELSE            reduce using rule 35 (printBody -> ID .)
    ELSIF           reduce using rule 35 (printBody -> ID .)
    GREATERTHAN     reduce using rule 79 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 79 (conditionValue -> ID .)
    EQUALS          reduce using rule 79 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 79 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 79 (conditionValue -> ID .)


state 34

    (36) printBody -> TRUE .

    PRINT           reduce using rule 36 (printBody -> TRUE .)
    ID              reduce using rule 36 (printBody -> TRUE .)
    IF              reduce using rule 36 (printBody -> TRUE .)
    WHILE           reduce using rule 36 (printBody -> TRUE .)
    $end            reduce using rule 36 (printBody -> TRUE .)
    END             reduce using rule 36 (printBody -> TRUE .)
    ELSE            reduce using rule 36 (printBody -> TRUE .)
    ELSIF           reduce using rule 36 (printBody -> TRUE .)


state 35

    (37) printBody -> FALSE .

    PRINT           reduce using rule 37 (printBody -> FALSE .)
    ID              reduce using rule 37 (printBody -> FALSE .)
    IF              reduce using rule 37 (printBody -> FALSE .)
    WHILE           reduce using rule 37 (printBody -> FALSE .)
    $end            reduce using rule 37 (printBody -> FALSE .)
    END             reduce using rule 37 (printBody -> FALSE .)
    ELSE            reduce using rule 37 (printBody -> FALSE .)
    ELSIF           reduce using rule 37 (printBody -> FALSE .)


state 36

    (38) printBody -> dataType .

    PRINT           reduce using rule 38 (printBody -> dataType .)
    ID              reduce using rule 38 (printBody -> dataType .)
    IF              reduce using rule 38 (printBody -> dataType .)
    WHILE           reduce using rule 38 (printBody -> dataType .)
    $end            reduce using rule 38 (printBody -> dataType .)
    END             reduce using rule 38 (printBody -> dataType .)
    ELSE            reduce using rule 38 (printBody -> dataType .)
    ELSIF           reduce using rule 38 (printBody -> dataType .)


state 37

    (39) printBody -> condition .

    PRINT           reduce using rule 39 (printBody -> condition .)
    ID              reduce using rule 39 (printBody -> condition .)
    IF              reduce using rule 39 (printBody -> condition .)
    WHILE           reduce using rule 39 (printBody -> condition .)
    $end            reduce using rule 39 (printBody -> condition .)
    END             reduce using rule 39 (printBody -> condition .)
    ELSE            reduce using rule 39 (printBody -> condition .)
    ELSIF           reduce using rule 39 (printBody -> condition .)


state 38

    (91) dataType -> STRING .

    PRINT           reduce using rule 91 (dataType -> STRING .)
    ID              reduce using rule 91 (dataType -> STRING .)
    IF              reduce using rule 91 (dataType -> STRING .)
    WHILE           reduce using rule 91 (dataType -> STRING .)
    $end            reduce using rule 91 (dataType -> STRING .)
    END             reduce using rule 91 (dataType -> STRING .)
    ELSE            reduce using rule 91 (dataType -> STRING .)
    ELSIF           reduce using rule 91 (dataType -> STRING .)


state 39

    (92) dataType -> number .
    (80) conditionValue -> number .

    PRINT           reduce using rule 92 (dataType -> number .)
    ID              reduce using rule 92 (dataType -> number .)
    IF              reduce using rule 92 (dataType -> number .)
    WHILE           reduce using rule 92 (dataType -> number .)
    $end            reduce using rule 92 (dataType -> number .)
    END             reduce using rule 92 (dataType -> number .)
    ELSE            reduce using rule 92 (dataType -> number .)
    ELSIF           reduce using rule 92 (dataType -> number .)
    GREATERTHAN     reduce using rule 80 (conditionValue -> number .)
    LESSTHAN        reduce using rule 80 (conditionValue -> number .)
    EQUALS          reduce using rule 80 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 80 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 80 (conditionValue -> number .)


state 40

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (40) parameters -> . ID
    (41) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 74
    ID              shift and go to state 60

    parameters                     shift and go to state 73

state 41

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (26) assignmentRule -> ID ASSIGNMENT ID . array
    (79) conditionValue -> ID .
    (69) operationValue -> ID .
    (68) getAttribute -> ID . DOT ID
    (76) array -> . OPENBRACKET element_list CLOSEDBRACKET

  ! reduce/reduce conflict for PRINT resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for ID resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for IF resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for $end resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for END resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for ELSIF resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    GREATERTHAN     reduce using rule 79 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 79 (conditionValue -> ID .)
    EQUALS          reduce using rule 79 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 79 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 79 (conditionValue -> ID .)
    PLUS            reduce using rule 69 (operationValue -> ID .)
    MINUS           reduce using rule 69 (operationValue -> ID .)
    POWER           reduce using rule 69 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 69 (operationValue -> ID .)
    DIVISION        reduce using rule 69 (operationValue -> ID .)
    DOT             shift and go to state 76
    OPENBRACKET     shift and go to state 77

  ! PRINT           [ reduce using rule 69 (operationValue -> ID .) ]
  ! ID              [ reduce using rule 69 (operationValue -> ID .) ]
  ! IF              [ reduce using rule 69 (operationValue -> ID .) ]
  ! WHILE           [ reduce using rule 69 (operationValue -> ID .) ]
  ! $end            [ reduce using rule 69 (operationValue -> ID .) ]
  ! END             [ reduce using rule 69 (operationValue -> ID .) ]
  ! ELSE            [ reduce using rule 69 (operationValue -> ID .) ]
  ! ELSIF           [ reduce using rule 69 (operationValue -> ID .) ]

    array                          shift and go to state 75

state 42

    (18) assignmentRule -> ID ASSIGNMENT number .
    (80) conditionValue -> number .
    (70) operationValue -> number .

  ! reduce/reduce conflict for PRINT resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for ID resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for IF resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for $end resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for END resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for ELSIF resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 80 (conditionValue -> number .)
    LESSTHAN        reduce using rule 80 (conditionValue -> number .)
    EQUALS          reduce using rule 80 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 80 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 80 (conditionValue -> number .)
    PLUS            reduce using rule 70 (operationValue -> number .)
    MINUS           reduce using rule 70 (operationValue -> number .)
    POWER           reduce using rule 70 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 70 (operationValue -> number .)
    DIVISION        reduce using rule 70 (operationValue -> number .)

  ! PRINT           [ reduce using rule 70 (operationValue -> number .) ]
  ! ID              [ reduce using rule 70 (operationValue -> number .) ]
  ! IF              [ reduce using rule 70 (operationValue -> number .) ]
  ! WHILE           [ reduce using rule 70 (operationValue -> number .) ]
  ! $end            [ reduce using rule 70 (operationValue -> number .) ]
  ! END             [ reduce using rule 70 (operationValue -> number .) ]
  ! ELSE            [ reduce using rule 70 (operationValue -> number .) ]
  ! ELSIF           [ reduce using rule 70 (operationValue -> number .) ]


state 43

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 44

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 45

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 46

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 47

    (24) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)


state 48

    (25) assignmentRule -> ID ASSIGNMENT array .

    PRINT           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ID              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    IF              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    WHILE           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    $end            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    END             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ELSE            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ELSIF           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)


state 49

    (49) creationTDA -> creationStack .

    PRINT           reduce using rule 49 (creationTDA -> creationStack .)
    ID              reduce using rule 49 (creationTDA -> creationStack .)
    IF              reduce using rule 49 (creationTDA -> creationStack .)
    WHILE           reduce using rule 49 (creationTDA -> creationStack .)
    $end            reduce using rule 49 (creationTDA -> creationStack .)
    END             reduce using rule 49 (creationTDA -> creationStack .)
    ELSE            reduce using rule 49 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 49 (creationTDA -> creationStack .)


state 50

    (50) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 50 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 50 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 50 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 50 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 50 (creationTDA -> creationLinkedList .)
    END             reduce using rule 50 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 50 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 50 (creationTDA -> creationLinkedList .)


state 51

    (51) creationTDA -> creationHashmap .

    PRINT           reduce using rule 51 (creationTDA -> creationHashmap .)
    ID              reduce using rule 51 (creationTDA -> creationHashmap .)
    IF              reduce using rule 51 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 51 (creationTDA -> creationHashmap .)
    $end            reduce using rule 51 (creationTDA -> creationHashmap .)
    END             reduce using rule 51 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 51 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 51 (creationTDA -> creationHashmap .)


state 52

    (73) operations -> operation .
    (74) operations -> operation . arithmeticOperator operations
    (63) arithmeticOperator -> . PLUS
    (64) arithmeticOperator -> . MINUS
    (65) arithmeticOperator -> . POWER
    (66) arithmeticOperator -> . MULTIPLICATION
    (67) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 73 (operations -> operation .)
    ID              reduce using rule 73 (operations -> operation .)
    IF              reduce using rule 73 (operations -> operation .)
    WHILE           reduce using rule 73 (operations -> operation .)
    $end            reduce using rule 73 (operations -> operation .)
    END             reduce using rule 73 (operations -> operation .)
    ELSE            reduce using rule 73 (operations -> operation .)
    ELSIF           reduce using rule 73 (operations -> operation .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    POWER           shift and go to state 81
    MULTIPLICATION  shift and go to state 82
    DIVISION        shift and go to state 83

    arithmeticOperator             shift and go to state 78

state 53

    (75) operations -> operationValue .
    (72) operation -> operationValue . arithmeticOperator operationValue
    (63) arithmeticOperator -> . PLUS
    (64) arithmeticOperator -> . MINUS
    (65) arithmeticOperator -> . POWER
    (66) arithmeticOperator -> . MULTIPLICATION
    (67) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 75 (operations -> operationValue .)
    ID              reduce using rule 75 (operations -> operationValue .)
    IF              reduce using rule 75 (operations -> operationValue .)
    WHILE           reduce using rule 75 (operations -> operationValue .)
    $end            reduce using rule 75 (operations -> operationValue .)
    END             reduce using rule 75 (operations -> operationValue .)
    ELSE            reduce using rule 75 (operations -> operationValue .)
    ELSIF           reduce using rule 75 (operations -> operationValue .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    POWER           shift and go to state 81
    MULTIPLICATION  shift and go to state 82
    DIVISION        shift and go to state 83

    arithmeticOperator             shift and go to state 84

state 54

    (76) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (45) creationStack -> OPENBRACKET . CLOSEDBRACKET
    (77) element_list -> . conditionValue
    (78) element_list -> . element_list COMMA conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    CLOSEDBRACKET   shift and go to state 86
    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    element_list                   shift and go to state 85
    conditionValue                 shift and go to state 87
    number                         shift and go to state 28

state 55

    (44) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 88


state 56

    (48) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 89


state 57

    (52) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 90


state 58

    (53) creationHashmap -> LBRACE . pairs RBRACE
    (54) creationHashmap -> LBRACE . RBRACE
    (56) pairs -> . pair
    (57) pairs -> . pair COMMA pairs
    (55) pair -> . STRING COLON value

    RBRACE          shift and go to state 92
    STRING          shift and go to state 94

    pairs                          shift and go to state 91
    pair                           shift and go to state 93

state 59

    (71) operationValue -> getAttribute .

    PLUS            reduce using rule 71 (operationValue -> getAttribute .)
    MINUS           reduce using rule 71 (operationValue -> getAttribute .)
    POWER           reduce using rule 71 (operationValue -> getAttribute .)
    MULTIPLICATION  reduce using rule 71 (operationValue -> getAttribute .)
    DIVISION        reduce using rule 71 (operationValue -> getAttribute .)
    PRINT           reduce using rule 71 (operationValue -> getAttribute .)
    ID              reduce using rule 71 (operationValue -> getAttribute .)
    IF              reduce using rule 71 (operationValue -> getAttribute .)
    WHILE           reduce using rule 71 (operationValue -> getAttribute .)
    $end            reduce using rule 71 (operationValue -> getAttribute .)
    END             reduce using rule 71 (operationValue -> getAttribute .)
    ELSE            reduce using rule 71 (operationValue -> getAttribute .)
    ELSIF           reduce using rule 71 (operationValue -> getAttribute .)


state 60

    (40) parameters -> ID .
    (41) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 40 (parameters -> ID .)
    COMMA           shift and go to state 95


state 61

    (42) funcionCall -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 96


state 62

    (43) funcionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 43 (funcionCall -> ID LPAREN RPAREN .)


state 63

    (81) arrayConcat -> ID ARRAYAPPEND ID .

    PRINT           reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    ID              reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    IF              reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    WHILE           reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    $end            reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    END             reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSE            reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSIF           reduce using rule 81 (arrayConcat -> ID ARRAYAPPEND ID .)


state 64

    (82) arrayConcat -> ID ARRAYAPPEND number .

    PRINT           reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    ID              reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    IF              reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    WHILE           reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    $end            reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    END             reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSE            reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSIF           reduce using rule 82 (arrayConcat -> ID ARRAYAPPEND number .)


state 65

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 97
    ELSE            shift and go to state 99
    ELSIF           shift and go to state 101

    conditionalElsif               shift and go to state 98
    elsif                          shift and go to state 100

state 66

    (83) condition -> conditionValue comparator . conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    conditionValue                 shift and go to state 102
    number                         shift and go to state 28

state 67

    (84) comparator -> GREATERTHAN .

    ID              reduce using rule 84 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 84 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 84 (comparator -> GREATERTHAN .)


state 68

    (85) comparator -> LESSTHAN .

    ID              reduce using rule 85 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 85 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 85 (comparator -> LESSTHAN .)


state 69

    (86) comparator -> EQUALS .

    ID              reduce using rule 86 (comparator -> EQUALS .)
    FLOAT           reduce using rule 86 (comparator -> EQUALS .)
    INTEGER         reduce using rule 86 (comparator -> EQUALS .)


state 70

    (87) comparator -> GREATEROREQUALS .

    ID              reduce using rule 87 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 87 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 87 (comparator -> GREATEROREQUALS .)


state 71

    (88) comparator -> LESSOREQUALS .

    ID              reduce using rule 88 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 88 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 88 (comparator -> LESSOREQUALS .)


state 72

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 103


state 73

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 104


state 74

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 105


state 75

    (26) assignmentRule -> ID ASSIGNMENT ID array .

    PRINT           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    ID              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    IF              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    WHILE           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    $end            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    END             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    ELSE            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)
    ELSIF           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT ID array .)


state 76

    (68) getAttribute -> ID DOT . ID

    ID              shift and go to state 106


state 77

    (76) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (77) element_list -> . conditionValue
    (78) element_list -> . element_list COMMA conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    element_list                   shift and go to state 85
    conditionValue                 shift and go to state 87
    number                         shift and go to state 28

state 78

    (74) operations -> operation arithmeticOperator . operations
    (73) operations -> . operation
    (74) operations -> . operation arithmeticOperator operations
    (75) operations -> . operationValue
    (72) operation -> . operationValue arithmeticOperator operationValue
    (69) operationValue -> . ID
    (70) operationValue -> . number
    (71) operationValue -> . getAttribute
    (89) number -> . FLOAT
    (90) number -> . INTEGER
    (68) getAttribute -> . ID DOT ID

    ID              shift and go to state 108
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    operation                      shift and go to state 52
    operations                     shift and go to state 107
    operationValue                 shift and go to state 53
    number                         shift and go to state 109
    getAttribute                   shift and go to state 59

state 79

    (63) arithmeticOperator -> PLUS .

    ID              reduce using rule 63 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 63 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 63 (arithmeticOperator -> PLUS .)


state 80

    (64) arithmeticOperator -> MINUS .

    ID              reduce using rule 64 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 64 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 64 (arithmeticOperator -> MINUS .)


state 81

    (65) arithmeticOperator -> POWER .

    ID              reduce using rule 65 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 65 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 65 (arithmeticOperator -> POWER .)


state 82

    (66) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 66 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 66 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 66 (arithmeticOperator -> MULTIPLICATION .)


state 83

    (67) arithmeticOperator -> DIVISION .

    ID              reduce using rule 67 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 67 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 67 (arithmeticOperator -> DIVISION .)


state 84

    (72) operation -> operationValue arithmeticOperator . operationValue
    (69) operationValue -> . ID
    (70) operationValue -> . number
    (71) operationValue -> . getAttribute
    (89) number -> . FLOAT
    (90) number -> . INTEGER
    (68) getAttribute -> . ID DOT ID

    ID              shift and go to state 108
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    operationValue                 shift and go to state 110
    number                         shift and go to state 109
    getAttribute                   shift and go to state 59

state 85

    (76) array -> OPENBRACKET element_list . CLOSEDBRACKET
    (78) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 111
    COMMA           shift and go to state 112


state 86

    (45) creationStack -> OPENBRACKET CLOSEDBRACKET .

    PRINT           reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 45 (creationStack -> OPENBRACKET CLOSEDBRACKET .)


state 87

    (77) element_list -> conditionValue .

    CLOSEDBRACKET   reduce using rule 77 (element_list -> conditionValue .)
    COMMA           reduce using rule 77 (element_list -> conditionValue .)


state 88

    (44) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 113


state 89

    (48) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 114


state 90

    (52) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 115


state 91

    (53) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 116


state 92

    (54) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 54 (creationHashmap -> LBRACE RBRACE .)


state 93

    (56) pairs -> pair .
    (57) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 56 (pairs -> pair .)
    COMMA           shift and go to state 117


state 94

    (55) pair -> STRING . COLON value

    COLON           shift and go to state 118


state 95

    (41) parameters -> ID COMMA . parameters
    (40) parameters -> . ID
    (41) parameters -> . ID COMMA parameters

    ID              shift and go to state 60

    parameters                     shift and go to state 119

state 96

    (42) funcionCall -> ID LPAREN parameters RPAREN .

    PRINT           reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    WHILE           reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    $end            reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    END             reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSE            reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSIF           reduce using rule 42 (funcionCall -> ID LPAREN parameters RPAREN .)


state 97

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 98

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 120
    ELSE            shift and go to state 121


state 99

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 122
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 100

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 101

    elsif                          shift and go to state 100
    conditionalElsif               shift and go to state 123

state 101

    (9) elsif -> ELSIF . condition instructionBody
    (83) condition -> . conditionValue comparator conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    condition                      shift and go to state 124
    conditionValue                 shift and go to state 26
    number                         shift and go to state 28

state 102

    (83) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 83 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 83 (condition -> conditionValue comparator conditionValue .)


state 103

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 104

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 125
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 105

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 106

    (68) getAttribute -> ID DOT ID .

    PLUS            reduce using rule 68 (getAttribute -> ID DOT ID .)
    MINUS           reduce using rule 68 (getAttribute -> ID DOT ID .)
    POWER           reduce using rule 68 (getAttribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 68 (getAttribute -> ID DOT ID .)
    DIVISION        reduce using rule 68 (getAttribute -> ID DOT ID .)
    PRINT           reduce using rule 68 (getAttribute -> ID DOT ID .)
    ID              reduce using rule 68 (getAttribute -> ID DOT ID .)
    IF              reduce using rule 68 (getAttribute -> ID DOT ID .)
    WHILE           reduce using rule 68 (getAttribute -> ID DOT ID .)
    $end            reduce using rule 68 (getAttribute -> ID DOT ID .)
    END             reduce using rule 68 (getAttribute -> ID DOT ID .)
    ELSE            reduce using rule 68 (getAttribute -> ID DOT ID .)
    ELSIF           reduce using rule 68 (getAttribute -> ID DOT ID .)


state 107

    (74) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 74 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 74 (operations -> operation arithmeticOperator operations .)


state 108

    (69) operationValue -> ID .
    (68) getAttribute -> ID . DOT ID

    PLUS            reduce using rule 69 (operationValue -> ID .)
    MINUS           reduce using rule 69 (operationValue -> ID .)
    POWER           reduce using rule 69 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 69 (operationValue -> ID .)
    DIVISION        reduce using rule 69 (operationValue -> ID .)
    PRINT           reduce using rule 69 (operationValue -> ID .)
    ID              reduce using rule 69 (operationValue -> ID .)
    IF              reduce using rule 69 (operationValue -> ID .)
    WHILE           reduce using rule 69 (operationValue -> ID .)
    $end            reduce using rule 69 (operationValue -> ID .)
    END             reduce using rule 69 (operationValue -> ID .)
    ELSE            reduce using rule 69 (operationValue -> ID .)
    ELSIF           reduce using rule 69 (operationValue -> ID .)
    DOT             shift and go to state 76


state 109

    (70) operationValue -> number .

    PLUS            reduce using rule 70 (operationValue -> number .)
    MINUS           reduce using rule 70 (operationValue -> number .)
    POWER           reduce using rule 70 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 70 (operationValue -> number .)
    DIVISION        reduce using rule 70 (operationValue -> number .)
    PRINT           reduce using rule 70 (operationValue -> number .)
    ID              reduce using rule 70 (operationValue -> number .)
    IF              reduce using rule 70 (operationValue -> number .)
    WHILE           reduce using rule 70 (operationValue -> number .)
    $end            reduce using rule 70 (operationValue -> number .)
    END             reduce using rule 70 (operationValue -> number .)
    ELSE            reduce using rule 70 (operationValue -> number .)
    ELSIF           reduce using rule 70 (operationValue -> number .)


state 110

    (72) operation -> operationValue arithmeticOperator operationValue .

    PLUS            reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    MINUS           reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    POWER           reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    MULTIPLICATION  reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    DIVISION        reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 72 (operation -> operationValue arithmeticOperator operationValue .)


state 111

    (76) array -> OPENBRACKET element_list CLOSEDBRACKET .

    PRINT           reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 76 (array -> OPENBRACKET element_list CLOSEDBRACKET .)


state 112

    (78) element_list -> element_list COMMA . conditionValue
    (79) conditionValue -> . ID
    (80) conditionValue -> . number
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 27
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    conditionValue                 shift and go to state 126
    number                         shift and go to state 28

state 113

    (44) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 44 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 44 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 44 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 44 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 44 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 44 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 44 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 44 (creationStack -> STACK DOT NEW .)


state 114

    (48) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 48 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 115

    (52) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 52 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 52 (creationHashmap -> HASH DOT NEW .)


state 116

    (53) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 53 (creationHashmap -> LBRACE pairs RBRACE .)


state 117

    (57) pairs -> pair COMMA . pairs
    (56) pairs -> . pair
    (57) pairs -> . pair COMMA pairs
    (55) pair -> . STRING COLON value

    STRING          shift and go to state 94

    pair                           shift and go to state 93
    pairs                          shift and go to state 127

state 118

    (55) pair -> STRING COLON . value
    (58) value -> . ID
    (59) value -> . STRING
    (60) value -> . number
    (61) value -> . LBRACE pairs RBRACE
    (62) value -> . LBRACE RBRACE
    (89) number -> . FLOAT
    (90) number -> . INTEGER

    ID              shift and go to state 130
    STRING          shift and go to state 128
    LBRACE          shift and go to state 132
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30

    value                          shift and go to state 129
    number                         shift and go to state 131

state 119

    (41) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 41 (parameters -> ID COMMA parameters .)


state 120

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 121

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 133
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 122

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 134


state 123

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 124

    (9) elsif -> ELSIF condition . instructionBody
    (33) instructionBody -> . bodyLine
    (34) instructionBody -> . bodyLine instructionBody
    (27) bodyLine -> . assignmentRule
    (28) bodyLine -> . PRINT printBody
    (29) bodyLine -> . nestedConditional
    (30) bodyLine -> . nestedWhile
    (31) bodyLine -> . funcionCall
    (32) bodyLine -> . arrayConcat
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT ID array
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (42) funcionCall -> . ID LPAREN parameters RPAREN
    (43) funcionCall -> . ID LPAREN RPAREN
    (81) arrayConcat -> . ID ARRAYAPPEND ID
    (82) arrayConcat -> . ID ARRAYAPPEND number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 135
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    arrayConcat                    shift and go to state 15
    conditional                    shift and go to state 20
    whileLoop                      shift and go to state 22

state 125

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 136


state 126

    (78) element_list -> element_list COMMA conditionValue .

    CLOSEDBRACKET   reduce using rule 78 (element_list -> element_list COMMA conditionValue .)
    COMMA           reduce using rule 78 (element_list -> element_list COMMA conditionValue .)


state 127

    (57) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 57 (pairs -> pair COMMA pairs .)


state 128

    (59) value -> STRING .

    COMMA           reduce using rule 59 (value -> STRING .)
    RBRACE          reduce using rule 59 (value -> STRING .)


state 129

    (55) pair -> STRING COLON value .

    COMMA           reduce using rule 55 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 55 (pair -> STRING COLON value .)


state 130

    (58) value -> ID .

    COMMA           reduce using rule 58 (value -> ID .)
    RBRACE          reduce using rule 58 (value -> ID .)


state 131

    (60) value -> number .

    COMMA           reduce using rule 60 (value -> number .)
    RBRACE          reduce using rule 60 (value -> number .)


state 132

    (61) value -> LBRACE . pairs RBRACE
    (62) value -> LBRACE . RBRACE
    (56) pairs -> . pair
    (57) pairs -> . pair COMMA pairs
    (55) pair -> . STRING COLON value

    RBRACE          shift and go to state 138
    STRING          shift and go to state 94

    pairs                          shift and go to state 137
    pair                           shift and go to state 93

state 133

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 139


state 134

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 135

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 136

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 137

    (61) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 140


state 138

    (62) value -> LBRACE RBRACE .

    COMMA           reduce using rule 62 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 62 (value -> LBRACE RBRACE .)


state 139

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 140

    (61) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 61 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 61 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 20 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 22 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
WARNING: reduce/reduce conflict in state 41 resolved using rule (assignmentRule -> ID ASSIGNMENT ID)
WARNING: rejected rule (operationValue -> ID) in state 41
WARNING: reduce/reduce conflict in state 42 resolved using rule (assignmentRule -> ID ASSIGNMENT number)
WARNING: rejected rule (operationValue -> number) in state 42
