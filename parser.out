Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    DOT
    FOR
    GETS
    IN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    bodyLine -> ID ASSIGNMENT number
Rule 19    bodyLine -> ID ASSIGNMENT STRING
Rule 20    bodyLine -> PRINT printBody
Rule 21    bodyLine -> nestedConditional
Rule 22    bodyLine -> nestedWhile
Rule 23    instructionBody -> bodyLine
Rule 24    instructionBody -> bodyLine instructionBody
Rule 25    printBody -> ID
Rule 26    printBody -> TRUE
Rule 27    printBody -> FALSE
Rule 28    printBody -> dataType
Rule 29    printBody -> condition
Rule 30    parameters -> ID
Rule 31    parameters -> ID COMMA ID
Rule 32    arithmaticOperator -> PLUS
Rule 33    arithmaticOperator -> MINUS
Rule 34    arithmaticOperator -> POWER
Rule 35    arithmaticOperator -> MULTIPLICATION
Rule 36    arithmaticOperator -> DIVISION
Rule 37    operations -> number arithmaticOperator number
Rule 38    conditionValue -> ID
Rule 39    conditionValue -> number
Rule 40    condition -> conditionValue comparator conditionValue
Rule 41    comparator -> GREATERTHAN
Rule 42    comparator -> LESSTHAN
Rule 43    comparator -> EQUALS
Rule 44    comparator -> GREATEROREQUALS
Rule 45    comparator -> LESSOREQUALS
Rule 46    number -> FLOAT
Rule 47    number -> INTEGER
Rule 48    dataType -> STRING
Rule 49    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 31
DEF                  : 2 3
DIVISION             : 36
DOT                  : 
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 43
FALSE                : 27
FLOAT                : 46
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 44
GREATERTHAN          : 41
ID                   : 2 3 18 19 25 30 31 31 38
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 47
LESSOREQUALS         : 45
LESSTHAN             : 42
LPAREN               : 2 3
MINUS                : 33
MULTIPLICATION       : 35
OPENBRACKET          : 
PLUS                 : 32
POWER                : 34
PRINT                : 20
PUTS                 : 
RPAREN               : 2 3
STRING               : 19 48
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 26
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmaticOperator   : 37
bodyLine             : 23 24
comparator           : 40
condition            : 5 6 7 8 9 15 29
conditionValue       : 40 40
conditional          : 4 10 11
conditionalElsif     : 6 8 13
dataType             : 28
elsif                : 12 13
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 24
nestedConditional    : 11 21
nestedWhile          : 17 22
number               : 18 37 37 39 49
operations           : 
parameters           : 2
printBody            : 20
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    ID              shift and go to state 4
    PRINT           shift and go to state 10

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 13


state 4

    (18) bodyLine -> ID . ASSIGNMENT number
    (19) bodyLine -> ID . ASSIGNMENT STRING

    ASSIGNMENT      shift and go to state 14


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 15
    nestedConditional              shift and go to state 16

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 17
    nestedWhile                    shift and go to state 18

state 7

    (23) instructionBody -> bodyLine .
    (24) instructionBody -> bodyLine . instructionBody
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 23 (instructionBody -> bodyLine .)
    END             reduce using rule 23 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 23 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 23 (instructionBody -> bodyLine .)
    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 19
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (40) condition -> . conditionValue comparator conditionValue
    (38) conditionValue -> . ID
    (39) conditionValue -> . number
    (46) number -> . FLOAT
    (47) number -> . INTEGER

    ID              shift and go to state 22
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 25

    condition                      shift and go to state 20
    conditionValue                 shift and go to state 21
    number                         shift and go to state 23

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (40) condition -> . conditionValue comparator conditionValue
    (38) conditionValue -> . ID
    (39) conditionValue -> . number
    (46) number -> . FLOAT
    (47) number -> . INTEGER

    ID              shift and go to state 22
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 25

    condition                      shift and go to state 26
    conditionValue                 shift and go to state 21
    number                         shift and go to state 23

state 10

    (20) bodyLine -> PRINT . printBody
    (25) printBody -> . ID
    (26) printBody -> . TRUE
    (27) printBody -> . FALSE
    (28) printBody -> . dataType
    (29) printBody -> . condition
    (48) dataType -> . STRING
    (49) dataType -> . number
    (40) condition -> . conditionValue comparator conditionValue
    (46) number -> . FLOAT
    (47) number -> . INTEGER
    (38) conditionValue -> . ID
    (39) conditionValue -> . number

    ID              shift and go to state 28
    TRUE            shift and go to state 29
    FALSE           shift and go to state 30
    STRING          shift and go to state 33
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 25

    printBody                      shift and go to state 27
    dataType                       shift and go to state 31
    condition                      shift and go to state 32
    number                         shift and go to state 34
    conditionValue                 shift and go to state 21

state 11

    (21) bodyLine -> nestedConditional .

    ID              reduce using rule 21 (bodyLine -> nestedConditional .)
    PRINT           reduce using rule 21 (bodyLine -> nestedConditional .)
    IF              reduce using rule 21 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 21 (bodyLine -> nestedConditional .)
    $end            reduce using rule 21 (bodyLine -> nestedConditional .)
    END             reduce using rule 21 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 21 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 21 (bodyLine -> nestedConditional .)


state 12

    (22) bodyLine -> nestedWhile .

    ID              reduce using rule 22 (bodyLine -> nestedWhile .)
    PRINT           reduce using rule 22 (bodyLine -> nestedWhile .)
    IF              reduce using rule 22 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 22 (bodyLine -> nestedWhile .)
    $end            reduce using rule 22 (bodyLine -> nestedWhile .)
    END             reduce using rule 22 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 22 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 22 (bodyLine -> nestedWhile .)


state 13

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 35


state 14

    (18) bodyLine -> ID ASSIGNMENT . number
    (19) bodyLine -> ID ASSIGNMENT . STRING
    (46) number -> . FLOAT
    (47) number -> . INTEGER

    STRING          shift and go to state 37
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 25

    number                         shift and go to state 36

state 15

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 15
    nestedConditional              shift and go to state 16

state 16

    (11) nestedConditional -> conditional nestedConditional .

    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 17

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 17
    nestedWhile                    shift and go to state 18

state 18

    (17) nestedWhile -> whileLoop nestedWhile .

    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 19

    (24) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 24 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 24 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 24 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 24 (instructionBody -> bodyLine instructionBody .)


state 20

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 38
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 21

    (40) condition -> conditionValue . comparator conditionValue
    (41) comparator -> . GREATERTHAN
    (42) comparator -> . LESSTHAN
    (43) comparator -> . EQUALS
    (44) comparator -> . GREATEROREQUALS
    (45) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 40
    LESSTHAN        shift and go to state 41
    EQUALS          shift and go to state 42
    GREATEROREQUALS shift and go to state 43
    LESSOREQUALS    shift and go to state 44

    comparator                     shift and go to state 39

state 22

    (38) conditionValue -> ID .

    GREATERTHAN     reduce using rule 38 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 38 (conditionValue -> ID .)
    EQUALS          reduce using rule 38 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 38 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 38 (conditionValue -> ID .)
    ID              reduce using rule 38 (conditionValue -> ID .)
    PRINT           reduce using rule 38 (conditionValue -> ID .)
    IF              reduce using rule 38 (conditionValue -> ID .)
    WHILE           reduce using rule 38 (conditionValue -> ID .)
    $end            reduce using rule 38 (conditionValue -> ID .)
    END             reduce using rule 38 (conditionValue -> ID .)
    ELSE            reduce using rule 38 (conditionValue -> ID .)
    ELSIF           reduce using rule 38 (conditionValue -> ID .)


state 23

    (39) conditionValue -> number .

    GREATERTHAN     reduce using rule 39 (conditionValue -> number .)
    LESSTHAN        reduce using rule 39 (conditionValue -> number .)
    EQUALS          reduce using rule 39 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 39 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 39 (conditionValue -> number .)
    ID              reduce using rule 39 (conditionValue -> number .)
    PRINT           reduce using rule 39 (conditionValue -> number .)
    IF              reduce using rule 39 (conditionValue -> number .)
    WHILE           reduce using rule 39 (conditionValue -> number .)
    $end            reduce using rule 39 (conditionValue -> number .)
    END             reduce using rule 39 (conditionValue -> number .)
    ELSE            reduce using rule 39 (conditionValue -> number .)
    ELSIF           reduce using rule 39 (conditionValue -> number .)


state 24

    (46) number -> FLOAT .

    GREATERTHAN     reduce using rule 46 (number -> FLOAT .)
    LESSTHAN        reduce using rule 46 (number -> FLOAT .)
    EQUALS          reduce using rule 46 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 46 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 46 (number -> FLOAT .)
    ID              reduce using rule 46 (number -> FLOAT .)
    PRINT           reduce using rule 46 (number -> FLOAT .)
    IF              reduce using rule 46 (number -> FLOAT .)
    WHILE           reduce using rule 46 (number -> FLOAT .)
    $end            reduce using rule 46 (number -> FLOAT .)
    END             reduce using rule 46 (number -> FLOAT .)
    ELSE            reduce using rule 46 (number -> FLOAT .)
    ELSIF           reduce using rule 46 (number -> FLOAT .)


state 25

    (47) number -> INTEGER .

    GREATERTHAN     reduce using rule 47 (number -> INTEGER .)
    LESSTHAN        reduce using rule 47 (number -> INTEGER .)
    EQUALS          reduce using rule 47 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 47 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 47 (number -> INTEGER .)
    ID              reduce using rule 47 (number -> INTEGER .)
    PRINT           reduce using rule 47 (number -> INTEGER .)
    IF              reduce using rule 47 (number -> INTEGER .)
    WHILE           reduce using rule 47 (number -> INTEGER .)
    $end            reduce using rule 47 (number -> INTEGER .)
    END             reduce using rule 47 (number -> INTEGER .)
    ELSE            reduce using rule 47 (number -> INTEGER .)
    ELSIF           reduce using rule 47 (number -> INTEGER .)


state 26

    (15) whileLoop -> WHILE condition . instructionBody END
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 45
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 27

    (20) bodyLine -> PRINT printBody .

    ID              reduce using rule 20 (bodyLine -> PRINT printBody .)
    PRINT           reduce using rule 20 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 20 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 20 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 20 (bodyLine -> PRINT printBody .)
    END             reduce using rule 20 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 20 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 20 (bodyLine -> PRINT printBody .)


state 28

    (25) printBody -> ID .
    (38) conditionValue -> ID .

    ID              reduce using rule 25 (printBody -> ID .)
    PRINT           reduce using rule 25 (printBody -> ID .)
    IF              reduce using rule 25 (printBody -> ID .)
    WHILE           reduce using rule 25 (printBody -> ID .)
    $end            reduce using rule 25 (printBody -> ID .)
    END             reduce using rule 25 (printBody -> ID .)
    ELSE            reduce using rule 25 (printBody -> ID .)
    ELSIF           reduce using rule 25 (printBody -> ID .)
    GREATERTHAN     reduce using rule 38 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 38 (conditionValue -> ID .)
    EQUALS          reduce using rule 38 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 38 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 38 (conditionValue -> ID .)


state 29

    (26) printBody -> TRUE .

    ID              reduce using rule 26 (printBody -> TRUE .)
    PRINT           reduce using rule 26 (printBody -> TRUE .)
    IF              reduce using rule 26 (printBody -> TRUE .)
    WHILE           reduce using rule 26 (printBody -> TRUE .)
    $end            reduce using rule 26 (printBody -> TRUE .)
    END             reduce using rule 26 (printBody -> TRUE .)
    ELSE            reduce using rule 26 (printBody -> TRUE .)
    ELSIF           reduce using rule 26 (printBody -> TRUE .)


state 30

    (27) printBody -> FALSE .

    ID              reduce using rule 27 (printBody -> FALSE .)
    PRINT           reduce using rule 27 (printBody -> FALSE .)
    IF              reduce using rule 27 (printBody -> FALSE .)
    WHILE           reduce using rule 27 (printBody -> FALSE .)
    $end            reduce using rule 27 (printBody -> FALSE .)
    END             reduce using rule 27 (printBody -> FALSE .)
    ELSE            reduce using rule 27 (printBody -> FALSE .)
    ELSIF           reduce using rule 27 (printBody -> FALSE .)


state 31

    (28) printBody -> dataType .

    ID              reduce using rule 28 (printBody -> dataType .)
    PRINT           reduce using rule 28 (printBody -> dataType .)
    IF              reduce using rule 28 (printBody -> dataType .)
    WHILE           reduce using rule 28 (printBody -> dataType .)
    $end            reduce using rule 28 (printBody -> dataType .)
    END             reduce using rule 28 (printBody -> dataType .)
    ELSE            reduce using rule 28 (printBody -> dataType .)
    ELSIF           reduce using rule 28 (printBody -> dataType .)


state 32

    (29) printBody -> condition .

    ID              reduce using rule 29 (printBody -> condition .)
    PRINT           reduce using rule 29 (printBody -> condition .)
    IF              reduce using rule 29 (printBody -> condition .)
    WHILE           reduce using rule 29 (printBody -> condition .)
    $end            reduce using rule 29 (printBody -> condition .)
    END             reduce using rule 29 (printBody -> condition .)
    ELSE            reduce using rule 29 (printBody -> condition .)
    ELSIF           reduce using rule 29 (printBody -> condition .)


state 33

    (48) dataType -> STRING .

    ID              reduce using rule 48 (dataType -> STRING .)
    PRINT           reduce using rule 48 (dataType -> STRING .)
    IF              reduce using rule 48 (dataType -> STRING .)
    WHILE           reduce using rule 48 (dataType -> STRING .)
    $end            reduce using rule 48 (dataType -> STRING .)
    END             reduce using rule 48 (dataType -> STRING .)
    ELSE            reduce using rule 48 (dataType -> STRING .)
    ELSIF           reduce using rule 48 (dataType -> STRING .)


state 34

    (49) dataType -> number .
    (39) conditionValue -> number .

    ID              reduce using rule 49 (dataType -> number .)
    PRINT           reduce using rule 49 (dataType -> number .)
    IF              reduce using rule 49 (dataType -> number .)
    WHILE           reduce using rule 49 (dataType -> number .)
    $end            reduce using rule 49 (dataType -> number .)
    END             reduce using rule 49 (dataType -> number .)
    ELSE            reduce using rule 49 (dataType -> number .)
    ELSIF           reduce using rule 49 (dataType -> number .)
    GREATERTHAN     reduce using rule 39 (conditionValue -> number .)
    LESSTHAN        reduce using rule 39 (conditionValue -> number .)
    EQUALS          reduce using rule 39 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 39 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 39 (conditionValue -> number .)


state 35

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (30) parameters -> . ID
    (31) parameters -> . ID COMMA ID

    RPAREN          shift and go to state 48
    ID              shift and go to state 46

    parameters                     shift and go to state 47

state 36

    (18) bodyLine -> ID ASSIGNMENT number .

    ID              reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    PRINT           reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (bodyLine -> ID ASSIGNMENT number .)


state 37

    (19) bodyLine -> ID ASSIGNMENT STRING .

    ID              reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    PRINT           reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    IF              reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    WHILE           reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    $end            reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    END             reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    ELSE            reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)
    ELSIF           reduce using rule 19 (bodyLine -> ID ASSIGNMENT STRING .)


state 38

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 49
    ELSE            shift and go to state 51
    ELSIF           shift and go to state 53

    conditionalElsif               shift and go to state 50
    elsif                          shift and go to state 52

state 39

    (40) condition -> conditionValue comparator . conditionValue
    (38) conditionValue -> . ID
    (39) conditionValue -> . number
    (46) number -> . FLOAT
    (47) number -> . INTEGER

    ID              shift and go to state 22
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 25

    conditionValue                 shift and go to state 54
    number                         shift and go to state 23

state 40

    (41) comparator -> GREATERTHAN .

    ID              reduce using rule 41 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 41 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 41 (comparator -> GREATERTHAN .)


state 41

    (42) comparator -> LESSTHAN .

    ID              reduce using rule 42 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 42 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 42 (comparator -> LESSTHAN .)


state 42

    (43) comparator -> EQUALS .

    ID              reduce using rule 43 (comparator -> EQUALS .)
    FLOAT           reduce using rule 43 (comparator -> EQUALS .)
    INTEGER         reduce using rule 43 (comparator -> EQUALS .)


state 43

    (44) comparator -> GREATEROREQUALS .

    ID              reduce using rule 44 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 44 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 44 (comparator -> GREATEROREQUALS .)


state 44

    (45) comparator -> LESSOREQUALS .

    ID              reduce using rule 45 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 45 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 45 (comparator -> LESSOREQUALS .)


state 45

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 55


state 46

    (30) parameters -> ID .
    (31) parameters -> ID . COMMA ID

    RPAREN          reduce using rule 30 (parameters -> ID .)
    COMMA           shift and go to state 56


state 47

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 57


state 48

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 58


state 49

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 50

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 59
    ELSE            shift and go to state 60


state 51

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 61
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 52

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 53

    elsif                          shift and go to state 52
    conditionalElsif               shift and go to state 62

state 53

    (9) elsif -> ELSIF . condition instructionBody
    (40) condition -> . conditionValue comparator conditionValue
    (38) conditionValue -> . ID
    (39) conditionValue -> . number
    (46) number -> . FLOAT
    (47) number -> . INTEGER

    ID              shift and go to state 22
    FLOAT           shift and go to state 24
    INTEGER         shift and go to state 25

    condition                      shift and go to state 63
    conditionValue                 shift and go to state 21
    number                         shift and go to state 23

state 54

    (40) condition -> conditionValue comparator conditionValue .

    ID              reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    PRINT           reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 40 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 40 (condition -> conditionValue comparator conditionValue .)


state 55

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 56

    (31) parameters -> ID COMMA . ID

    ID              shift and go to state 64


state 57

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 65
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 58

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 59

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 60

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 66
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 61

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 67


state 62

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 63

    (9) elsif -> ELSIF condition . instructionBody
    (23) instructionBody -> . bodyLine
    (24) instructionBody -> . bodyLine instructionBody
    (18) bodyLine -> . ID ASSIGNMENT number
    (19) bodyLine -> . ID ASSIGNMENT STRING
    (20) bodyLine -> . PRINT printBody
    (21) bodyLine -> . nestedConditional
    (22) bodyLine -> . nestedWhile
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 10
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 68
    bodyLine                       shift and go to state 7
    nestedConditional              shift and go to state 11
    nestedWhile                    shift and go to state 12
    conditional                    shift and go to state 15
    whileLoop                      shift and go to state 17

state 64

    (31) parameters -> ID COMMA ID .

    RPAREN          reduce using rule 31 (parameters -> ID COMMA ID .)


state 65

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 69


state 66

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 70


state 67

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 68

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 69

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 70

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 15 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 17 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
