Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    FOR
    GETS
    IN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    bodyLine -> assignmentRule
Rule 25    bodyLine -> PRINT printBody
Rule 26    bodyLine -> nestedConditional
Rule 27    bodyLine -> nestedWhile
Rule 28    bodyLine -> funcionCall
Rule 29    instructionBody -> bodyLine
Rule 30    instructionBody -> bodyLine instructionBody
Rule 31    printBody -> ID
Rule 32    printBody -> TRUE
Rule 33    printBody -> FALSE
Rule 34    printBody -> dataType
Rule 35    printBody -> condition
Rule 36    parameters -> ID
Rule 37    parameters -> ID COMMA parameters
Rule 38    funcionCall -> ID LPAREN parameters RPAREN
Rule 39    creationStack -> STACK DOT NEW
Rule 40    creationTDA -> creationStack
Rule 41    arithmeticOperator -> PLUS
Rule 42    arithmeticOperator -> MINUS
Rule 43    arithmeticOperator -> POWER
Rule 44    arithmeticOperator -> MULTIPLICATION
Rule 45    arithmeticOperator -> DIVISION
Rule 46    operations -> number arithmeticOperator number
Rule 47    conditionValue -> ID
Rule 48    conditionValue -> number
Rule 49    condition -> conditionValue comparator conditionValue
Rule 50    comparator -> GREATERTHAN
Rule 51    comparator -> LESSTHAN
Rule 52    comparator -> EQUALS
Rule 53    comparator -> GREATEROREQUALS
Rule 54    comparator -> LESSOREQUALS
Rule 55    number -> FLOAT
Rule 56    number -> INTEGER
Rule 57    dataType -> STRING
Rule 58    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22 23
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 37
DEF                  : 2 3
DIVISION             : 45
DOT                  : 39
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 52
FALSE                : 22 33
FLOAT                : 55
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 53
GREATERTHAN          : 50
ID                   : 2 3 18 19 19 20 21 22 23 31 36 37 38 47
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 56
LESSOREQUALS         : 54
LESSTHAN             : 51
LPAREN               : 2 3 38
MINUS                : 42
MULTIPLICATION       : 44
NEW                  : 39
OPENBRACKET          : 
PLUS                 : 41
POWER                : 43
PRINT                : 25
PUTS                 : 
RPAREN               : 2 3 38
STACK                : 39
STRING               : 57
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 32
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmeticOperator   : 46
assignmentRule       : 24
bodyLine             : 29 30
comparator           : 49
condition            : 5 6 7 8 9 15 20 35
conditionValue       : 49 49
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationStack        : 40
creationTDA          : 23
dataType             : 34
elsif                : 12 13
funcionCall          : 28
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 30
nestedConditional    : 11 26
nestedWhile          : 17 27
number               : 18 46 46 48 58
operations           : 
parameters           : 2 37 38
printBody            : 25
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 15


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (38) funcionCall -> ID . LPAREN parameters RPAREN

    ASSIGNMENT      shift and go to state 16
    LPAREN          shift and go to state 17


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 7

    (29) instructionBody -> bodyLine .
    (30) instructionBody -> bodyLine . instructionBody
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 29 (instructionBody -> bodyLine .)
    END             reduce using rule 29 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 29 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 29 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 22
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (49) condition -> . conditionValue comparator conditionValue
    (47) conditionValue -> . ID
    (48) conditionValue -> . number
    (55) number -> . FLOAT
    (56) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 23
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (49) condition -> . conditionValue comparator conditionValue
    (47) conditionValue -> . ID
    (48) conditionValue -> . number
    (55) number -> . FLOAT
    (56) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 29
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 10

    (24) bodyLine -> assignmentRule .

    PRINT           reduce using rule 24 (bodyLine -> assignmentRule .)
    ID              reduce using rule 24 (bodyLine -> assignmentRule .)
    IF              reduce using rule 24 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 24 (bodyLine -> assignmentRule .)
    $end            reduce using rule 24 (bodyLine -> assignmentRule .)
    END             reduce using rule 24 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 24 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 24 (bodyLine -> assignmentRule .)


state 11

    (25) bodyLine -> PRINT . printBody
    (31) printBody -> . ID
    (32) printBody -> . TRUE
    (33) printBody -> . FALSE
    (34) printBody -> . dataType
    (35) printBody -> . condition
    (57) dataType -> . STRING
    (58) dataType -> . number
    (49) condition -> . conditionValue comparator conditionValue
    (55) number -> . FLOAT
    (56) number -> . INTEGER
    (47) conditionValue -> . ID
    (48) conditionValue -> . number

    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    STRING          shift and go to state 36
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    printBody                      shift and go to state 30
    dataType                       shift and go to state 34
    condition                      shift and go to state 35
    number                         shift and go to state 37
    conditionValue                 shift and go to state 24

state 12

    (26) bodyLine -> nestedConditional .

    PRINT           reduce using rule 26 (bodyLine -> nestedConditional .)
    ID              reduce using rule 26 (bodyLine -> nestedConditional .)
    IF              reduce using rule 26 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 26 (bodyLine -> nestedConditional .)
    $end            reduce using rule 26 (bodyLine -> nestedConditional .)
    END             reduce using rule 26 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 26 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 26 (bodyLine -> nestedConditional .)


state 13

    (27) bodyLine -> nestedWhile .

    PRINT           reduce using rule 27 (bodyLine -> nestedWhile .)
    ID              reduce using rule 27 (bodyLine -> nestedWhile .)
    IF              reduce using rule 27 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 27 (bodyLine -> nestedWhile .)
    $end            reduce using rule 27 (bodyLine -> nestedWhile .)
    END             reduce using rule 27 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 27 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 27 (bodyLine -> nestedWhile .)


state 14

    (28) bodyLine -> funcionCall .

    PRINT           reduce using rule 28 (bodyLine -> funcionCall .)
    ID              reduce using rule 28 (bodyLine -> funcionCall .)
    IF              reduce using rule 28 (bodyLine -> funcionCall .)
    WHILE           reduce using rule 28 (bodyLine -> funcionCall .)
    $end            reduce using rule 28 (bodyLine -> funcionCall .)
    END             reduce using rule 28 (bodyLine -> funcionCall .)
    ELSE            reduce using rule 28 (bodyLine -> funcionCall .)
    ELSIF           reduce using rule 28 (bodyLine -> funcionCall .)


state 15

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 38


state 16

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (55) number -> . FLOAT
    (56) number -> . INTEGER
    (49) condition -> . conditionValue comparator conditionValue
    (40) creationTDA -> . creationStack
    (47) conditionValue -> . ID
    (48) conditionValue -> . number
    (39) creationStack -> . STACK DOT NEW

    ID              shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    STACK           shift and go to state 46

    number                         shift and go to state 40
    condition                      shift and go to state 41
    creationTDA                    shift and go to state 44
    conditionValue                 shift and go to state 24
    creationStack                  shift and go to state 45

state 17

    (38) funcionCall -> ID LPAREN . parameters RPAREN
    (36) parameters -> . ID
    (37) parameters -> . ID COMMA parameters

    ID              shift and go to state 47

    parameters                     shift and go to state 48

state 18

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 19

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 20

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 21

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 22

    (30) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 30 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 30 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 30 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 30 (instructionBody -> bodyLine instructionBody .)


state 23

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 49
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 24

    (49) condition -> conditionValue . comparator conditionValue
    (50) comparator -> . GREATERTHAN
    (51) comparator -> . LESSTHAN
    (52) comparator -> . EQUALS
    (53) comparator -> . GREATEROREQUALS
    (54) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 51
    LESSTHAN        shift and go to state 52
    EQUALS          shift and go to state 53
    GREATEROREQUALS shift and go to state 54
    LESSOREQUALS    shift and go to state 55

    comparator                     shift and go to state 50

state 25

    (47) conditionValue -> ID .

    GREATERTHAN     reduce using rule 47 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 47 (conditionValue -> ID .)
    EQUALS          reduce using rule 47 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 47 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 47 (conditionValue -> ID .)
    PRINT           reduce using rule 47 (conditionValue -> ID .)
    ID              reduce using rule 47 (conditionValue -> ID .)
    IF              reduce using rule 47 (conditionValue -> ID .)
    WHILE           reduce using rule 47 (conditionValue -> ID .)
    $end            reduce using rule 47 (conditionValue -> ID .)
    END             reduce using rule 47 (conditionValue -> ID .)
    ELSE            reduce using rule 47 (conditionValue -> ID .)
    ELSIF           reduce using rule 47 (conditionValue -> ID .)


state 26

    (48) conditionValue -> number .

    GREATERTHAN     reduce using rule 48 (conditionValue -> number .)
    LESSTHAN        reduce using rule 48 (conditionValue -> number .)
    EQUALS          reduce using rule 48 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 48 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 48 (conditionValue -> number .)
    PRINT           reduce using rule 48 (conditionValue -> number .)
    ID              reduce using rule 48 (conditionValue -> number .)
    IF              reduce using rule 48 (conditionValue -> number .)
    WHILE           reduce using rule 48 (conditionValue -> number .)
    $end            reduce using rule 48 (conditionValue -> number .)
    END             reduce using rule 48 (conditionValue -> number .)
    ELSE            reduce using rule 48 (conditionValue -> number .)
    ELSIF           reduce using rule 48 (conditionValue -> number .)


state 27

    (55) number -> FLOAT .

    GREATERTHAN     reduce using rule 55 (number -> FLOAT .)
    LESSTHAN        reduce using rule 55 (number -> FLOAT .)
    EQUALS          reduce using rule 55 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 55 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 55 (number -> FLOAT .)
    PRINT           reduce using rule 55 (number -> FLOAT .)
    ID              reduce using rule 55 (number -> FLOAT .)
    IF              reduce using rule 55 (number -> FLOAT .)
    WHILE           reduce using rule 55 (number -> FLOAT .)
    $end            reduce using rule 55 (number -> FLOAT .)
    END             reduce using rule 55 (number -> FLOAT .)
    ELSE            reduce using rule 55 (number -> FLOAT .)
    ELSIF           reduce using rule 55 (number -> FLOAT .)


state 28

    (56) number -> INTEGER .

    GREATERTHAN     reduce using rule 56 (number -> INTEGER .)
    LESSTHAN        reduce using rule 56 (number -> INTEGER .)
    EQUALS          reduce using rule 56 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 56 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 56 (number -> INTEGER .)
    PRINT           reduce using rule 56 (number -> INTEGER .)
    ID              reduce using rule 56 (number -> INTEGER .)
    IF              reduce using rule 56 (number -> INTEGER .)
    WHILE           reduce using rule 56 (number -> INTEGER .)
    $end            reduce using rule 56 (number -> INTEGER .)
    END             reduce using rule 56 (number -> INTEGER .)
    ELSE            reduce using rule 56 (number -> INTEGER .)
    ELSIF           reduce using rule 56 (number -> INTEGER .)


state 29

    (15) whileLoop -> WHILE condition . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 56
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 30

    (25) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 25 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 25 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 25 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 25 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 25 (bodyLine -> PRINT printBody .)
    END             reduce using rule 25 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 25 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 25 (bodyLine -> PRINT printBody .)


state 31

    (31) printBody -> ID .
    (47) conditionValue -> ID .

    PRINT           reduce using rule 31 (printBody -> ID .)
    ID              reduce using rule 31 (printBody -> ID .)
    IF              reduce using rule 31 (printBody -> ID .)
    WHILE           reduce using rule 31 (printBody -> ID .)
    $end            reduce using rule 31 (printBody -> ID .)
    END             reduce using rule 31 (printBody -> ID .)
    ELSE            reduce using rule 31 (printBody -> ID .)
    ELSIF           reduce using rule 31 (printBody -> ID .)
    GREATERTHAN     reduce using rule 47 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 47 (conditionValue -> ID .)
    EQUALS          reduce using rule 47 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 47 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 47 (conditionValue -> ID .)


state 32

    (32) printBody -> TRUE .

    PRINT           reduce using rule 32 (printBody -> TRUE .)
    ID              reduce using rule 32 (printBody -> TRUE .)
    IF              reduce using rule 32 (printBody -> TRUE .)
    WHILE           reduce using rule 32 (printBody -> TRUE .)
    $end            reduce using rule 32 (printBody -> TRUE .)
    END             reduce using rule 32 (printBody -> TRUE .)
    ELSE            reduce using rule 32 (printBody -> TRUE .)
    ELSIF           reduce using rule 32 (printBody -> TRUE .)


state 33

    (33) printBody -> FALSE .

    PRINT           reduce using rule 33 (printBody -> FALSE .)
    ID              reduce using rule 33 (printBody -> FALSE .)
    IF              reduce using rule 33 (printBody -> FALSE .)
    WHILE           reduce using rule 33 (printBody -> FALSE .)
    $end            reduce using rule 33 (printBody -> FALSE .)
    END             reduce using rule 33 (printBody -> FALSE .)
    ELSE            reduce using rule 33 (printBody -> FALSE .)
    ELSIF           reduce using rule 33 (printBody -> FALSE .)


state 34

    (34) printBody -> dataType .

    PRINT           reduce using rule 34 (printBody -> dataType .)
    ID              reduce using rule 34 (printBody -> dataType .)
    IF              reduce using rule 34 (printBody -> dataType .)
    WHILE           reduce using rule 34 (printBody -> dataType .)
    $end            reduce using rule 34 (printBody -> dataType .)
    END             reduce using rule 34 (printBody -> dataType .)
    ELSE            reduce using rule 34 (printBody -> dataType .)
    ELSIF           reduce using rule 34 (printBody -> dataType .)


state 35

    (35) printBody -> condition .

    PRINT           reduce using rule 35 (printBody -> condition .)
    ID              reduce using rule 35 (printBody -> condition .)
    IF              reduce using rule 35 (printBody -> condition .)
    WHILE           reduce using rule 35 (printBody -> condition .)
    $end            reduce using rule 35 (printBody -> condition .)
    END             reduce using rule 35 (printBody -> condition .)
    ELSE            reduce using rule 35 (printBody -> condition .)
    ELSIF           reduce using rule 35 (printBody -> condition .)


state 36

    (57) dataType -> STRING .

    PRINT           reduce using rule 57 (dataType -> STRING .)
    ID              reduce using rule 57 (dataType -> STRING .)
    IF              reduce using rule 57 (dataType -> STRING .)
    WHILE           reduce using rule 57 (dataType -> STRING .)
    $end            reduce using rule 57 (dataType -> STRING .)
    END             reduce using rule 57 (dataType -> STRING .)
    ELSE            reduce using rule 57 (dataType -> STRING .)
    ELSIF           reduce using rule 57 (dataType -> STRING .)


state 37

    (58) dataType -> number .
    (48) conditionValue -> number .

    PRINT           reduce using rule 58 (dataType -> number .)
    ID              reduce using rule 58 (dataType -> number .)
    IF              reduce using rule 58 (dataType -> number .)
    WHILE           reduce using rule 58 (dataType -> number .)
    $end            reduce using rule 58 (dataType -> number .)
    END             reduce using rule 58 (dataType -> number .)
    ELSE            reduce using rule 58 (dataType -> number .)
    ELSIF           reduce using rule 58 (dataType -> number .)
    GREATERTHAN     reduce using rule 48 (conditionValue -> number .)
    LESSTHAN        reduce using rule 48 (conditionValue -> number .)
    EQUALS          reduce using rule 48 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 48 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 48 (conditionValue -> number .)


state 38

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (36) parameters -> . ID
    (37) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 58
    ID              shift and go to state 47

    parameters                     shift and go to state 57

state 39

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (47) conditionValue -> ID .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    GREATERTHAN     reduce using rule 47 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 47 (conditionValue -> ID .)
    EQUALS          reduce using rule 47 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 47 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 47 (conditionValue -> ID .)


state 40

    (18) assignmentRule -> ID ASSIGNMENT number .
    (48) conditionValue -> number .

    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 48 (conditionValue -> number .)
    LESSTHAN        reduce using rule 48 (conditionValue -> number .)
    EQUALS          reduce using rule 48 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 48 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 48 (conditionValue -> number .)


state 41

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 42

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 43

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 44

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 45

    (40) creationTDA -> creationStack .

    PRINT           reduce using rule 40 (creationTDA -> creationStack .)
    ID              reduce using rule 40 (creationTDA -> creationStack .)
    IF              reduce using rule 40 (creationTDA -> creationStack .)
    WHILE           reduce using rule 40 (creationTDA -> creationStack .)
    $end            reduce using rule 40 (creationTDA -> creationStack .)
    END             reduce using rule 40 (creationTDA -> creationStack .)
    ELSE            reduce using rule 40 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 40 (creationTDA -> creationStack .)


state 46

    (39) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 59


state 47

    (36) parameters -> ID .
    (37) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 36 (parameters -> ID .)
    COMMA           shift and go to state 60


state 48

    (38) funcionCall -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 61


state 49

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 62
    ELSE            shift and go to state 64
    ELSIF           shift and go to state 66

    conditionalElsif               shift and go to state 63
    elsif                          shift and go to state 65

state 50

    (49) condition -> conditionValue comparator . conditionValue
    (47) conditionValue -> . ID
    (48) conditionValue -> . number
    (55) number -> . FLOAT
    (56) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    conditionValue                 shift and go to state 67
    number                         shift and go to state 26

state 51

    (50) comparator -> GREATERTHAN .

    ID              reduce using rule 50 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 50 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 50 (comparator -> GREATERTHAN .)


state 52

    (51) comparator -> LESSTHAN .

    ID              reduce using rule 51 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 51 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 51 (comparator -> LESSTHAN .)


state 53

    (52) comparator -> EQUALS .

    ID              reduce using rule 52 (comparator -> EQUALS .)
    FLOAT           reduce using rule 52 (comparator -> EQUALS .)
    INTEGER         reduce using rule 52 (comparator -> EQUALS .)


state 54

    (53) comparator -> GREATEROREQUALS .

    ID              reduce using rule 53 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 53 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 53 (comparator -> GREATEROREQUALS .)


state 55

    (54) comparator -> LESSOREQUALS .

    ID              reduce using rule 54 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 54 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 54 (comparator -> LESSOREQUALS .)


state 56

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 68


state 57

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 69


state 58

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 70


state 59

    (39) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 71


state 60

    (37) parameters -> ID COMMA . parameters
    (36) parameters -> . ID
    (37) parameters -> . ID COMMA parameters

    ID              shift and go to state 47

    parameters                     shift and go to state 72

state 61

    (38) funcionCall -> ID LPAREN parameters RPAREN .

    PRINT           reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    WHILE           reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    $end            reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    END             reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSE            reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSIF           reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)


state 62

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 63

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 73
    ELSE            shift and go to state 74


state 64

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 75
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 65

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 66

    elsif                          shift and go to state 65
    conditionalElsif               shift and go to state 76

state 66

    (9) elsif -> ELSIF . condition instructionBody
    (49) condition -> . conditionValue comparator conditionValue
    (47) conditionValue -> . ID
    (48) conditionValue -> . number
    (55) number -> . FLOAT
    (56) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 77
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 67

    (49) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 49 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 49 (condition -> conditionValue comparator conditionValue .)


state 68

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 69

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 78
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 70

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 71

    (39) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 39 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 39 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 39 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 39 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 39 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 39 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 39 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 39 (creationStack -> STACK DOT NEW .)


state 72

    (37) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 37 (parameters -> ID COMMA parameters .)


state 73

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 74

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 79
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 75

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 80


state 76

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 77

    (9) elsif -> ELSIF condition . instructionBody
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 81
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 78

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 82


state 79

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 83


state 80

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 81

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 82

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 83

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 18 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 20 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
