Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    FOR
    GETS
    IN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    bodyLine -> assignmentRule
Rule 25    bodyLine -> PRINT printBody
Rule 26    bodyLine -> nestedConditional
Rule 27    bodyLine -> nestedWhile
Rule 28    bodyLine -> funcionCall
Rule 29    instructionBody -> bodyLine
Rule 30    instructionBody -> bodyLine instructionBody
Rule 31    printBody -> ID
Rule 32    printBody -> TRUE
Rule 33    printBody -> FALSE
Rule 34    printBody -> dataType
Rule 35    printBody -> condition
Rule 36    parameters -> ID
Rule 37    parameters -> ID COMMA parameters
Rule 38    funcionCall -> ID LPAREN parameters RPAREN
Rule 39    creationStack -> STACK DOT NEW
Rule 40    creationNode -> NODE DOT NEW LPAREN RPAREN
Rule 41    creationNode -> NODE DOT NEW LPAREN ID RPAREN
Rule 42    creationLinkedList -> LINKEDLIST DOT NEW
Rule 43    creationTDA -> creationStack
Rule 44    creationTDA -> creationLinkedList
Rule 45    creationTDA -> creationHashmap
Rule 46    creationHashmap -> HASH DOT NEW
Rule 47    creationHashmap -> LBRACE pairs RBRACE
Rule 48    creationHashmap -> LBRACE RBRACE
Rule 49    pair -> STRING COLON value
Rule 50    pairs -> pair
Rule 51    pairs -> pair COMMA pairs
Rule 52    value -> ID
Rule 53    value -> STRING
Rule 54    value -> number
Rule 55    value -> LBRACE pairs RBRACE
Rule 56    arithmeticOperator -> PLUS
Rule 57    arithmeticOperator -> MINUS
Rule 58    arithmeticOperator -> POWER
Rule 59    arithmeticOperator -> MULTIPLICATION
Rule 60    arithmeticOperator -> DIVISION
Rule 61    operations -> number arithmeticOperator number
Rule 62    conditionValue -> ID
Rule 63    conditionValue -> number
Rule 64    condition -> conditionValue comparator conditionValue
Rule 65    comparator -> GREATERTHAN
Rule 66    comparator -> LESSTHAN
Rule 67    comparator -> EQUALS
Rule 68    comparator -> GREATEROREQUALS
Rule 69    comparator -> LESSOREQUALS
Rule 70    number -> FLOAT
Rule 71    number -> INTEGER
Rule 72    dataType -> STRING
Rule 73    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22 23
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COLON                : 49
COMMA                : 37 51
DEF                  : 2 3
DIVISION             : 60
DOT                  : 39 40 41 42 46
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 67
FALSE                : 22 33
FLOAT                : 70
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 68
GREATERTHAN          : 65
HASH                 : 46
ID                   : 2 3 18 19 19 20 21 22 23 31 36 37 38 41 52 62
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 71
LBRACE               : 47 48 55
LESSOREQUALS         : 69
LESSTHAN             : 66
LINKEDLIST           : 42
LPAREN               : 2 3 38 40 41
MINUS                : 57
MULTIPLICATION       : 59
NEW                  : 39 40 41 42 46
NODE                 : 40 41
OPENBRACKET          : 
PLUS                 : 56
POWER                : 58
PRINT                : 25
PUTS                 : 
RBRACE               : 47 48 55
RPAREN               : 2 3 38 40 41
STACK                : 39
STRING               : 49 53 72
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 32
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmeticOperator   : 61
assignmentRule       : 24
bodyLine             : 29 30
comparator           : 64
condition            : 5 6 7 8 9 15 20 35
conditionValue       : 64 64
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationHashmap      : 45
creationLinkedList   : 44
creationNode         : 
creationStack        : 43
creationTDA          : 23
dataType             : 34
elsif                : 12 13
funcionCall          : 28
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 30
nestedConditional    : 11 26
nestedWhile          : 17 27
number               : 18 54 61 61 63 73
operations           : 
pair                 : 50 51
pairs                : 47 51 55
parameters           : 2 37 38
printBody            : 25
value                : 49
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 15


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (38) funcionCall -> ID . LPAREN parameters RPAREN

    ASSIGNMENT      shift and go to state 16
    LPAREN          shift and go to state 17


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 7

    (29) instructionBody -> bodyLine .
    (30) instructionBody -> bodyLine . instructionBody
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 29 (instructionBody -> bodyLine .)
    END             reduce using rule 29 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 29 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 29 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 22
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (64) condition -> . conditionValue comparator conditionValue
    (62) conditionValue -> . ID
    (63) conditionValue -> . number
    (70) number -> . FLOAT
    (71) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 23
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (64) condition -> . conditionValue comparator conditionValue
    (62) conditionValue -> . ID
    (63) conditionValue -> . number
    (70) number -> . FLOAT
    (71) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 29
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 10

    (24) bodyLine -> assignmentRule .

    PRINT           reduce using rule 24 (bodyLine -> assignmentRule .)
    ID              reduce using rule 24 (bodyLine -> assignmentRule .)
    IF              reduce using rule 24 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 24 (bodyLine -> assignmentRule .)
    $end            reduce using rule 24 (bodyLine -> assignmentRule .)
    END             reduce using rule 24 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 24 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 24 (bodyLine -> assignmentRule .)


state 11

    (25) bodyLine -> PRINT . printBody
    (31) printBody -> . ID
    (32) printBody -> . TRUE
    (33) printBody -> . FALSE
    (34) printBody -> . dataType
    (35) printBody -> . condition
    (72) dataType -> . STRING
    (73) dataType -> . number
    (64) condition -> . conditionValue comparator conditionValue
    (70) number -> . FLOAT
    (71) number -> . INTEGER
    (62) conditionValue -> . ID
    (63) conditionValue -> . number

    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    STRING          shift and go to state 36
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    printBody                      shift and go to state 30
    dataType                       shift and go to state 34
    condition                      shift and go to state 35
    number                         shift and go to state 37
    conditionValue                 shift and go to state 24

state 12

    (26) bodyLine -> nestedConditional .

    PRINT           reduce using rule 26 (bodyLine -> nestedConditional .)
    ID              reduce using rule 26 (bodyLine -> nestedConditional .)
    IF              reduce using rule 26 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 26 (bodyLine -> nestedConditional .)
    $end            reduce using rule 26 (bodyLine -> nestedConditional .)
    END             reduce using rule 26 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 26 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 26 (bodyLine -> nestedConditional .)


state 13

    (27) bodyLine -> nestedWhile .

    PRINT           reduce using rule 27 (bodyLine -> nestedWhile .)
    ID              reduce using rule 27 (bodyLine -> nestedWhile .)
    IF              reduce using rule 27 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 27 (bodyLine -> nestedWhile .)
    $end            reduce using rule 27 (bodyLine -> nestedWhile .)
    END             reduce using rule 27 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 27 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 27 (bodyLine -> nestedWhile .)


state 14

    (28) bodyLine -> funcionCall .

    PRINT           reduce using rule 28 (bodyLine -> funcionCall .)
    ID              reduce using rule 28 (bodyLine -> funcionCall .)
    IF              reduce using rule 28 (bodyLine -> funcionCall .)
    WHILE           reduce using rule 28 (bodyLine -> funcionCall .)
    $end            reduce using rule 28 (bodyLine -> funcionCall .)
    END             reduce using rule 28 (bodyLine -> funcionCall .)
    ELSE            reduce using rule 28 (bodyLine -> funcionCall .)
    ELSIF           reduce using rule 28 (bodyLine -> funcionCall .)


state 15

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 38


state 16

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (70) number -> . FLOAT
    (71) number -> . INTEGER
    (64) condition -> . conditionValue comparator conditionValue
    (43) creationTDA -> . creationStack
    (44) creationTDA -> . creationLinkedList
    (45) creationTDA -> . creationHashmap
    (62) conditionValue -> . ID
    (63) conditionValue -> . number
    (39) creationStack -> . STACK DOT NEW
    (42) creationLinkedList -> . LINKEDLIST DOT NEW
    (46) creationHashmap -> . HASH DOT NEW
    (47) creationHashmap -> . LBRACE pairs RBRACE
    (48) creationHashmap -> . LBRACE RBRACE

    ID              shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    STACK           shift and go to state 48
    LINKEDLIST      shift and go to state 49
    HASH            shift and go to state 50
    LBRACE          shift and go to state 51

    number                         shift and go to state 40
    condition                      shift and go to state 41
    creationTDA                    shift and go to state 44
    conditionValue                 shift and go to state 24
    creationStack                  shift and go to state 45
    creationLinkedList             shift and go to state 46
    creationHashmap                shift and go to state 47

state 17

    (38) funcionCall -> ID LPAREN . parameters RPAREN
    (36) parameters -> . ID
    (37) parameters -> . ID COMMA parameters

    ID              shift and go to state 52

    parameters                     shift and go to state 53

state 18

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 19

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 20

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 21

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 22

    (30) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 30 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 30 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 30 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 30 (instructionBody -> bodyLine instructionBody .)


state 23

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 54
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 24

    (64) condition -> conditionValue . comparator conditionValue
    (65) comparator -> . GREATERTHAN
    (66) comparator -> . LESSTHAN
    (67) comparator -> . EQUALS
    (68) comparator -> . GREATEROREQUALS
    (69) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 56
    LESSTHAN        shift and go to state 57
    EQUALS          shift and go to state 58
    GREATEROREQUALS shift and go to state 59
    LESSOREQUALS    shift and go to state 60

    comparator                     shift and go to state 55

state 25

    (62) conditionValue -> ID .

    GREATERTHAN     reduce using rule 62 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 62 (conditionValue -> ID .)
    EQUALS          reduce using rule 62 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 62 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 62 (conditionValue -> ID .)
    PRINT           reduce using rule 62 (conditionValue -> ID .)
    ID              reduce using rule 62 (conditionValue -> ID .)
    IF              reduce using rule 62 (conditionValue -> ID .)
    WHILE           reduce using rule 62 (conditionValue -> ID .)
    $end            reduce using rule 62 (conditionValue -> ID .)
    END             reduce using rule 62 (conditionValue -> ID .)
    ELSE            reduce using rule 62 (conditionValue -> ID .)
    ELSIF           reduce using rule 62 (conditionValue -> ID .)


state 26

    (63) conditionValue -> number .

    GREATERTHAN     reduce using rule 63 (conditionValue -> number .)
    LESSTHAN        reduce using rule 63 (conditionValue -> number .)
    EQUALS          reduce using rule 63 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 63 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 63 (conditionValue -> number .)
    PRINT           reduce using rule 63 (conditionValue -> number .)
    ID              reduce using rule 63 (conditionValue -> number .)
    IF              reduce using rule 63 (conditionValue -> number .)
    WHILE           reduce using rule 63 (conditionValue -> number .)
    $end            reduce using rule 63 (conditionValue -> number .)
    END             reduce using rule 63 (conditionValue -> number .)
    ELSE            reduce using rule 63 (conditionValue -> number .)
    ELSIF           reduce using rule 63 (conditionValue -> number .)


state 27

    (70) number -> FLOAT .

    GREATERTHAN     reduce using rule 70 (number -> FLOAT .)
    LESSTHAN        reduce using rule 70 (number -> FLOAT .)
    EQUALS          reduce using rule 70 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 70 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 70 (number -> FLOAT .)
    PRINT           reduce using rule 70 (number -> FLOAT .)
    ID              reduce using rule 70 (number -> FLOAT .)
    IF              reduce using rule 70 (number -> FLOAT .)
    WHILE           reduce using rule 70 (number -> FLOAT .)
    $end            reduce using rule 70 (number -> FLOAT .)
    END             reduce using rule 70 (number -> FLOAT .)
    ELSE            reduce using rule 70 (number -> FLOAT .)
    ELSIF           reduce using rule 70 (number -> FLOAT .)
    COMMA           reduce using rule 70 (number -> FLOAT .)
    RBRACE          reduce using rule 70 (number -> FLOAT .)


state 28

    (71) number -> INTEGER .

    GREATERTHAN     reduce using rule 71 (number -> INTEGER .)
    LESSTHAN        reduce using rule 71 (number -> INTEGER .)
    EQUALS          reduce using rule 71 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 71 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 71 (number -> INTEGER .)
    PRINT           reduce using rule 71 (number -> INTEGER .)
    ID              reduce using rule 71 (number -> INTEGER .)
    IF              reduce using rule 71 (number -> INTEGER .)
    WHILE           reduce using rule 71 (number -> INTEGER .)
    $end            reduce using rule 71 (number -> INTEGER .)
    END             reduce using rule 71 (number -> INTEGER .)
    ELSE            reduce using rule 71 (number -> INTEGER .)
    ELSIF           reduce using rule 71 (number -> INTEGER .)
    COMMA           reduce using rule 71 (number -> INTEGER .)
    RBRACE          reduce using rule 71 (number -> INTEGER .)


state 29

    (15) whileLoop -> WHILE condition . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 61
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 30

    (25) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 25 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 25 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 25 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 25 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 25 (bodyLine -> PRINT printBody .)
    END             reduce using rule 25 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 25 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 25 (bodyLine -> PRINT printBody .)


state 31

    (31) printBody -> ID .
    (62) conditionValue -> ID .

    PRINT           reduce using rule 31 (printBody -> ID .)
    ID              reduce using rule 31 (printBody -> ID .)
    IF              reduce using rule 31 (printBody -> ID .)
    WHILE           reduce using rule 31 (printBody -> ID .)
    $end            reduce using rule 31 (printBody -> ID .)
    END             reduce using rule 31 (printBody -> ID .)
    ELSE            reduce using rule 31 (printBody -> ID .)
    ELSIF           reduce using rule 31 (printBody -> ID .)
    GREATERTHAN     reduce using rule 62 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 62 (conditionValue -> ID .)
    EQUALS          reduce using rule 62 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 62 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 62 (conditionValue -> ID .)


state 32

    (32) printBody -> TRUE .

    PRINT           reduce using rule 32 (printBody -> TRUE .)
    ID              reduce using rule 32 (printBody -> TRUE .)
    IF              reduce using rule 32 (printBody -> TRUE .)
    WHILE           reduce using rule 32 (printBody -> TRUE .)
    $end            reduce using rule 32 (printBody -> TRUE .)
    END             reduce using rule 32 (printBody -> TRUE .)
    ELSE            reduce using rule 32 (printBody -> TRUE .)
    ELSIF           reduce using rule 32 (printBody -> TRUE .)


state 33

    (33) printBody -> FALSE .

    PRINT           reduce using rule 33 (printBody -> FALSE .)
    ID              reduce using rule 33 (printBody -> FALSE .)
    IF              reduce using rule 33 (printBody -> FALSE .)
    WHILE           reduce using rule 33 (printBody -> FALSE .)
    $end            reduce using rule 33 (printBody -> FALSE .)
    END             reduce using rule 33 (printBody -> FALSE .)
    ELSE            reduce using rule 33 (printBody -> FALSE .)
    ELSIF           reduce using rule 33 (printBody -> FALSE .)


state 34

    (34) printBody -> dataType .

    PRINT           reduce using rule 34 (printBody -> dataType .)
    ID              reduce using rule 34 (printBody -> dataType .)
    IF              reduce using rule 34 (printBody -> dataType .)
    WHILE           reduce using rule 34 (printBody -> dataType .)
    $end            reduce using rule 34 (printBody -> dataType .)
    END             reduce using rule 34 (printBody -> dataType .)
    ELSE            reduce using rule 34 (printBody -> dataType .)
    ELSIF           reduce using rule 34 (printBody -> dataType .)


state 35

    (35) printBody -> condition .

    PRINT           reduce using rule 35 (printBody -> condition .)
    ID              reduce using rule 35 (printBody -> condition .)
    IF              reduce using rule 35 (printBody -> condition .)
    WHILE           reduce using rule 35 (printBody -> condition .)
    $end            reduce using rule 35 (printBody -> condition .)
    END             reduce using rule 35 (printBody -> condition .)
    ELSE            reduce using rule 35 (printBody -> condition .)
    ELSIF           reduce using rule 35 (printBody -> condition .)


state 36

    (72) dataType -> STRING .

    PRINT           reduce using rule 72 (dataType -> STRING .)
    ID              reduce using rule 72 (dataType -> STRING .)
    IF              reduce using rule 72 (dataType -> STRING .)
    WHILE           reduce using rule 72 (dataType -> STRING .)
    $end            reduce using rule 72 (dataType -> STRING .)
    END             reduce using rule 72 (dataType -> STRING .)
    ELSE            reduce using rule 72 (dataType -> STRING .)
    ELSIF           reduce using rule 72 (dataType -> STRING .)


state 37

    (73) dataType -> number .
    (63) conditionValue -> number .

    PRINT           reduce using rule 73 (dataType -> number .)
    ID              reduce using rule 73 (dataType -> number .)
    IF              reduce using rule 73 (dataType -> number .)
    WHILE           reduce using rule 73 (dataType -> number .)
    $end            reduce using rule 73 (dataType -> number .)
    END             reduce using rule 73 (dataType -> number .)
    ELSE            reduce using rule 73 (dataType -> number .)
    ELSIF           reduce using rule 73 (dataType -> number .)
    GREATERTHAN     reduce using rule 63 (conditionValue -> number .)
    LESSTHAN        reduce using rule 63 (conditionValue -> number .)
    EQUALS          reduce using rule 63 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 63 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 63 (conditionValue -> number .)


state 38

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (36) parameters -> . ID
    (37) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 63
    ID              shift and go to state 52

    parameters                     shift and go to state 62

state 39

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (62) conditionValue -> ID .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    GREATERTHAN     reduce using rule 62 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 62 (conditionValue -> ID .)
    EQUALS          reduce using rule 62 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 62 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 62 (conditionValue -> ID .)


state 40

    (18) assignmentRule -> ID ASSIGNMENT number .
    (63) conditionValue -> number .

    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 63 (conditionValue -> number .)
    LESSTHAN        reduce using rule 63 (conditionValue -> number .)
    EQUALS          reduce using rule 63 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 63 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 63 (conditionValue -> number .)


state 41

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 42

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 43

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 44

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 45

    (43) creationTDA -> creationStack .

    PRINT           reduce using rule 43 (creationTDA -> creationStack .)
    ID              reduce using rule 43 (creationTDA -> creationStack .)
    IF              reduce using rule 43 (creationTDA -> creationStack .)
    WHILE           reduce using rule 43 (creationTDA -> creationStack .)
    $end            reduce using rule 43 (creationTDA -> creationStack .)
    END             reduce using rule 43 (creationTDA -> creationStack .)
    ELSE            reduce using rule 43 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 43 (creationTDA -> creationStack .)


state 46

    (44) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 44 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 44 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 44 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 44 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 44 (creationTDA -> creationLinkedList .)
    END             reduce using rule 44 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 44 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 44 (creationTDA -> creationLinkedList .)


state 47

    (45) creationTDA -> creationHashmap .

    PRINT           reduce using rule 45 (creationTDA -> creationHashmap .)
    ID              reduce using rule 45 (creationTDA -> creationHashmap .)
    IF              reduce using rule 45 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 45 (creationTDA -> creationHashmap .)
    $end            reduce using rule 45 (creationTDA -> creationHashmap .)
    END             reduce using rule 45 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 45 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 45 (creationTDA -> creationHashmap .)


state 48

    (39) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 64


state 49

    (42) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 65


state 50

    (46) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 66


state 51

    (47) creationHashmap -> LBRACE . pairs RBRACE
    (48) creationHashmap -> LBRACE . RBRACE
    (50) pairs -> . pair
    (51) pairs -> . pair COMMA pairs
    (49) pair -> . STRING COLON value

    RBRACE          shift and go to state 68
    STRING          shift and go to state 70

    pairs                          shift and go to state 67
    pair                           shift and go to state 69

state 52

    (36) parameters -> ID .
    (37) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 36 (parameters -> ID .)
    COMMA           shift and go to state 71


state 53

    (38) funcionCall -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 72


state 54

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 73
    ELSE            shift and go to state 75
    ELSIF           shift and go to state 77

    conditionalElsif               shift and go to state 74
    elsif                          shift and go to state 76

state 55

    (64) condition -> conditionValue comparator . conditionValue
    (62) conditionValue -> . ID
    (63) conditionValue -> . number
    (70) number -> . FLOAT
    (71) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    conditionValue                 shift and go to state 78
    number                         shift and go to state 26

state 56

    (65) comparator -> GREATERTHAN .

    ID              reduce using rule 65 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 65 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 65 (comparator -> GREATERTHAN .)


state 57

    (66) comparator -> LESSTHAN .

    ID              reduce using rule 66 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 66 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 66 (comparator -> LESSTHAN .)


state 58

    (67) comparator -> EQUALS .

    ID              reduce using rule 67 (comparator -> EQUALS .)
    FLOAT           reduce using rule 67 (comparator -> EQUALS .)
    INTEGER         reduce using rule 67 (comparator -> EQUALS .)


state 59

    (68) comparator -> GREATEROREQUALS .

    ID              reduce using rule 68 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 68 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 68 (comparator -> GREATEROREQUALS .)


state 60

    (69) comparator -> LESSOREQUALS .

    ID              reduce using rule 69 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 69 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 69 (comparator -> LESSOREQUALS .)


state 61

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 79


state 62

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 80


state 63

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 81


state 64

    (39) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 82


state 65

    (42) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 83


state 66

    (46) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 84


state 67

    (47) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 85


state 68

    (48) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 48 (creationHashmap -> LBRACE RBRACE .)


state 69

    (50) pairs -> pair .
    (51) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 50 (pairs -> pair .)
    COMMA           shift and go to state 86


state 70

    (49) pair -> STRING . COLON value

    COLON           shift and go to state 87


state 71

    (37) parameters -> ID COMMA . parameters
    (36) parameters -> . ID
    (37) parameters -> . ID COMMA parameters

    ID              shift and go to state 52

    parameters                     shift and go to state 88

state 72

    (38) funcionCall -> ID LPAREN parameters RPAREN .

    PRINT           reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    WHILE           reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    $end            reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    END             reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSE            reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSIF           reduce using rule 38 (funcionCall -> ID LPAREN parameters RPAREN .)


state 73

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 74

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 89
    ELSE            shift and go to state 90


state 75

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 91
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 76

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 77

    elsif                          shift and go to state 76
    conditionalElsif               shift and go to state 92

state 77

    (9) elsif -> ELSIF . condition instructionBody
    (64) condition -> . conditionValue comparator conditionValue
    (62) conditionValue -> . ID
    (63) conditionValue -> . number
    (70) number -> . FLOAT
    (71) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 93
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 78

    (64) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 64 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 64 (condition -> conditionValue comparator conditionValue .)


state 79

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 80

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 94
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 81

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 82

    (39) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 39 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 39 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 39 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 39 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 39 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 39 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 39 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 39 (creationStack -> STACK DOT NEW .)


state 83

    (42) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 42 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 84

    (46) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 46 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 46 (creationHashmap -> HASH DOT NEW .)


state 85

    (47) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 47 (creationHashmap -> LBRACE pairs RBRACE .)


state 86

    (51) pairs -> pair COMMA . pairs
    (50) pairs -> . pair
    (51) pairs -> . pair COMMA pairs
    (49) pair -> . STRING COLON value

    STRING          shift and go to state 70

    pair                           shift and go to state 69
    pairs                          shift and go to state 95

state 87

    (49) pair -> STRING COLON . value
    (52) value -> . ID
    (53) value -> . STRING
    (54) value -> . number
    (55) value -> . LBRACE pairs RBRACE
    (70) number -> . FLOAT
    (71) number -> . INTEGER

    ID              shift and go to state 98
    STRING          shift and go to state 96
    LBRACE          shift and go to state 100
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    value                          shift and go to state 97
    number                         shift and go to state 99

state 88

    (37) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 37 (parameters -> ID COMMA parameters .)


state 89

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 90

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 101
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 91

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 102


state 92

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 93

    (9) elsif -> ELSIF condition . instructionBody
    (29) instructionBody -> . bodyLine
    (30) instructionBody -> . bodyLine instructionBody
    (24) bodyLine -> . assignmentRule
    (25) bodyLine -> . PRINT printBody
    (26) bodyLine -> . nestedConditional
    (27) bodyLine -> . nestedWhile
    (28) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (38) funcionCall -> . ID LPAREN parameters RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 103
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 94

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 104


state 95

    (51) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 51 (pairs -> pair COMMA pairs .)


state 96

    (53) value -> STRING .

    COMMA           reduce using rule 53 (value -> STRING .)
    RBRACE          reduce using rule 53 (value -> STRING .)


state 97

    (49) pair -> STRING COLON value .

    COMMA           reduce using rule 49 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 49 (pair -> STRING COLON value .)


state 98

    (52) value -> ID .

    COMMA           reduce using rule 52 (value -> ID .)
    RBRACE          reduce using rule 52 (value -> ID .)


state 99

    (54) value -> number .

    COMMA           reduce using rule 54 (value -> number .)
    RBRACE          reduce using rule 54 (value -> number .)


state 100

    (55) value -> LBRACE . pairs RBRACE
    (50) pairs -> . pair
    (51) pairs -> . pair COMMA pairs
    (49) pair -> . STRING COLON value

    STRING          shift and go to state 70

    pairs                          shift and go to state 105
    pair                           shift and go to state 69

state 101

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 106


state 102

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 103

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 104

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 105

    (55) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 107


state 106

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 107

    (55) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 55 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 55 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 18 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 20 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
