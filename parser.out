Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    FOR
    GETS
    IN
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    assignmentRule -> ID ASSIGNMENT operations
Rule 25    bodyLine -> assignmentRule
Rule 26    bodyLine -> PRINT printBody
Rule 27    bodyLine -> nestedConditional
Rule 28    bodyLine -> nestedWhile
Rule 29    bodyLine -> funcionCall
Rule 30    instructionBody -> bodyLine
Rule 31    instructionBody -> bodyLine instructionBody
Rule 32    printBody -> ID
Rule 33    printBody -> TRUE
Rule 34    printBody -> FALSE
Rule 35    printBody -> dataType
Rule 36    printBody -> condition
Rule 37    parameters -> ID
Rule 38    parameters -> ID COMMA parameters
Rule 39    funcionCall -> ID LPAREN parameters RPAREN
Rule 40    funcionCall -> ID LPAREN RPAREN
Rule 41    creationStack -> STACK DOT NEW
Rule 42    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 43    creationNode -> NODE DOT NEW LPAREN RPAREN
Rule 44    creationNode -> NODE DOT NEW LPAREN ID RPAREN
Rule 45    creationLinkedList -> LINKEDLIST DOT NEW
Rule 46    creationTDA -> creationStack
Rule 47    creationTDA -> creationLinkedList
Rule 48    creationTDA -> creationHashmap
Rule 49    creationHashmap -> HASH DOT NEW
Rule 50    creationHashmap -> LBRACE pairs RBRACE
Rule 51    creationHashmap -> LBRACE RBRACE
Rule 52    pair -> STRING COLON value
Rule 53    pairs -> pair
Rule 54    pairs -> pair COMMA pairs
Rule 55    value -> ID
Rule 56    value -> STRING
Rule 57    value -> number
Rule 58    value -> LBRACE pairs RBRACE
Rule 59    value -> LBRACE RBRACE
Rule 60    arithmeticOperator -> PLUS
Rule 61    arithmeticOperator -> MINUS
Rule 62    arithmeticOperator -> POWER
Rule 63    arithmeticOperator -> MULTIPLICATION
Rule 64    arithmeticOperator -> DIVISION
Rule 65    getAttribute -> ID DOT ID
Rule 66    operationValue -> ID
Rule 67    operationValue -> number
Rule 68    operationValue -> getAttribute
Rule 69    operation -> operationValue arithmeticOperator operationValue
Rule 70    operations -> operation
Rule 71    operations -> operation arithmeticOperator operations
Rule 72    operations -> operationValue
Rule 73    conditionValue -> ID
Rule 74    conditionValue -> number
Rule 75    condition -> conditionValue comparator conditionValue
Rule 76    comparator -> GREATERTHAN
Rule 77    comparator -> LESSTHAN
Rule 78    comparator -> EQUALS
Rule 79    comparator -> GREATEROREQUALS
Rule 80    comparator -> LESSOREQUALS
Rule 81    number -> FLOAT
Rule 82    number -> INTEGER
Rule 83    dataType -> STRING
Rule 84    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22 23 24
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 42
COLON                : 52
COMMA                : 38 54
DEF                  : 2 3
DIVISION             : 64
DOT                  : 41 43 44 45 49 65
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 78
FALSE                : 22 34
FLOAT                : 81
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 79
GREATERTHAN          : 76
HASH                 : 49
ID                   : 2 3 18 19 19 20 21 22 23 24 32 37 38 39 40 44 55 65 65 66 73
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 82
LBRACE               : 50 51 58 59
LESSOREQUALS         : 80
LESSTHAN             : 77
LINKEDLIST           : 45
LPAREN               : 2 3 39 40 43 44
MINUS                : 61
MULTIPLICATION       : 63
NEW                  : 41 43 44 45 49
NODE                 : 43 44
OPENBRACKET          : 42
PLUS                 : 60
POWER                : 62
PRINT                : 26
PUTS                 : 
RBRACE               : 50 51 58 59
RPAREN               : 2 3 39 40 43 44
STACK                : 41
STRING               : 52 56 83
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 33
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmeticOperator   : 69 71
assignmentRule       : 25
bodyLine             : 30 31
comparator           : 75
condition            : 5 6 7 8 9 15 20 36
conditionValue       : 75 75
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationHashmap      : 48
creationLinkedList   : 47
creationNode         : 
creationStack        : 46
creationTDA          : 23
dataType             : 35
elsif                : 12 13
funcionCall          : 29
getAttribute         : 68
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 31
nestedConditional    : 11 27
nestedWhile          : 17 28
number               : 18 57 67 74 84
operation            : 70 71
operationValue       : 69 69 72
operations           : 24 71
pair                 : 53 54
pairs                : 50 54 58
parameters           : 2 38 39
printBody            : 26
value                : 52
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 15


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (24) assignmentRule -> ID . ASSIGNMENT operations
    (39) funcionCall -> ID . LPAREN parameters RPAREN
    (40) funcionCall -> ID . LPAREN RPAREN

    ASSIGNMENT      shift and go to state 16
    LPAREN          shift and go to state 17


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 7

    (30) instructionBody -> bodyLine .
    (31) instructionBody -> bodyLine . instructionBody
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 30 (instructionBody -> bodyLine .)
    END             reduce using rule 30 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 30 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 30 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 22
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (75) condition -> . conditionValue comparator conditionValue
    (73) conditionValue -> . ID
    (74) conditionValue -> . number
    (81) number -> . FLOAT
    (82) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 23
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (75) condition -> . conditionValue comparator conditionValue
    (73) conditionValue -> . ID
    (74) conditionValue -> . number
    (81) number -> . FLOAT
    (82) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 29
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 10

    (25) bodyLine -> assignmentRule .

    PRINT           reduce using rule 25 (bodyLine -> assignmentRule .)
    ID              reduce using rule 25 (bodyLine -> assignmentRule .)
    IF              reduce using rule 25 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 25 (bodyLine -> assignmentRule .)
    $end            reduce using rule 25 (bodyLine -> assignmentRule .)
    END             reduce using rule 25 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 25 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 25 (bodyLine -> assignmentRule .)


state 11

    (26) bodyLine -> PRINT . printBody
    (32) printBody -> . ID
    (33) printBody -> . TRUE
    (34) printBody -> . FALSE
    (35) printBody -> . dataType
    (36) printBody -> . condition
    (83) dataType -> . STRING
    (84) dataType -> . number
    (75) condition -> . conditionValue comparator conditionValue
    (81) number -> . FLOAT
    (82) number -> . INTEGER
    (73) conditionValue -> . ID
    (74) conditionValue -> . number

    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    STRING          shift and go to state 36
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    printBody                      shift and go to state 30
    dataType                       shift and go to state 34
    condition                      shift and go to state 35
    number                         shift and go to state 37
    conditionValue                 shift and go to state 24

state 12

    (27) bodyLine -> nestedConditional .

    PRINT           reduce using rule 27 (bodyLine -> nestedConditional .)
    ID              reduce using rule 27 (bodyLine -> nestedConditional .)
    IF              reduce using rule 27 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 27 (bodyLine -> nestedConditional .)
    $end            reduce using rule 27 (bodyLine -> nestedConditional .)
    END             reduce using rule 27 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 27 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 27 (bodyLine -> nestedConditional .)


state 13

    (28) bodyLine -> nestedWhile .

    PRINT           reduce using rule 28 (bodyLine -> nestedWhile .)
    ID              reduce using rule 28 (bodyLine -> nestedWhile .)
    IF              reduce using rule 28 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 28 (bodyLine -> nestedWhile .)
    $end            reduce using rule 28 (bodyLine -> nestedWhile .)
    END             reduce using rule 28 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 28 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 28 (bodyLine -> nestedWhile .)


state 14

    (29) bodyLine -> funcionCall .

    PRINT           reduce using rule 29 (bodyLine -> funcionCall .)
    ID              reduce using rule 29 (bodyLine -> funcionCall .)
    IF              reduce using rule 29 (bodyLine -> funcionCall .)
    WHILE           reduce using rule 29 (bodyLine -> funcionCall .)
    $end            reduce using rule 29 (bodyLine -> funcionCall .)
    END             reduce using rule 29 (bodyLine -> funcionCall .)
    ELSE            reduce using rule 29 (bodyLine -> funcionCall .)
    ELSIF           reduce using rule 29 (bodyLine -> funcionCall .)


state 15

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 38


state 16

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (24) assignmentRule -> ID ASSIGNMENT . operations
    (81) number -> . FLOAT
    (82) number -> . INTEGER
    (75) condition -> . conditionValue comparator conditionValue
    (46) creationTDA -> . creationStack
    (47) creationTDA -> . creationLinkedList
    (48) creationTDA -> . creationHashmap
    (70) operations -> . operation
    (71) operations -> . operation arithmeticOperator operations
    (72) operations -> . operationValue
    (73) conditionValue -> . ID
    (74) conditionValue -> . number
    (41) creationStack -> . STACK DOT NEW
    (42) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (45) creationLinkedList -> . LINKEDLIST DOT NEW
    (49) creationHashmap -> . HASH DOT NEW
    (50) creationHashmap -> . LBRACE pairs RBRACE
    (51) creationHashmap -> . LBRACE RBRACE
    (69) operation -> . operationValue arithmeticOperator operationValue
    (66) operationValue -> . ID
    (67) operationValue -> . number
    (68) operationValue -> . getAttribute
    (65) getAttribute -> . ID DOT ID

    ID              shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    STACK           shift and go to state 51
    OPENBRACKET     shift and go to state 52
    LINKEDLIST      shift and go to state 53
    HASH            shift and go to state 54
    LBRACE          shift and go to state 55

    number                         shift and go to state 40
    condition                      shift and go to state 41
    creationTDA                    shift and go to state 44
    operations                     shift and go to state 45
    conditionValue                 shift and go to state 24
    creationStack                  shift and go to state 46
    creationLinkedList             shift and go to state 47
    creationHashmap                shift and go to state 48
    operation                      shift and go to state 49
    operationValue                 shift and go to state 50
    getAttribute                   shift and go to state 56

state 17

    (39) funcionCall -> ID LPAREN . parameters RPAREN
    (40) funcionCall -> ID LPAREN . RPAREN
    (37) parameters -> . ID
    (38) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 59
    ID              shift and go to state 57

    parameters                     shift and go to state 58

state 18

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 19

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 20

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 21

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 22

    (31) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 31 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 31 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 31 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 31 (instructionBody -> bodyLine instructionBody .)


state 23

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 60
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 24

    (75) condition -> conditionValue . comparator conditionValue
    (76) comparator -> . GREATERTHAN
    (77) comparator -> . LESSTHAN
    (78) comparator -> . EQUALS
    (79) comparator -> . GREATEROREQUALS
    (80) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 62
    LESSTHAN        shift and go to state 63
    EQUALS          shift and go to state 64
    GREATEROREQUALS shift and go to state 65
    LESSOREQUALS    shift and go to state 66

    comparator                     shift and go to state 61

state 25

    (73) conditionValue -> ID .

    GREATERTHAN     reduce using rule 73 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 73 (conditionValue -> ID .)
    EQUALS          reduce using rule 73 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 73 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 73 (conditionValue -> ID .)
    PRINT           reduce using rule 73 (conditionValue -> ID .)
    ID              reduce using rule 73 (conditionValue -> ID .)
    IF              reduce using rule 73 (conditionValue -> ID .)
    WHILE           reduce using rule 73 (conditionValue -> ID .)
    $end            reduce using rule 73 (conditionValue -> ID .)
    END             reduce using rule 73 (conditionValue -> ID .)
    ELSE            reduce using rule 73 (conditionValue -> ID .)
    ELSIF           reduce using rule 73 (conditionValue -> ID .)


state 26

    (74) conditionValue -> number .

    GREATERTHAN     reduce using rule 74 (conditionValue -> number .)
    LESSTHAN        reduce using rule 74 (conditionValue -> number .)
    EQUALS          reduce using rule 74 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 74 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 74 (conditionValue -> number .)
    PRINT           reduce using rule 74 (conditionValue -> number .)
    ID              reduce using rule 74 (conditionValue -> number .)
    IF              reduce using rule 74 (conditionValue -> number .)
    WHILE           reduce using rule 74 (conditionValue -> number .)
    $end            reduce using rule 74 (conditionValue -> number .)
    END             reduce using rule 74 (conditionValue -> number .)
    ELSE            reduce using rule 74 (conditionValue -> number .)
    ELSIF           reduce using rule 74 (conditionValue -> number .)


state 27

    (81) number -> FLOAT .

    GREATERTHAN     reduce using rule 81 (number -> FLOAT .)
    LESSTHAN        reduce using rule 81 (number -> FLOAT .)
    EQUALS          reduce using rule 81 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 81 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 81 (number -> FLOAT .)
    PRINT           reduce using rule 81 (number -> FLOAT .)
    ID              reduce using rule 81 (number -> FLOAT .)
    IF              reduce using rule 81 (number -> FLOAT .)
    WHILE           reduce using rule 81 (number -> FLOAT .)
    $end            reduce using rule 81 (number -> FLOAT .)
    END             reduce using rule 81 (number -> FLOAT .)
    ELSE            reduce using rule 81 (number -> FLOAT .)
    ELSIF           reduce using rule 81 (number -> FLOAT .)
    PLUS            reduce using rule 81 (number -> FLOAT .)
    MINUS           reduce using rule 81 (number -> FLOAT .)
    POWER           reduce using rule 81 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 81 (number -> FLOAT .)
    DIVISION        reduce using rule 81 (number -> FLOAT .)
    COMMA           reduce using rule 81 (number -> FLOAT .)
    RBRACE          reduce using rule 81 (number -> FLOAT .)


state 28

    (82) number -> INTEGER .

    GREATERTHAN     reduce using rule 82 (number -> INTEGER .)
    LESSTHAN        reduce using rule 82 (number -> INTEGER .)
    EQUALS          reduce using rule 82 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 82 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 82 (number -> INTEGER .)
    PRINT           reduce using rule 82 (number -> INTEGER .)
    ID              reduce using rule 82 (number -> INTEGER .)
    IF              reduce using rule 82 (number -> INTEGER .)
    WHILE           reduce using rule 82 (number -> INTEGER .)
    $end            reduce using rule 82 (number -> INTEGER .)
    END             reduce using rule 82 (number -> INTEGER .)
    ELSE            reduce using rule 82 (number -> INTEGER .)
    ELSIF           reduce using rule 82 (number -> INTEGER .)
    PLUS            reduce using rule 82 (number -> INTEGER .)
    MINUS           reduce using rule 82 (number -> INTEGER .)
    POWER           reduce using rule 82 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 82 (number -> INTEGER .)
    DIVISION        reduce using rule 82 (number -> INTEGER .)
    COMMA           reduce using rule 82 (number -> INTEGER .)
    RBRACE          reduce using rule 82 (number -> INTEGER .)


state 29

    (15) whileLoop -> WHILE condition . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 67
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 30

    (26) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 26 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 26 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 26 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 26 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 26 (bodyLine -> PRINT printBody .)
    END             reduce using rule 26 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 26 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 26 (bodyLine -> PRINT printBody .)


state 31

    (32) printBody -> ID .
    (73) conditionValue -> ID .

    PRINT           reduce using rule 32 (printBody -> ID .)
    ID              reduce using rule 32 (printBody -> ID .)
    IF              reduce using rule 32 (printBody -> ID .)
    WHILE           reduce using rule 32 (printBody -> ID .)
    $end            reduce using rule 32 (printBody -> ID .)
    END             reduce using rule 32 (printBody -> ID .)
    ELSE            reduce using rule 32 (printBody -> ID .)
    ELSIF           reduce using rule 32 (printBody -> ID .)
    GREATERTHAN     reduce using rule 73 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 73 (conditionValue -> ID .)
    EQUALS          reduce using rule 73 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 73 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 73 (conditionValue -> ID .)


state 32

    (33) printBody -> TRUE .

    PRINT           reduce using rule 33 (printBody -> TRUE .)
    ID              reduce using rule 33 (printBody -> TRUE .)
    IF              reduce using rule 33 (printBody -> TRUE .)
    WHILE           reduce using rule 33 (printBody -> TRUE .)
    $end            reduce using rule 33 (printBody -> TRUE .)
    END             reduce using rule 33 (printBody -> TRUE .)
    ELSE            reduce using rule 33 (printBody -> TRUE .)
    ELSIF           reduce using rule 33 (printBody -> TRUE .)


state 33

    (34) printBody -> FALSE .

    PRINT           reduce using rule 34 (printBody -> FALSE .)
    ID              reduce using rule 34 (printBody -> FALSE .)
    IF              reduce using rule 34 (printBody -> FALSE .)
    WHILE           reduce using rule 34 (printBody -> FALSE .)
    $end            reduce using rule 34 (printBody -> FALSE .)
    END             reduce using rule 34 (printBody -> FALSE .)
    ELSE            reduce using rule 34 (printBody -> FALSE .)
    ELSIF           reduce using rule 34 (printBody -> FALSE .)


state 34

    (35) printBody -> dataType .

    PRINT           reduce using rule 35 (printBody -> dataType .)
    ID              reduce using rule 35 (printBody -> dataType .)
    IF              reduce using rule 35 (printBody -> dataType .)
    WHILE           reduce using rule 35 (printBody -> dataType .)
    $end            reduce using rule 35 (printBody -> dataType .)
    END             reduce using rule 35 (printBody -> dataType .)
    ELSE            reduce using rule 35 (printBody -> dataType .)
    ELSIF           reduce using rule 35 (printBody -> dataType .)


state 35

    (36) printBody -> condition .

    PRINT           reduce using rule 36 (printBody -> condition .)
    ID              reduce using rule 36 (printBody -> condition .)
    IF              reduce using rule 36 (printBody -> condition .)
    WHILE           reduce using rule 36 (printBody -> condition .)
    $end            reduce using rule 36 (printBody -> condition .)
    END             reduce using rule 36 (printBody -> condition .)
    ELSE            reduce using rule 36 (printBody -> condition .)
    ELSIF           reduce using rule 36 (printBody -> condition .)


state 36

    (83) dataType -> STRING .

    PRINT           reduce using rule 83 (dataType -> STRING .)
    ID              reduce using rule 83 (dataType -> STRING .)
    IF              reduce using rule 83 (dataType -> STRING .)
    WHILE           reduce using rule 83 (dataType -> STRING .)
    $end            reduce using rule 83 (dataType -> STRING .)
    END             reduce using rule 83 (dataType -> STRING .)
    ELSE            reduce using rule 83 (dataType -> STRING .)
    ELSIF           reduce using rule 83 (dataType -> STRING .)


state 37

    (84) dataType -> number .
    (74) conditionValue -> number .

    PRINT           reduce using rule 84 (dataType -> number .)
    ID              reduce using rule 84 (dataType -> number .)
    IF              reduce using rule 84 (dataType -> number .)
    WHILE           reduce using rule 84 (dataType -> number .)
    $end            reduce using rule 84 (dataType -> number .)
    END             reduce using rule 84 (dataType -> number .)
    ELSE            reduce using rule 84 (dataType -> number .)
    ELSIF           reduce using rule 84 (dataType -> number .)
    GREATERTHAN     reduce using rule 74 (conditionValue -> number .)
    LESSTHAN        reduce using rule 74 (conditionValue -> number .)
    EQUALS          reduce using rule 74 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 74 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 74 (conditionValue -> number .)


state 38

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (37) parameters -> . ID
    (38) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 69
    ID              shift and go to state 57

    parameters                     shift and go to state 68

state 39

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (73) conditionValue -> ID .
    (66) operationValue -> ID .
    (65) getAttribute -> ID . DOT ID

  ! reduce/reduce conflict for PRINT resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for ID resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for IF resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for $end resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for END resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
  ! reduce/reduce conflict for ELSIF resolved using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    GREATERTHAN     reduce using rule 73 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 73 (conditionValue -> ID .)
    EQUALS          reduce using rule 73 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 73 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 73 (conditionValue -> ID .)
    PLUS            reduce using rule 66 (operationValue -> ID .)
    MINUS           reduce using rule 66 (operationValue -> ID .)
    POWER           reduce using rule 66 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 66 (operationValue -> ID .)
    DIVISION        reduce using rule 66 (operationValue -> ID .)
    DOT             shift and go to state 70

  ! PRINT           [ reduce using rule 66 (operationValue -> ID .) ]
  ! ID              [ reduce using rule 66 (operationValue -> ID .) ]
  ! IF              [ reduce using rule 66 (operationValue -> ID .) ]
  ! WHILE           [ reduce using rule 66 (operationValue -> ID .) ]
  ! $end            [ reduce using rule 66 (operationValue -> ID .) ]
  ! END             [ reduce using rule 66 (operationValue -> ID .) ]
  ! ELSE            [ reduce using rule 66 (operationValue -> ID .) ]
  ! ELSIF           [ reduce using rule 66 (operationValue -> ID .) ]


state 40

    (18) assignmentRule -> ID ASSIGNMENT number .
    (74) conditionValue -> number .
    (67) operationValue -> number .

  ! reduce/reduce conflict for PRINT resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for ID resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for IF resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for $end resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for END resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
  ! reduce/reduce conflict for ELSIF resolved using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 74 (conditionValue -> number .)
    LESSTHAN        reduce using rule 74 (conditionValue -> number .)
    EQUALS          reduce using rule 74 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 74 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 74 (conditionValue -> number .)
    PLUS            reduce using rule 67 (operationValue -> number .)
    MINUS           reduce using rule 67 (operationValue -> number .)
    POWER           reduce using rule 67 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 67 (operationValue -> number .)
    DIVISION        reduce using rule 67 (operationValue -> number .)

  ! PRINT           [ reduce using rule 67 (operationValue -> number .) ]
  ! ID              [ reduce using rule 67 (operationValue -> number .) ]
  ! IF              [ reduce using rule 67 (operationValue -> number .) ]
  ! WHILE           [ reduce using rule 67 (operationValue -> number .) ]
  ! $end            [ reduce using rule 67 (operationValue -> number .) ]
  ! END             [ reduce using rule 67 (operationValue -> number .) ]
  ! ELSE            [ reduce using rule 67 (operationValue -> number .) ]
  ! ELSIF           [ reduce using rule 67 (operationValue -> number .) ]


state 41

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 42

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 43

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 44

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 45

    (24) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)


state 46

    (46) creationTDA -> creationStack .

    PRINT           reduce using rule 46 (creationTDA -> creationStack .)
    ID              reduce using rule 46 (creationTDA -> creationStack .)
    IF              reduce using rule 46 (creationTDA -> creationStack .)
    WHILE           reduce using rule 46 (creationTDA -> creationStack .)
    $end            reduce using rule 46 (creationTDA -> creationStack .)
    END             reduce using rule 46 (creationTDA -> creationStack .)
    ELSE            reduce using rule 46 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 46 (creationTDA -> creationStack .)


state 47

    (47) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 47 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 47 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 47 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 47 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 47 (creationTDA -> creationLinkedList .)
    END             reduce using rule 47 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 47 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 47 (creationTDA -> creationLinkedList .)


state 48

    (48) creationTDA -> creationHashmap .

    PRINT           reduce using rule 48 (creationTDA -> creationHashmap .)
    ID              reduce using rule 48 (creationTDA -> creationHashmap .)
    IF              reduce using rule 48 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 48 (creationTDA -> creationHashmap .)
    $end            reduce using rule 48 (creationTDA -> creationHashmap .)
    END             reduce using rule 48 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 48 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 48 (creationTDA -> creationHashmap .)


state 49

    (70) operations -> operation .
    (71) operations -> operation . arithmeticOperator operations
    (60) arithmeticOperator -> . PLUS
    (61) arithmeticOperator -> . MINUS
    (62) arithmeticOperator -> . POWER
    (63) arithmeticOperator -> . MULTIPLICATION
    (64) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 70 (operations -> operation .)
    ID              reduce using rule 70 (operations -> operation .)
    IF              reduce using rule 70 (operations -> operation .)
    WHILE           reduce using rule 70 (operations -> operation .)
    $end            reduce using rule 70 (operations -> operation .)
    END             reduce using rule 70 (operations -> operation .)
    ELSE            reduce using rule 70 (operations -> operation .)
    ELSIF           reduce using rule 70 (operations -> operation .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    POWER           shift and go to state 74
    MULTIPLICATION  shift and go to state 75
    DIVISION        shift and go to state 76

    arithmeticOperator             shift and go to state 71

state 50

    (72) operations -> operationValue .
    (69) operation -> operationValue . arithmeticOperator operationValue
    (60) arithmeticOperator -> . PLUS
    (61) arithmeticOperator -> . MINUS
    (62) arithmeticOperator -> . POWER
    (63) arithmeticOperator -> . MULTIPLICATION
    (64) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 72 (operations -> operationValue .)
    ID              reduce using rule 72 (operations -> operationValue .)
    IF              reduce using rule 72 (operations -> operationValue .)
    WHILE           reduce using rule 72 (operations -> operationValue .)
    $end            reduce using rule 72 (operations -> operationValue .)
    END             reduce using rule 72 (operations -> operationValue .)
    ELSE            reduce using rule 72 (operations -> operationValue .)
    ELSIF           reduce using rule 72 (operations -> operationValue .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    POWER           shift and go to state 74
    MULTIPLICATION  shift and go to state 75
    DIVISION        shift and go to state 76

    arithmeticOperator             shift and go to state 77

state 51

    (41) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 78


state 52

    (42) creationStack -> OPENBRACKET . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 79


state 53

    (45) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 80


state 54

    (49) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 81


state 55

    (50) creationHashmap -> LBRACE . pairs RBRACE
    (51) creationHashmap -> LBRACE . RBRACE
    (53) pairs -> . pair
    (54) pairs -> . pair COMMA pairs
    (52) pair -> . STRING COLON value

    RBRACE          shift and go to state 83
    STRING          shift and go to state 85

    pairs                          shift and go to state 82
    pair                           shift and go to state 84

state 56

    (68) operationValue -> getAttribute .

    PLUS            reduce using rule 68 (operationValue -> getAttribute .)
    MINUS           reduce using rule 68 (operationValue -> getAttribute .)
    POWER           reduce using rule 68 (operationValue -> getAttribute .)
    MULTIPLICATION  reduce using rule 68 (operationValue -> getAttribute .)
    DIVISION        reduce using rule 68 (operationValue -> getAttribute .)
    PRINT           reduce using rule 68 (operationValue -> getAttribute .)
    ID              reduce using rule 68 (operationValue -> getAttribute .)
    IF              reduce using rule 68 (operationValue -> getAttribute .)
    WHILE           reduce using rule 68 (operationValue -> getAttribute .)
    $end            reduce using rule 68 (operationValue -> getAttribute .)
    END             reduce using rule 68 (operationValue -> getAttribute .)
    ELSE            reduce using rule 68 (operationValue -> getAttribute .)
    ELSIF           reduce using rule 68 (operationValue -> getAttribute .)


state 57

    (37) parameters -> ID .
    (38) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 37 (parameters -> ID .)
    COMMA           shift and go to state 86


state 58

    (39) funcionCall -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 87


state 59

    (40) funcionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)


state 60

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 88
    ELSE            shift and go to state 90
    ELSIF           shift and go to state 92

    conditionalElsif               shift and go to state 89
    elsif                          shift and go to state 91

state 61

    (75) condition -> conditionValue comparator . conditionValue
    (73) conditionValue -> . ID
    (74) conditionValue -> . number
    (81) number -> . FLOAT
    (82) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    conditionValue                 shift and go to state 93
    number                         shift and go to state 26

state 62

    (76) comparator -> GREATERTHAN .

    ID              reduce using rule 76 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 76 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 76 (comparator -> GREATERTHAN .)


state 63

    (77) comparator -> LESSTHAN .

    ID              reduce using rule 77 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 77 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 77 (comparator -> LESSTHAN .)


state 64

    (78) comparator -> EQUALS .

    ID              reduce using rule 78 (comparator -> EQUALS .)
    FLOAT           reduce using rule 78 (comparator -> EQUALS .)
    INTEGER         reduce using rule 78 (comparator -> EQUALS .)


state 65

    (79) comparator -> GREATEROREQUALS .

    ID              reduce using rule 79 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 79 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 79 (comparator -> GREATEROREQUALS .)


state 66

    (80) comparator -> LESSOREQUALS .

    ID              reduce using rule 80 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 80 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 80 (comparator -> LESSOREQUALS .)


state 67

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 94


state 68

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 95


state 69

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 96


state 70

    (65) getAttribute -> ID DOT . ID

    ID              shift and go to state 97


state 71

    (71) operations -> operation arithmeticOperator . operations
    (70) operations -> . operation
    (71) operations -> . operation arithmeticOperator operations
    (72) operations -> . operationValue
    (69) operation -> . operationValue arithmeticOperator operationValue
    (66) operationValue -> . ID
    (67) operationValue -> . number
    (68) operationValue -> . getAttribute
    (81) number -> . FLOAT
    (82) number -> . INTEGER
    (65) getAttribute -> . ID DOT ID

    ID              shift and go to state 99
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    operation                      shift and go to state 49
    operations                     shift and go to state 98
    operationValue                 shift and go to state 50
    number                         shift and go to state 100
    getAttribute                   shift and go to state 56

state 72

    (60) arithmeticOperator -> PLUS .

    ID              reduce using rule 60 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 60 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 60 (arithmeticOperator -> PLUS .)


state 73

    (61) arithmeticOperator -> MINUS .

    ID              reduce using rule 61 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 61 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 61 (arithmeticOperator -> MINUS .)


state 74

    (62) arithmeticOperator -> POWER .

    ID              reduce using rule 62 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 62 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 62 (arithmeticOperator -> POWER .)


state 75

    (63) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 63 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 63 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 63 (arithmeticOperator -> MULTIPLICATION .)


state 76

    (64) arithmeticOperator -> DIVISION .

    ID              reduce using rule 64 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 64 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 64 (arithmeticOperator -> DIVISION .)


state 77

    (69) operation -> operationValue arithmeticOperator . operationValue
    (66) operationValue -> . ID
    (67) operationValue -> . number
    (68) operationValue -> . getAttribute
    (81) number -> . FLOAT
    (82) number -> . INTEGER
    (65) getAttribute -> . ID DOT ID

    ID              shift and go to state 99
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    operationValue                 shift and go to state 101
    number                         shift and go to state 100
    getAttribute                   shift and go to state 56

state 78

    (41) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 102


state 79

    (42) creationStack -> OPENBRACKET CLOSEDBRACKET .

    PRINT           reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)


state 80

    (45) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 103


state 81

    (49) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 104


state 82

    (50) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 105


state 83

    (51) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)


state 84

    (53) pairs -> pair .
    (54) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 53 (pairs -> pair .)
    COMMA           shift and go to state 106


state 85

    (52) pair -> STRING . COLON value

    COLON           shift and go to state 107


state 86

    (38) parameters -> ID COMMA . parameters
    (37) parameters -> . ID
    (38) parameters -> . ID COMMA parameters

    ID              shift and go to state 57

    parameters                     shift and go to state 108

state 87

    (39) funcionCall -> ID LPAREN parameters RPAREN .

    PRINT           reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    WHILE           reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    $end            reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    END             reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSE            reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSIF           reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)


state 88

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 89

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 109
    ELSE            shift and go to state 110


state 90

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 111
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 91

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 92

    elsif                          shift and go to state 91
    conditionalElsif               shift and go to state 112

state 92

    (9) elsif -> ELSIF . condition instructionBody
    (75) condition -> . conditionValue comparator conditionValue
    (73) conditionValue -> . ID
    (74) conditionValue -> . number
    (81) number -> . FLOAT
    (82) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 113
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 93

    (75) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 75 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 75 (condition -> conditionValue comparator conditionValue .)


state 94

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 95

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 114
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 96

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 97

    (65) getAttribute -> ID DOT ID .

    PLUS            reduce using rule 65 (getAttribute -> ID DOT ID .)
    MINUS           reduce using rule 65 (getAttribute -> ID DOT ID .)
    POWER           reduce using rule 65 (getAttribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 65 (getAttribute -> ID DOT ID .)
    DIVISION        reduce using rule 65 (getAttribute -> ID DOT ID .)
    PRINT           reduce using rule 65 (getAttribute -> ID DOT ID .)
    ID              reduce using rule 65 (getAttribute -> ID DOT ID .)
    IF              reduce using rule 65 (getAttribute -> ID DOT ID .)
    WHILE           reduce using rule 65 (getAttribute -> ID DOT ID .)
    $end            reduce using rule 65 (getAttribute -> ID DOT ID .)
    END             reduce using rule 65 (getAttribute -> ID DOT ID .)
    ELSE            reduce using rule 65 (getAttribute -> ID DOT ID .)
    ELSIF           reduce using rule 65 (getAttribute -> ID DOT ID .)


state 98

    (71) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 71 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 71 (operations -> operation arithmeticOperator operations .)


state 99

    (66) operationValue -> ID .
    (65) getAttribute -> ID . DOT ID

    PLUS            reduce using rule 66 (operationValue -> ID .)
    MINUS           reduce using rule 66 (operationValue -> ID .)
    POWER           reduce using rule 66 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 66 (operationValue -> ID .)
    DIVISION        reduce using rule 66 (operationValue -> ID .)
    PRINT           reduce using rule 66 (operationValue -> ID .)
    ID              reduce using rule 66 (operationValue -> ID .)
    IF              reduce using rule 66 (operationValue -> ID .)
    WHILE           reduce using rule 66 (operationValue -> ID .)
    $end            reduce using rule 66 (operationValue -> ID .)
    END             reduce using rule 66 (operationValue -> ID .)
    ELSE            reduce using rule 66 (operationValue -> ID .)
    ELSIF           reduce using rule 66 (operationValue -> ID .)
    DOT             shift and go to state 70


state 100

    (67) operationValue -> number .

    PLUS            reduce using rule 67 (operationValue -> number .)
    MINUS           reduce using rule 67 (operationValue -> number .)
    POWER           reduce using rule 67 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 67 (operationValue -> number .)
    DIVISION        reduce using rule 67 (operationValue -> number .)
    PRINT           reduce using rule 67 (operationValue -> number .)
    ID              reduce using rule 67 (operationValue -> number .)
    IF              reduce using rule 67 (operationValue -> number .)
    WHILE           reduce using rule 67 (operationValue -> number .)
    $end            reduce using rule 67 (operationValue -> number .)
    END             reduce using rule 67 (operationValue -> number .)
    ELSE            reduce using rule 67 (operationValue -> number .)
    ELSIF           reduce using rule 67 (operationValue -> number .)


state 101

    (69) operation -> operationValue arithmeticOperator operationValue .

    PLUS            reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    MINUS           reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    POWER           reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    MULTIPLICATION  reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    DIVISION        reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 69 (operation -> operationValue arithmeticOperator operationValue .)


state 102

    (41) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 41 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 41 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 41 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 41 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 41 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 41 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 41 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 41 (creationStack -> STACK DOT NEW .)


state 103

    (45) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 104

    (49) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 49 (creationHashmap -> HASH DOT NEW .)


state 105

    (50) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)


state 106

    (54) pairs -> pair COMMA . pairs
    (53) pairs -> . pair
    (54) pairs -> . pair COMMA pairs
    (52) pair -> . STRING COLON value

    STRING          shift and go to state 85

    pair                           shift and go to state 84
    pairs                          shift and go to state 115

state 107

    (52) pair -> STRING COLON . value
    (55) value -> . ID
    (56) value -> . STRING
    (57) value -> . number
    (58) value -> . LBRACE pairs RBRACE
    (59) value -> . LBRACE RBRACE
    (81) number -> . FLOAT
    (82) number -> . INTEGER

    ID              shift and go to state 118
    STRING          shift and go to state 116
    LBRACE          shift and go to state 120
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    value                          shift and go to state 117
    number                         shift and go to state 119

state 108

    (38) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 38 (parameters -> ID COMMA parameters .)


state 109

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 110

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 121
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 111

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 122


state 112

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 113

    (9) elsif -> ELSIF condition . instructionBody
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 123
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 114

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 124


state 115

    (54) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 54 (pairs -> pair COMMA pairs .)


state 116

    (56) value -> STRING .

    COMMA           reduce using rule 56 (value -> STRING .)
    RBRACE          reduce using rule 56 (value -> STRING .)


state 117

    (52) pair -> STRING COLON value .

    COMMA           reduce using rule 52 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 52 (pair -> STRING COLON value .)


state 118

    (55) value -> ID .

    COMMA           reduce using rule 55 (value -> ID .)
    RBRACE          reduce using rule 55 (value -> ID .)


state 119

    (57) value -> number .

    COMMA           reduce using rule 57 (value -> number .)
    RBRACE          reduce using rule 57 (value -> number .)


state 120

    (58) value -> LBRACE . pairs RBRACE
    (59) value -> LBRACE . RBRACE
    (53) pairs -> . pair
    (54) pairs -> . pair COMMA pairs
    (52) pair -> . STRING COLON value

    RBRACE          shift and go to state 126
    STRING          shift and go to state 85

    pairs                          shift and go to state 125
    pair                           shift and go to state 84

state 121

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 127


state 122

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 123

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 124

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 125

    (58) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 128


state 126

    (59) value -> LBRACE RBRACE .

    COMMA           reduce using rule 59 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 59 (value -> LBRACE RBRACE .)


state 127

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 128

    (58) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 58 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 58 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 18 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 20 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
WARNING: reduce/reduce conflict in state 39 resolved using rule (assignmentRule -> ID ASSIGNMENT ID)
WARNING: rejected rule (operationValue -> ID) in state 39
WARNING: reduce/reduce conflict in state 40 resolved using rule (assignmentRule -> ID ASSIGNMENT number)
WARNING: rejected rule (operationValue -> number) in state 40
