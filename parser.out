Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CASE
    CLASS
    FOR
    IN
    NODE
    THEN

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> DEF ID LPAREN RPAREN instructionBody YIELD END
Rule 5     instruction -> conditional
Rule 6     conditional -> IF condition instructionBody END
Rule 7     conditional -> IF condition instructionBody conditionalElsif END
Rule 8     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 9     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 10    elsif -> ELSIF condition instructionBody
Rule 11    nestedConditional -> conditional
Rule 12    nestedConditional -> conditional nestedConditional
Rule 13    conditionalElsif -> elsif
Rule 14    conditionalElsif -> elsif conditionalElsif
Rule 15    instruction -> whileLoop
Rule 16    whileLoop -> WHILE condition instructionBody END
Rule 17    nestedWhile -> whileLoop
Rule 18    nestedWhile -> whileLoop nestedWhile
Rule 19    assignmentRule -> ID ASSIGNMENT number
Rule 20    assignmentRule -> ID ASSIGNMENT ID
Rule 21    assignmentRule -> ID ASSIGNMENT condition
Rule 22    assignmentRule -> ID ASSIGNMENT TRUE
Rule 23    assignmentRule -> ID ASSIGNMENT FALSE
Rule 24    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 25    assignmentRule -> ID ASSIGNMENT operations
Rule 26    assignmentRule -> ID ASSIGNMENT array
Rule 27    assignmentRule -> ID ASSIGNMENT indexation
Rule 28    assignmentRule -> ID ASSIGNMENT attribute
Rule 29    assignmentRule -> ID ASSIGNMENT input
Rule 30    bodyLine -> assignmentRule
Rule 31    bodyLine -> PRINT printBody
Rule 32    bodyLine -> nestedConditional
Rule 33    bodyLine -> nestedWhile
Rule 34    bodyLine -> functionCall
Rule 35    bodyLine -> arrayConcat
Rule 36    bodyLine -> RETURN arguments
Rule 37    bodyLine -> PUTS printBody
Rule 38    bodyLine -> method
Rule 39    bodyLine -> unariOperator
Rule 40    instructionBody -> bodyLine
Rule 41    instructionBody -> bodyLine instructionBody
Rule 42    printBody -> ID
Rule 43    printBody -> TRUE
Rule 44    printBody -> FALSE
Rule 45    printBody -> dataType
Rule 46    printBody -> condition
Rule 47    printBody -> method
Rule 48    printBody -> functionCall
Rule 49    argument -> ID
Rule 50    argument -> number
Rule 51    argument -> attribute
Rule 52    argument -> indexation
Rule 53    argument -> STRING
Rule 54    arguments -> argument
Rule 55    arguments -> argument COMMA arguments
Rule 56    method -> ID DOT functionCall
Rule 57    input -> GETS DOT CHOMP DOT TO_F
Rule 58    input -> GETS DOT CHOMP DOT TO_I
Rule 59    input -> GETS DOT CHOMP
Rule 60    parameters -> ID
Rule 61    parameters -> ID COMMA parameters
Rule 62    functionCall -> ID LPAREN arguments RPAREN
Rule 63    functionCall -> ID LPAREN RPAREN
Rule 64    blockFunction -> LBRACE instructionBody RBRACE
Rule 65    blockFunction -> DO instructionBody END
Rule 66    creationStack -> STACK DOT NEW
Rule 67    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 68    creationLinkedList -> LINKEDLIST DOT NEW
Rule 69    creationTDA -> creationStack
Rule 70    creationTDA -> creationLinkedList
Rule 71    creationTDA -> creationHashmap
Rule 72    creationHashmap -> HASH DOT NEW
Rule 73    creationHashmap -> LBRACE pairs RBRACE
Rule 74    creationHashmap -> LBRACE RBRACE
Rule 75    pair -> STRING COLON value
Rule 76    pairs -> pair
Rule 77    pairs -> pair COMMA pairs
Rule 78    value -> ID
Rule 79    value -> STRING
Rule 80    value -> number
Rule 81    value -> LBRACE pairs RBRACE
Rule 82    value -> LBRACE RBRACE
Rule 83    arithmeticOperator -> PLUS
Rule 84    arithmeticOperator -> MINUS
Rule 85    arithmeticOperator -> POWER
Rule 86    arithmeticOperator -> MULTIPLICATION
Rule 87    arithmeticOperator -> DIVISION
Rule 88    attribute -> ID DOT ID
Rule 89    operationValue -> ID
Rule 90    operationValue -> number
Rule 91    operationValue -> attribute
Rule 92    operationValue -> indexation
Rule 93    operation -> operationValue arithmeticOperator operationValue
Rule 94    operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN
Rule 95    operations -> operation
Rule 96    operations -> operation arithmeticOperator operations
Rule 97    operations -> operation arithmeticOperator operationValue
Rule 98    operations -> operationValue arithmeticOperator operation
Rule 99    array -> OPENBRACKET element_list CLOSEDBRACKET
Rule 100   array -> OPENBRACKET CLOSEDBRACKET
Rule 101   element_list -> conditionValue
Rule 102   element_list -> element_list COMMA conditionValue
Rule 103   conditionValue -> ID
Rule 104   conditionValue -> number
Rule 105   conditionValue -> indexation
Rule 106   conditionValue -> attribute
Rule 107   arrayConcat -> ID ARRAYAPPEND ID
Rule 108   arrayConcat -> ID ARRAYAPPEND number
Rule 109   indexation -> ID OPENBRACKET element_list CLOSEDBRACKET
Rule 110   indexation -> ID OPENBRACKET operation CLOSEDBRACKET
Rule 111   condition -> conditionValue comparator conditionValue
Rule 112   comparator -> GREATERTHAN
Rule 113   comparator -> LESSTHAN
Rule 114   comparator -> EQUALS
Rule 115   comparator -> GREATEROREQUALS
Rule 116   comparator -> LESSOREQUALS
Rule 117   unariOperator -> ID ASSIGNDECREMENT number
Rule 118   unariOperator -> ID ASSIGNINCREMENT number
Rule 119   number -> FLOAT
Rule 120   number -> INTEGER
Rule 121   dataType -> STRING
Rule 122   dataType -> number

Terminals, with rules where they appear

AND                  : 
ARRAYAPPEND          : 107 108
ASSIGNDECREMENT      : 117
ASSIGNINCREMENT      : 118
ASSIGNMENT           : 19 20 21 22 23 24 25 26 27 28 29
BREAK                : 
CASE                 : 
CHOMP                : 57 58 59
CLASS                : 
CLOSEDBRACKET        : 67 99 100 109 110
COLON                : 75
COMMA                : 55 61 77 102
DEF                  : 2 3 4
DIVISION             : 87
DO                   : 65
DOT                  : 56 57 57 58 58 59 66 68 72 88
ELSE                 : 8 9
ELSIF                : 10
END                  : 2 3 4 6 7 8 9 16 65
EQUALS               : 114
FALSE                : 23 44
FLOAT                : 119
FOR                  : 
GETS                 : 57 58 59
GREATEROREQUALS      : 115
GREATERTHAN          : 112
HASH                 : 72
ID                   : 2 3 4 19 20 20 21 22 23 24 25 26 27 28 29 42 49 56 60 61 62 63 78 88 88 89 103 107 107 108 109 110 117 118
IF                   : 6 7 8 9
IN                   : 
INTEGER              : 120
LBRACE               : 64 73 74 81 82
LESSOREQUALS         : 116
LESSTHAN             : 113
LINKEDLIST           : 68
LPAREN               : 2 3 4 62 63 94
MINUS                : 84
MULTIPLICATION       : 86
NEW                  : 66 68 72
NODE                 : 
OPENBRACKET          : 67 99 100 109 110
PLUS                 : 83
POWER                : 85
PRINT                : 31
PUTS                 : 37
RBRACE               : 64 73 74 81 82
RETURN               : 36
RPAREN               : 2 3 4 62 63 94
STACK                : 66
STRING               : 53 75 79 121
THEN                 : 
TO_F                 : 57
TO_I                 : 58
TRUE                 : 22 43
WHILE                : 16
YIELD                : 4
error                : 

Nonterminals, with rules where they appear

argument             : 54 55
arguments            : 36 55 62
arithmeticOperator   : 93 94 96 97 98
array                : 26
arrayConcat          : 35
assignmentRule       : 30
attribute            : 28 51 91 106
blockFunction        : 
bodyLine             : 40 41
comparator           : 111
condition            : 6 7 8 9 10 16 21 46
conditionValue       : 101 102 111 111
conditional          : 5 11 12
conditionalElsif     : 7 9 14
creationHashmap      : 71
creationLinkedList   : 70
creationStack        : 69
creationTDA          : 24
dataType             : 45
element_list         : 99 102 109
elsif                : 13 14
functionCall         : 34 48 56
indexation           : 27 52 92 105
input                : 29
instruction          : 0
instructionBody      : 1 2 4 6 7 8 8 9 9 10 16 41 64 65
method               : 38 47
nestedConditional    : 12 32
nestedWhile          : 18 33
number               : 19 50 80 90 104 108 117 118 122
operation            : 95 96 97 98 110
operationValue       : 93 93 94 94 97 98
operations           : 25 96
pair                 : 76 77
pairs                : 73 77 81
parameters           : 2 61
printBody            : 31 37
unariOperator        : 39
value                : 75
whileLoop            : 15 17 18

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . DEF ID LPAREN RPAREN instructionBody YIELD END
    (5) instruction -> . conditional
    (15) instruction -> . whileLoop
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END
    (4) instruction -> DEF . ID LPAREN RPAREN instructionBody YIELD END

    ID              shift and go to state 20


state 4

    (19) assignmentRule -> ID . ASSIGNMENT number
    (20) assignmentRule -> ID . ASSIGNMENT ID
    (21) assignmentRule -> ID . ASSIGNMENT condition
    (22) assignmentRule -> ID . ASSIGNMENT TRUE
    (23) assignmentRule -> ID . ASSIGNMENT FALSE
    (24) assignmentRule -> ID . ASSIGNMENT creationTDA
    (25) assignmentRule -> ID . ASSIGNMENT operations
    (26) assignmentRule -> ID . ASSIGNMENT array
    (27) assignmentRule -> ID . ASSIGNMENT indexation
    (28) assignmentRule -> ID . ASSIGNMENT attribute
    (29) assignmentRule -> ID . ASSIGNMENT input
    (62) functionCall -> ID . LPAREN arguments RPAREN
    (63) functionCall -> ID . LPAREN RPAREN
    (107) arrayConcat -> ID . ARRAYAPPEND ID
    (108) arrayConcat -> ID . ARRAYAPPEND number
    (56) method -> ID . DOT functionCall
    (117) unariOperator -> ID . ASSIGNDECREMENT number
    (118) unariOperator -> ID . ASSIGNINCREMENT number

    ASSIGNMENT      shift and go to state 21
    LPAREN          shift and go to state 22
    ARRAYAPPEND     shift and go to state 23
    DOT             shift and go to state 24
    ASSIGNDECREMENT shift and go to state 25
    ASSIGNINCREMENT shift and go to state 26


state 5

    (5) instruction -> conditional .
    (11) nestedConditional -> conditional .
    (12) nestedConditional -> conditional . nestedConditional
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 5 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 5 (instruction -> conditional .)
    PRINT           reduce using rule 11 (nestedConditional -> conditional .)
    RETURN          reduce using rule 11 (nestedConditional -> conditional .)
    PUTS            reduce using rule 11 (nestedConditional -> conditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 11 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 11 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 27
    nestedConditional              shift and go to state 28

state 6

    (15) instruction -> whileLoop .
    (17) nestedWhile -> whileLoop .
    (18) nestedWhile -> whileLoop . nestedWhile
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (16) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 15 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 15 (instruction -> whileLoop .)
    PRINT           reduce using rule 17 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 17 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 17 (nestedWhile -> whileLoop .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 17 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 17 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 29
    nestedWhile                    shift and go to state 30

state 7

    (40) instructionBody -> bodyLine .
    (41) instructionBody -> bodyLine . instructionBody
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 40 (instructionBody -> bodyLine .)
    END             reduce using rule 40 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 40 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 40 (instructionBody -> bodyLine .)
    YIELD           reduce using rule 40 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 31
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 8

    (6) conditional -> IF . condition instructionBody END
    (7) conditional -> IF . condition instructionBody conditionalElsif END
    (8) conditional -> IF . condition instructionBody ELSE instructionBody END
    (9) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (111) condition -> . conditionValue comparator conditionValue
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    condition                      shift and go to state 32
    conditionValue                 shift and go to state 33
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 9

    (16) whileLoop -> WHILE . condition instructionBody END
    (111) condition -> . conditionValue comparator conditionValue
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    condition                      shift and go to state 40
    conditionValue                 shift and go to state 33
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 10

    (30) bodyLine -> assignmentRule .

    PRINT           reduce using rule 30 (bodyLine -> assignmentRule .)
    RETURN          reduce using rule 30 (bodyLine -> assignmentRule .)
    PUTS            reduce using rule 30 (bodyLine -> assignmentRule .)
    ID              reduce using rule 30 (bodyLine -> assignmentRule .)
    IF              reduce using rule 30 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 30 (bodyLine -> assignmentRule .)
    $end            reduce using rule 30 (bodyLine -> assignmentRule .)
    END             reduce using rule 30 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 30 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 30 (bodyLine -> assignmentRule .)
    YIELD           reduce using rule 30 (bodyLine -> assignmentRule .)


state 11

    (31) bodyLine -> PRINT . printBody
    (42) printBody -> . ID
    (43) printBody -> . TRUE
    (44) printBody -> . FALSE
    (45) printBody -> . dataType
    (46) printBody -> . condition
    (47) printBody -> . method
    (48) printBody -> . functionCall
    (121) dataType -> . STRING
    (122) dataType -> . number
    (111) condition -> . conditionValue comparator conditionValue
    (56) method -> . ID DOT functionCall
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    STRING          shift and go to state 49
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    printBody                      shift and go to state 41
    dataType                       shift and go to state 45
    condition                      shift and go to state 46
    method                         shift and go to state 47
    functionCall                   shift and go to state 48
    number                         shift and go to state 50
    conditionValue                 shift and go to state 33
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 12

    (32) bodyLine -> nestedConditional .

    PRINT           reduce using rule 32 (bodyLine -> nestedConditional .)
    RETURN          reduce using rule 32 (bodyLine -> nestedConditional .)
    PUTS            reduce using rule 32 (bodyLine -> nestedConditional .)
    ID              reduce using rule 32 (bodyLine -> nestedConditional .)
    IF              reduce using rule 32 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 32 (bodyLine -> nestedConditional .)
    $end            reduce using rule 32 (bodyLine -> nestedConditional .)
    END             reduce using rule 32 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 32 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 32 (bodyLine -> nestedConditional .)
    YIELD           reduce using rule 32 (bodyLine -> nestedConditional .)


state 13

    (33) bodyLine -> nestedWhile .

    PRINT           reduce using rule 33 (bodyLine -> nestedWhile .)
    RETURN          reduce using rule 33 (bodyLine -> nestedWhile .)
    PUTS            reduce using rule 33 (bodyLine -> nestedWhile .)
    ID              reduce using rule 33 (bodyLine -> nestedWhile .)
    IF              reduce using rule 33 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 33 (bodyLine -> nestedWhile .)
    $end            reduce using rule 33 (bodyLine -> nestedWhile .)
    END             reduce using rule 33 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 33 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 33 (bodyLine -> nestedWhile .)
    YIELD           reduce using rule 33 (bodyLine -> nestedWhile .)


state 14

    (34) bodyLine -> functionCall .

    PRINT           reduce using rule 34 (bodyLine -> functionCall .)
    RETURN          reduce using rule 34 (bodyLine -> functionCall .)
    PUTS            reduce using rule 34 (bodyLine -> functionCall .)
    ID              reduce using rule 34 (bodyLine -> functionCall .)
    IF              reduce using rule 34 (bodyLine -> functionCall .)
    WHILE           reduce using rule 34 (bodyLine -> functionCall .)
    $end            reduce using rule 34 (bodyLine -> functionCall .)
    END             reduce using rule 34 (bodyLine -> functionCall .)
    ELSE            reduce using rule 34 (bodyLine -> functionCall .)
    ELSIF           reduce using rule 34 (bodyLine -> functionCall .)
    YIELD           reduce using rule 34 (bodyLine -> functionCall .)


state 15

    (35) bodyLine -> arrayConcat .

    PRINT           reduce using rule 35 (bodyLine -> arrayConcat .)
    RETURN          reduce using rule 35 (bodyLine -> arrayConcat .)
    PUTS            reduce using rule 35 (bodyLine -> arrayConcat .)
    ID              reduce using rule 35 (bodyLine -> arrayConcat .)
    IF              reduce using rule 35 (bodyLine -> arrayConcat .)
    WHILE           reduce using rule 35 (bodyLine -> arrayConcat .)
    $end            reduce using rule 35 (bodyLine -> arrayConcat .)
    END             reduce using rule 35 (bodyLine -> arrayConcat .)
    ELSE            reduce using rule 35 (bodyLine -> arrayConcat .)
    ELSIF           reduce using rule 35 (bodyLine -> arrayConcat .)
    YIELD           reduce using rule 35 (bodyLine -> arrayConcat .)


state 16

    (36) bodyLine -> RETURN . arguments
    (54) arguments -> . argument
    (55) arguments -> . argument COMMA arguments
    (49) argument -> . ID
    (50) argument -> . number
    (51) argument -> . attribute
    (52) argument -> . indexation
    (53) argument -> . STRING
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 53
    STRING          shift and go to state 57
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    arguments                      shift and go to state 51
    argument                       shift and go to state 52
    number                         shift and go to state 54
    attribute                      shift and go to state 55
    indexation                     shift and go to state 56

state 17

    (37) bodyLine -> PUTS . printBody
    (42) printBody -> . ID
    (43) printBody -> . TRUE
    (44) printBody -> . FALSE
    (45) printBody -> . dataType
    (46) printBody -> . condition
    (47) printBody -> . method
    (48) printBody -> . functionCall
    (121) dataType -> . STRING
    (122) dataType -> . number
    (111) condition -> . conditionValue comparator conditionValue
    (56) method -> . ID DOT functionCall
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    STRING          shift and go to state 49
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    printBody                      shift and go to state 58
    dataType                       shift and go to state 45
    condition                      shift and go to state 46
    method                         shift and go to state 47
    functionCall                   shift and go to state 48
    number                         shift and go to state 50
    conditionValue                 shift and go to state 33
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 18

    (38) bodyLine -> method .

    PRINT           reduce using rule 38 (bodyLine -> method .)
    RETURN          reduce using rule 38 (bodyLine -> method .)
    PUTS            reduce using rule 38 (bodyLine -> method .)
    ID              reduce using rule 38 (bodyLine -> method .)
    IF              reduce using rule 38 (bodyLine -> method .)
    WHILE           reduce using rule 38 (bodyLine -> method .)
    $end            reduce using rule 38 (bodyLine -> method .)
    END             reduce using rule 38 (bodyLine -> method .)
    ELSE            reduce using rule 38 (bodyLine -> method .)
    ELSIF           reduce using rule 38 (bodyLine -> method .)
    YIELD           reduce using rule 38 (bodyLine -> method .)


state 19

    (39) bodyLine -> unariOperator .

    PRINT           reduce using rule 39 (bodyLine -> unariOperator .)
    RETURN          reduce using rule 39 (bodyLine -> unariOperator .)
    PUTS            reduce using rule 39 (bodyLine -> unariOperator .)
    ID              reduce using rule 39 (bodyLine -> unariOperator .)
    IF              reduce using rule 39 (bodyLine -> unariOperator .)
    WHILE           reduce using rule 39 (bodyLine -> unariOperator .)
    $end            reduce using rule 39 (bodyLine -> unariOperator .)
    END             reduce using rule 39 (bodyLine -> unariOperator .)
    ELSE            reduce using rule 39 (bodyLine -> unariOperator .)
    ELSIF           reduce using rule 39 (bodyLine -> unariOperator .)
    YIELD           reduce using rule 39 (bodyLine -> unariOperator .)


state 20

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END
    (4) instruction -> DEF ID . LPAREN RPAREN instructionBody YIELD END

    LPAREN          shift and go to state 59


state 21

    (19) assignmentRule -> ID ASSIGNMENT . number
    (20) assignmentRule -> ID ASSIGNMENT . ID
    (21) assignmentRule -> ID ASSIGNMENT . condition
    (22) assignmentRule -> ID ASSIGNMENT . TRUE
    (23) assignmentRule -> ID ASSIGNMENT . FALSE
    (24) assignmentRule -> ID ASSIGNMENT . creationTDA
    (25) assignmentRule -> ID ASSIGNMENT . operations
    (26) assignmentRule -> ID ASSIGNMENT . array
    (27) assignmentRule -> ID ASSIGNMENT . indexation
    (28) assignmentRule -> ID ASSIGNMENT . attribute
    (29) assignmentRule -> ID ASSIGNMENT . input
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (111) condition -> . conditionValue comparator conditionValue
    (69) creationTDA -> . creationStack
    (70) creationTDA -> . creationLinkedList
    (71) creationTDA -> . creationHashmap
    (95) operations -> . operation
    (96) operations -> . operation arithmeticOperator operations
    (97) operations -> . operation arithmeticOperator operationValue
    (98) operations -> . operationValue arithmeticOperator operation
    (99) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (100) array -> . OPENBRACKET CLOSEDBRACKET
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID
    (57) input -> . GETS DOT CHOMP DOT TO_F
    (58) input -> . GETS DOT CHOMP DOT TO_I
    (59) input -> . GETS DOT CHOMP
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (66) creationStack -> . STACK DOT NEW
    (67) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (68) creationLinkedList -> . LINKEDLIST DOT NEW
    (72) creationHashmap -> . HASH DOT NEW
    (73) creationHashmap -> . LBRACE pairs RBRACE
    (74) creationHashmap -> . LBRACE RBRACE
    (93) operation -> . operationValue arithmeticOperator operationValue
    (94) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation

    ID              shift and go to state 60
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39
    OPENBRACKET     shift and go to state 76
    GETS            shift and go to state 77
    STACK           shift and go to state 78
    LINKEDLIST      shift and go to state 79
    HASH            shift and go to state 80
    LBRACE          shift and go to state 81
    LPAREN          shift and go to state 82

    number                         shift and go to state 61
    condition                      shift and go to state 62
    creationTDA                    shift and go to state 65
    operations                     shift and go to state 66
    array                          shift and go to state 67
    indexation                     shift and go to state 68
    attribute                      shift and go to state 69
    input                          shift and go to state 70
    conditionValue                 shift and go to state 33
    creationStack                  shift and go to state 71
    creationLinkedList             shift and go to state 72
    creationHashmap                shift and go to state 73
    operation                      shift and go to state 74
    operationValue                 shift and go to state 75

state 22

    (62) functionCall -> ID LPAREN . arguments RPAREN
    (63) functionCall -> ID LPAREN . RPAREN
    (54) arguments -> . argument
    (55) arguments -> . argument COMMA arguments
    (49) argument -> . ID
    (50) argument -> . number
    (51) argument -> . attribute
    (52) argument -> . indexation
    (53) argument -> . STRING
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    RPAREN          shift and go to state 84
    ID              shift and go to state 53
    STRING          shift and go to state 57
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    arguments                      shift and go to state 83
    argument                       shift and go to state 52
    number                         shift and go to state 54
    attribute                      shift and go to state 55
    indexation                     shift and go to state 56

state 23

    (107) arrayConcat -> ID ARRAYAPPEND . ID
    (108) arrayConcat -> ID ARRAYAPPEND . number
    (119) number -> . FLOAT
    (120) number -> . INTEGER

    ID              shift and go to state 85
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    number                         shift and go to state 86

state 24

    (56) method -> ID DOT . functionCall
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 87

    functionCall                   shift and go to state 88

state 25

    (117) unariOperator -> ID ASSIGNDECREMENT . number
    (119) number -> . FLOAT
    (120) number -> . INTEGER

    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    number                         shift and go to state 89

state 26

    (118) unariOperator -> ID ASSIGNINCREMENT . number
    (119) number -> . FLOAT
    (120) number -> . INTEGER

    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    number                         shift and go to state 90

state 27

    (11) nestedConditional -> conditional .
    (12) nestedConditional -> conditional . nestedConditional
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 11 (nestedConditional -> conditional .)
    RETURN          reduce using rule 11 (nestedConditional -> conditional .)
    PUTS            reduce using rule 11 (nestedConditional -> conditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional .)
    END             reduce using rule 11 (nestedConditional -> conditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional .)
    YIELD           reduce using rule 11 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 11 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 27
    nestedConditional              shift and go to state 28

state 28

    (12) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    RETURN          reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    PUTS            reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 12 (nestedConditional -> conditional nestedConditional .)
    YIELD           reduce using rule 12 (nestedConditional -> conditional nestedConditional .)


state 29

    (17) nestedWhile -> whileLoop .
    (18) nestedWhile -> whileLoop . nestedWhile
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (16) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 17 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 17 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 17 (nestedWhile -> whileLoop .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop .)
    END             reduce using rule 17 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop .)
    YIELD           reduce using rule 17 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 17 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 29
    nestedWhile                    shift and go to state 30

state 30

    (18) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    RETURN          reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    PUTS            reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)
    YIELD           reduce using rule 18 (nestedWhile -> whileLoop nestedWhile .)


state 31

    (41) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 41 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 41 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 41 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 41 (instructionBody -> bodyLine instructionBody .)
    YIELD           reduce using rule 41 (instructionBody -> bodyLine instructionBody .)


state 32

    (6) conditional -> IF condition . instructionBody END
    (7) conditional -> IF condition . instructionBody conditionalElsif END
    (8) conditional -> IF condition . instructionBody ELSE instructionBody END
    (9) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 91
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 33

    (111) condition -> conditionValue . comparator conditionValue
    (112) comparator -> . GREATERTHAN
    (113) comparator -> . LESSTHAN
    (114) comparator -> . EQUALS
    (115) comparator -> . GREATEROREQUALS
    (116) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 93
    LESSTHAN        shift and go to state 94
    EQUALS          shift and go to state 95
    GREATEROREQUALS shift and go to state 96
    LESSOREQUALS    shift and go to state 97

    comparator                     shift and go to state 92

state 34

    (103) conditionValue -> ID .
    (109) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> ID . DOT ID

    GREATERTHAN     reduce using rule 103 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 103 (conditionValue -> ID .)
    EQUALS          reduce using rule 103 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 103 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 103 (conditionValue -> ID .)
    CLOSEDBRACKET   reduce using rule 103 (conditionValue -> ID .)
    COMMA           reduce using rule 103 (conditionValue -> ID .)
    PRINT           reduce using rule 103 (conditionValue -> ID .)
    RETURN          reduce using rule 103 (conditionValue -> ID .)
    PUTS            reduce using rule 103 (conditionValue -> ID .)
    ID              reduce using rule 103 (conditionValue -> ID .)
    IF              reduce using rule 103 (conditionValue -> ID .)
    WHILE           reduce using rule 103 (conditionValue -> ID .)
    $end            reduce using rule 103 (conditionValue -> ID .)
    END             reduce using rule 103 (conditionValue -> ID .)
    ELSE            reduce using rule 103 (conditionValue -> ID .)
    ELSIF           reduce using rule 103 (conditionValue -> ID .)
    YIELD           reduce using rule 103 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 98
    DOT             shift and go to state 99


state 35

    (104) conditionValue -> number .

    GREATERTHAN     reduce using rule 104 (conditionValue -> number .)
    LESSTHAN        reduce using rule 104 (conditionValue -> number .)
    EQUALS          reduce using rule 104 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 104 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 104 (conditionValue -> number .)
    CLOSEDBRACKET   reduce using rule 104 (conditionValue -> number .)
    COMMA           reduce using rule 104 (conditionValue -> number .)
    PRINT           reduce using rule 104 (conditionValue -> number .)
    RETURN          reduce using rule 104 (conditionValue -> number .)
    PUTS            reduce using rule 104 (conditionValue -> number .)
    ID              reduce using rule 104 (conditionValue -> number .)
    IF              reduce using rule 104 (conditionValue -> number .)
    WHILE           reduce using rule 104 (conditionValue -> number .)
    $end            reduce using rule 104 (conditionValue -> number .)
    END             reduce using rule 104 (conditionValue -> number .)
    ELSE            reduce using rule 104 (conditionValue -> number .)
    ELSIF           reduce using rule 104 (conditionValue -> number .)
    YIELD           reduce using rule 104 (conditionValue -> number .)


state 36

    (105) conditionValue -> indexation .

    GREATERTHAN     reduce using rule 105 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 105 (conditionValue -> indexation .)
    EQUALS          reduce using rule 105 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 105 (conditionValue -> indexation .)
    COMMA           reduce using rule 105 (conditionValue -> indexation .)
    PRINT           reduce using rule 105 (conditionValue -> indexation .)
    RETURN          reduce using rule 105 (conditionValue -> indexation .)
    PUTS            reduce using rule 105 (conditionValue -> indexation .)
    ID              reduce using rule 105 (conditionValue -> indexation .)
    IF              reduce using rule 105 (conditionValue -> indexation .)
    WHILE           reduce using rule 105 (conditionValue -> indexation .)
    $end            reduce using rule 105 (conditionValue -> indexation .)
    END             reduce using rule 105 (conditionValue -> indexation .)
    ELSE            reduce using rule 105 (conditionValue -> indexation .)
    ELSIF           reduce using rule 105 (conditionValue -> indexation .)
    YIELD           reduce using rule 105 (conditionValue -> indexation .)


state 37

    (106) conditionValue -> attribute .

    GREATERTHAN     reduce using rule 106 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 106 (conditionValue -> attribute .)
    EQUALS          reduce using rule 106 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 106 (conditionValue -> attribute .)
    COMMA           reduce using rule 106 (conditionValue -> attribute .)
    PRINT           reduce using rule 106 (conditionValue -> attribute .)
    RETURN          reduce using rule 106 (conditionValue -> attribute .)
    PUTS            reduce using rule 106 (conditionValue -> attribute .)
    ID              reduce using rule 106 (conditionValue -> attribute .)
    IF              reduce using rule 106 (conditionValue -> attribute .)
    WHILE           reduce using rule 106 (conditionValue -> attribute .)
    $end            reduce using rule 106 (conditionValue -> attribute .)
    END             reduce using rule 106 (conditionValue -> attribute .)
    ELSE            reduce using rule 106 (conditionValue -> attribute .)
    ELSIF           reduce using rule 106 (conditionValue -> attribute .)
    YIELD           reduce using rule 106 (conditionValue -> attribute .)


state 38

    (119) number -> FLOAT .

    GREATERTHAN     reduce using rule 119 (number -> FLOAT .)
    LESSTHAN        reduce using rule 119 (number -> FLOAT .)
    EQUALS          reduce using rule 119 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 119 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 119 (number -> FLOAT .)
    PRINT           reduce using rule 119 (number -> FLOAT .)
    RETURN          reduce using rule 119 (number -> FLOAT .)
    PUTS            reduce using rule 119 (number -> FLOAT .)
    ID              reduce using rule 119 (number -> FLOAT .)
    IF              reduce using rule 119 (number -> FLOAT .)
    WHILE           reduce using rule 119 (number -> FLOAT .)
    $end            reduce using rule 119 (number -> FLOAT .)
    END             reduce using rule 119 (number -> FLOAT .)
    ELSE            reduce using rule 119 (number -> FLOAT .)
    ELSIF           reduce using rule 119 (number -> FLOAT .)
    YIELD           reduce using rule 119 (number -> FLOAT .)
    COMMA           reduce using rule 119 (number -> FLOAT .)
    PLUS            reduce using rule 119 (number -> FLOAT .)
    MINUS           reduce using rule 119 (number -> FLOAT .)
    POWER           reduce using rule 119 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 119 (number -> FLOAT .)
    DIVISION        reduce using rule 119 (number -> FLOAT .)
    RPAREN          reduce using rule 119 (number -> FLOAT .)
    CLOSEDBRACKET   reduce using rule 119 (number -> FLOAT .)
    RBRACE          reduce using rule 119 (number -> FLOAT .)


state 39

    (120) number -> INTEGER .

    GREATERTHAN     reduce using rule 120 (number -> INTEGER .)
    LESSTHAN        reduce using rule 120 (number -> INTEGER .)
    EQUALS          reduce using rule 120 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 120 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 120 (number -> INTEGER .)
    PRINT           reduce using rule 120 (number -> INTEGER .)
    RETURN          reduce using rule 120 (number -> INTEGER .)
    PUTS            reduce using rule 120 (number -> INTEGER .)
    ID              reduce using rule 120 (number -> INTEGER .)
    IF              reduce using rule 120 (number -> INTEGER .)
    WHILE           reduce using rule 120 (number -> INTEGER .)
    $end            reduce using rule 120 (number -> INTEGER .)
    END             reduce using rule 120 (number -> INTEGER .)
    ELSE            reduce using rule 120 (number -> INTEGER .)
    ELSIF           reduce using rule 120 (number -> INTEGER .)
    YIELD           reduce using rule 120 (number -> INTEGER .)
    COMMA           reduce using rule 120 (number -> INTEGER .)
    PLUS            reduce using rule 120 (number -> INTEGER .)
    MINUS           reduce using rule 120 (number -> INTEGER .)
    POWER           reduce using rule 120 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 120 (number -> INTEGER .)
    DIVISION        reduce using rule 120 (number -> INTEGER .)
    RPAREN          reduce using rule 120 (number -> INTEGER .)
    CLOSEDBRACKET   reduce using rule 120 (number -> INTEGER .)
    RBRACE          reduce using rule 120 (number -> INTEGER .)


state 40

    (16) whileLoop -> WHILE condition . instructionBody END
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 100
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 41

    (31) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 31 (bodyLine -> PRINT printBody .)
    RETURN          reduce using rule 31 (bodyLine -> PRINT printBody .)
    PUTS            reduce using rule 31 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 31 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 31 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 31 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 31 (bodyLine -> PRINT printBody .)
    END             reduce using rule 31 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 31 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 31 (bodyLine -> PRINT printBody .)
    YIELD           reduce using rule 31 (bodyLine -> PRINT printBody .)


state 42

    (42) printBody -> ID .
    (56) method -> ID . DOT functionCall
    (62) functionCall -> ID . LPAREN arguments RPAREN
    (63) functionCall -> ID . LPAREN RPAREN
    (103) conditionValue -> ID .
    (109) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> ID . DOT ID

    PRINT           reduce using rule 42 (printBody -> ID .)
    RETURN          reduce using rule 42 (printBody -> ID .)
    PUTS            reduce using rule 42 (printBody -> ID .)
    ID              reduce using rule 42 (printBody -> ID .)
    IF              reduce using rule 42 (printBody -> ID .)
    WHILE           reduce using rule 42 (printBody -> ID .)
    $end            reduce using rule 42 (printBody -> ID .)
    END             reduce using rule 42 (printBody -> ID .)
    ELSE            reduce using rule 42 (printBody -> ID .)
    ELSIF           reduce using rule 42 (printBody -> ID .)
    YIELD           reduce using rule 42 (printBody -> ID .)
    DOT             shift and go to state 101
    LPAREN          shift and go to state 22
    GREATERTHAN     reduce using rule 103 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 103 (conditionValue -> ID .)
    EQUALS          reduce using rule 103 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 103 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 103 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 98


state 43

    (43) printBody -> TRUE .

    PRINT           reduce using rule 43 (printBody -> TRUE .)
    RETURN          reduce using rule 43 (printBody -> TRUE .)
    PUTS            reduce using rule 43 (printBody -> TRUE .)
    ID              reduce using rule 43 (printBody -> TRUE .)
    IF              reduce using rule 43 (printBody -> TRUE .)
    WHILE           reduce using rule 43 (printBody -> TRUE .)
    $end            reduce using rule 43 (printBody -> TRUE .)
    END             reduce using rule 43 (printBody -> TRUE .)
    ELSE            reduce using rule 43 (printBody -> TRUE .)
    ELSIF           reduce using rule 43 (printBody -> TRUE .)
    YIELD           reduce using rule 43 (printBody -> TRUE .)


state 44

    (44) printBody -> FALSE .

    PRINT           reduce using rule 44 (printBody -> FALSE .)
    RETURN          reduce using rule 44 (printBody -> FALSE .)
    PUTS            reduce using rule 44 (printBody -> FALSE .)
    ID              reduce using rule 44 (printBody -> FALSE .)
    IF              reduce using rule 44 (printBody -> FALSE .)
    WHILE           reduce using rule 44 (printBody -> FALSE .)
    $end            reduce using rule 44 (printBody -> FALSE .)
    END             reduce using rule 44 (printBody -> FALSE .)
    ELSE            reduce using rule 44 (printBody -> FALSE .)
    ELSIF           reduce using rule 44 (printBody -> FALSE .)
    YIELD           reduce using rule 44 (printBody -> FALSE .)


state 45

    (45) printBody -> dataType .

    PRINT           reduce using rule 45 (printBody -> dataType .)
    RETURN          reduce using rule 45 (printBody -> dataType .)
    PUTS            reduce using rule 45 (printBody -> dataType .)
    ID              reduce using rule 45 (printBody -> dataType .)
    IF              reduce using rule 45 (printBody -> dataType .)
    WHILE           reduce using rule 45 (printBody -> dataType .)
    $end            reduce using rule 45 (printBody -> dataType .)
    END             reduce using rule 45 (printBody -> dataType .)
    ELSE            reduce using rule 45 (printBody -> dataType .)
    ELSIF           reduce using rule 45 (printBody -> dataType .)
    YIELD           reduce using rule 45 (printBody -> dataType .)


state 46

    (46) printBody -> condition .

    PRINT           reduce using rule 46 (printBody -> condition .)
    RETURN          reduce using rule 46 (printBody -> condition .)
    PUTS            reduce using rule 46 (printBody -> condition .)
    ID              reduce using rule 46 (printBody -> condition .)
    IF              reduce using rule 46 (printBody -> condition .)
    WHILE           reduce using rule 46 (printBody -> condition .)
    $end            reduce using rule 46 (printBody -> condition .)
    END             reduce using rule 46 (printBody -> condition .)
    ELSE            reduce using rule 46 (printBody -> condition .)
    ELSIF           reduce using rule 46 (printBody -> condition .)
    YIELD           reduce using rule 46 (printBody -> condition .)


state 47

    (47) printBody -> method .

    PRINT           reduce using rule 47 (printBody -> method .)
    RETURN          reduce using rule 47 (printBody -> method .)
    PUTS            reduce using rule 47 (printBody -> method .)
    ID              reduce using rule 47 (printBody -> method .)
    IF              reduce using rule 47 (printBody -> method .)
    WHILE           reduce using rule 47 (printBody -> method .)
    $end            reduce using rule 47 (printBody -> method .)
    END             reduce using rule 47 (printBody -> method .)
    ELSE            reduce using rule 47 (printBody -> method .)
    ELSIF           reduce using rule 47 (printBody -> method .)
    YIELD           reduce using rule 47 (printBody -> method .)


state 48

    (48) printBody -> functionCall .

    PRINT           reduce using rule 48 (printBody -> functionCall .)
    RETURN          reduce using rule 48 (printBody -> functionCall .)
    PUTS            reduce using rule 48 (printBody -> functionCall .)
    ID              reduce using rule 48 (printBody -> functionCall .)
    IF              reduce using rule 48 (printBody -> functionCall .)
    WHILE           reduce using rule 48 (printBody -> functionCall .)
    $end            reduce using rule 48 (printBody -> functionCall .)
    END             reduce using rule 48 (printBody -> functionCall .)
    ELSE            reduce using rule 48 (printBody -> functionCall .)
    ELSIF           reduce using rule 48 (printBody -> functionCall .)
    YIELD           reduce using rule 48 (printBody -> functionCall .)


state 49

    (121) dataType -> STRING .

    PRINT           reduce using rule 121 (dataType -> STRING .)
    RETURN          reduce using rule 121 (dataType -> STRING .)
    PUTS            reduce using rule 121 (dataType -> STRING .)
    ID              reduce using rule 121 (dataType -> STRING .)
    IF              reduce using rule 121 (dataType -> STRING .)
    WHILE           reduce using rule 121 (dataType -> STRING .)
    $end            reduce using rule 121 (dataType -> STRING .)
    END             reduce using rule 121 (dataType -> STRING .)
    ELSE            reduce using rule 121 (dataType -> STRING .)
    ELSIF           reduce using rule 121 (dataType -> STRING .)
    YIELD           reduce using rule 121 (dataType -> STRING .)


state 50

    (122) dataType -> number .
    (104) conditionValue -> number .

    PRINT           reduce using rule 122 (dataType -> number .)
    RETURN          reduce using rule 122 (dataType -> number .)
    PUTS            reduce using rule 122 (dataType -> number .)
    ID              reduce using rule 122 (dataType -> number .)
    IF              reduce using rule 122 (dataType -> number .)
    WHILE           reduce using rule 122 (dataType -> number .)
    $end            reduce using rule 122 (dataType -> number .)
    END             reduce using rule 122 (dataType -> number .)
    ELSE            reduce using rule 122 (dataType -> number .)
    ELSIF           reduce using rule 122 (dataType -> number .)
    YIELD           reduce using rule 122 (dataType -> number .)
    GREATERTHAN     reduce using rule 104 (conditionValue -> number .)
    LESSTHAN        reduce using rule 104 (conditionValue -> number .)
    EQUALS          reduce using rule 104 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 104 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 104 (conditionValue -> number .)


state 51

    (36) bodyLine -> RETURN arguments .

    PRINT           reduce using rule 36 (bodyLine -> RETURN arguments .)
    RETURN          reduce using rule 36 (bodyLine -> RETURN arguments .)
    PUTS            reduce using rule 36 (bodyLine -> RETURN arguments .)
    ID              reduce using rule 36 (bodyLine -> RETURN arguments .)
    IF              reduce using rule 36 (bodyLine -> RETURN arguments .)
    WHILE           reduce using rule 36 (bodyLine -> RETURN arguments .)
    $end            reduce using rule 36 (bodyLine -> RETURN arguments .)
    END             reduce using rule 36 (bodyLine -> RETURN arguments .)
    ELSE            reduce using rule 36 (bodyLine -> RETURN arguments .)
    ELSIF           reduce using rule 36 (bodyLine -> RETURN arguments .)
    YIELD           reduce using rule 36 (bodyLine -> RETURN arguments .)


state 52

    (54) arguments -> argument .
    (55) arguments -> argument . COMMA arguments

    PRINT           reduce using rule 54 (arguments -> argument .)
    RETURN          reduce using rule 54 (arguments -> argument .)
    PUTS            reduce using rule 54 (arguments -> argument .)
    ID              reduce using rule 54 (arguments -> argument .)
    IF              reduce using rule 54 (arguments -> argument .)
    WHILE           reduce using rule 54 (arguments -> argument .)
    $end            reduce using rule 54 (arguments -> argument .)
    END             reduce using rule 54 (arguments -> argument .)
    ELSE            reduce using rule 54 (arguments -> argument .)
    ELSIF           reduce using rule 54 (arguments -> argument .)
    YIELD           reduce using rule 54 (arguments -> argument .)
    RPAREN          reduce using rule 54 (arguments -> argument .)
    COMMA           shift and go to state 102


state 53

    (49) argument -> ID .
    (88) attribute -> ID . DOT ID
    (109) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    COMMA           reduce using rule 49 (argument -> ID .)
    PRINT           reduce using rule 49 (argument -> ID .)
    RETURN          reduce using rule 49 (argument -> ID .)
    PUTS            reduce using rule 49 (argument -> ID .)
    ID              reduce using rule 49 (argument -> ID .)
    IF              reduce using rule 49 (argument -> ID .)
    WHILE           reduce using rule 49 (argument -> ID .)
    $end            reduce using rule 49 (argument -> ID .)
    END             reduce using rule 49 (argument -> ID .)
    ELSE            reduce using rule 49 (argument -> ID .)
    ELSIF           reduce using rule 49 (argument -> ID .)
    YIELD           reduce using rule 49 (argument -> ID .)
    RPAREN          reduce using rule 49 (argument -> ID .)
    DOT             shift and go to state 99
    OPENBRACKET     shift and go to state 98


state 54

    (50) argument -> number .

    COMMA           reduce using rule 50 (argument -> number .)
    PRINT           reduce using rule 50 (argument -> number .)
    RETURN          reduce using rule 50 (argument -> number .)
    PUTS            reduce using rule 50 (argument -> number .)
    ID              reduce using rule 50 (argument -> number .)
    IF              reduce using rule 50 (argument -> number .)
    WHILE           reduce using rule 50 (argument -> number .)
    $end            reduce using rule 50 (argument -> number .)
    END             reduce using rule 50 (argument -> number .)
    ELSE            reduce using rule 50 (argument -> number .)
    ELSIF           reduce using rule 50 (argument -> number .)
    YIELD           reduce using rule 50 (argument -> number .)
    RPAREN          reduce using rule 50 (argument -> number .)


state 55

    (51) argument -> attribute .

    COMMA           reduce using rule 51 (argument -> attribute .)
    PRINT           reduce using rule 51 (argument -> attribute .)
    RETURN          reduce using rule 51 (argument -> attribute .)
    PUTS            reduce using rule 51 (argument -> attribute .)
    ID              reduce using rule 51 (argument -> attribute .)
    IF              reduce using rule 51 (argument -> attribute .)
    WHILE           reduce using rule 51 (argument -> attribute .)
    $end            reduce using rule 51 (argument -> attribute .)
    END             reduce using rule 51 (argument -> attribute .)
    ELSE            reduce using rule 51 (argument -> attribute .)
    ELSIF           reduce using rule 51 (argument -> attribute .)
    YIELD           reduce using rule 51 (argument -> attribute .)
    RPAREN          reduce using rule 51 (argument -> attribute .)


state 56

    (52) argument -> indexation .

    COMMA           reduce using rule 52 (argument -> indexation .)
    PRINT           reduce using rule 52 (argument -> indexation .)
    RETURN          reduce using rule 52 (argument -> indexation .)
    PUTS            reduce using rule 52 (argument -> indexation .)
    ID              reduce using rule 52 (argument -> indexation .)
    IF              reduce using rule 52 (argument -> indexation .)
    WHILE           reduce using rule 52 (argument -> indexation .)
    $end            reduce using rule 52 (argument -> indexation .)
    END             reduce using rule 52 (argument -> indexation .)
    ELSE            reduce using rule 52 (argument -> indexation .)
    ELSIF           reduce using rule 52 (argument -> indexation .)
    YIELD           reduce using rule 52 (argument -> indexation .)
    RPAREN          reduce using rule 52 (argument -> indexation .)


state 57

    (53) argument -> STRING .

    COMMA           reduce using rule 53 (argument -> STRING .)
    PRINT           reduce using rule 53 (argument -> STRING .)
    RETURN          reduce using rule 53 (argument -> STRING .)
    PUTS            reduce using rule 53 (argument -> STRING .)
    ID              reduce using rule 53 (argument -> STRING .)
    IF              reduce using rule 53 (argument -> STRING .)
    WHILE           reduce using rule 53 (argument -> STRING .)
    $end            reduce using rule 53 (argument -> STRING .)
    END             reduce using rule 53 (argument -> STRING .)
    ELSE            reduce using rule 53 (argument -> STRING .)
    ELSIF           reduce using rule 53 (argument -> STRING .)
    YIELD           reduce using rule 53 (argument -> STRING .)
    RPAREN          reduce using rule 53 (argument -> STRING .)


state 58

    (37) bodyLine -> PUTS printBody .

    PRINT           reduce using rule 37 (bodyLine -> PUTS printBody .)
    RETURN          reduce using rule 37 (bodyLine -> PUTS printBody .)
    PUTS            reduce using rule 37 (bodyLine -> PUTS printBody .)
    ID              reduce using rule 37 (bodyLine -> PUTS printBody .)
    IF              reduce using rule 37 (bodyLine -> PUTS printBody .)
    WHILE           reduce using rule 37 (bodyLine -> PUTS printBody .)
    $end            reduce using rule 37 (bodyLine -> PUTS printBody .)
    END             reduce using rule 37 (bodyLine -> PUTS printBody .)
    ELSE            reduce using rule 37 (bodyLine -> PUTS printBody .)
    ELSIF           reduce using rule 37 (bodyLine -> PUTS printBody .)
    YIELD           reduce using rule 37 (bodyLine -> PUTS printBody .)


state 59

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (4) instruction -> DEF ID LPAREN . RPAREN instructionBody YIELD END
    (60) parameters -> . ID
    (61) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 105
    ID              shift and go to state 103

    parameters                     shift and go to state 104

state 60

    (20) assignmentRule -> ID ASSIGNMENT ID .
    (109) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> ID . DOT ID
    (103) conditionValue -> ID .
    (89) operationValue -> ID .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    RETURN          reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    PUTS            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    YIELD           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    OPENBRACKET     shift and go to state 98
    DOT             shift and go to state 99
    GREATERTHAN     reduce using rule 103 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 103 (conditionValue -> ID .)
    EQUALS          reduce using rule 103 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 103 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 103 (conditionValue -> ID .)
    PLUS            reduce using rule 89 (operationValue -> ID .)
    MINUS           reduce using rule 89 (operationValue -> ID .)
    POWER           reduce using rule 89 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 89 (operationValue -> ID .)
    DIVISION        reduce using rule 89 (operationValue -> ID .)


state 61

    (19) assignmentRule -> ID ASSIGNMENT number .
    (104) conditionValue -> number .
    (90) operationValue -> number .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    RETURN          reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    PUTS            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    YIELD           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 104 (conditionValue -> number .)
    LESSTHAN        reduce using rule 104 (conditionValue -> number .)
    EQUALS          reduce using rule 104 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 104 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 104 (conditionValue -> number .)
    PLUS            reduce using rule 90 (operationValue -> number .)
    MINUS           reduce using rule 90 (operationValue -> number .)
    POWER           reduce using rule 90 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 90 (operationValue -> number .)
    DIVISION        reduce using rule 90 (operationValue -> number .)


state 62

    (21) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    RETURN          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    PUTS            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    YIELD           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)


state 63

    (22) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RETURN          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    PUTS            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    YIELD           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 64

    (23) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RETURN          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    PUTS            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    YIELD           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 65

    (24) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RETURN          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    PUTS            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    YIELD           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 66

    (25) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    RETURN          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    PUTS            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    YIELD           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)


state 67

    (26) assignmentRule -> ID ASSIGNMENT array .

    PRINT           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    RETURN          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    PUTS            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    ID              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    IF              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    WHILE           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    $end            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    END             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    ELSE            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    ELSIF           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    YIELD           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)


state 68

    (27) assignmentRule -> ID ASSIGNMENT indexation .
    (105) conditionValue -> indexation .
    (92) operationValue -> indexation .

    PRINT           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    RETURN          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    PUTS            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    ID              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    IF              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    WHILE           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    $end            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    END             reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSE            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSIF           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    YIELD           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    GREATERTHAN     reduce using rule 105 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 105 (conditionValue -> indexation .)
    EQUALS          reduce using rule 105 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> indexation .)
    PLUS            reduce using rule 92 (operationValue -> indexation .)
    MINUS           reduce using rule 92 (operationValue -> indexation .)
    POWER           reduce using rule 92 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> indexation .)
    DIVISION        reduce using rule 92 (operationValue -> indexation .)


state 69

    (28) assignmentRule -> ID ASSIGNMENT attribute .
    (106) conditionValue -> attribute .
    (91) operationValue -> attribute .

    PRINT           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    RETURN          reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    PUTS            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    ID              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    IF              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    WHILE           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    $end            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    END             reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSE            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSIF           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    YIELD           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    GREATERTHAN     reduce using rule 106 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 106 (conditionValue -> attribute .)
    EQUALS          reduce using rule 106 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> attribute .)
    PLUS            reduce using rule 91 (operationValue -> attribute .)
    MINUS           reduce using rule 91 (operationValue -> attribute .)
    POWER           reduce using rule 91 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> attribute .)
    DIVISION        reduce using rule 91 (operationValue -> attribute .)


state 70

    (29) assignmentRule -> ID ASSIGNMENT input .

    PRINT           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    RETURN          reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    PUTS            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    ID              reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    IF              reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    WHILE           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    $end            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    END             reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    ELSE            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    ELSIF           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    YIELD           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)


state 71

    (69) creationTDA -> creationStack .

    PRINT           reduce using rule 69 (creationTDA -> creationStack .)
    RETURN          reduce using rule 69 (creationTDA -> creationStack .)
    PUTS            reduce using rule 69 (creationTDA -> creationStack .)
    ID              reduce using rule 69 (creationTDA -> creationStack .)
    IF              reduce using rule 69 (creationTDA -> creationStack .)
    WHILE           reduce using rule 69 (creationTDA -> creationStack .)
    $end            reduce using rule 69 (creationTDA -> creationStack .)
    END             reduce using rule 69 (creationTDA -> creationStack .)
    ELSE            reduce using rule 69 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 69 (creationTDA -> creationStack .)
    YIELD           reduce using rule 69 (creationTDA -> creationStack .)


state 72

    (70) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 70 (creationTDA -> creationLinkedList .)
    RETURN          reduce using rule 70 (creationTDA -> creationLinkedList .)
    PUTS            reduce using rule 70 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 70 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 70 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 70 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 70 (creationTDA -> creationLinkedList .)
    END             reduce using rule 70 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 70 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 70 (creationTDA -> creationLinkedList .)
    YIELD           reduce using rule 70 (creationTDA -> creationLinkedList .)


state 73

    (71) creationTDA -> creationHashmap .

    PRINT           reduce using rule 71 (creationTDA -> creationHashmap .)
    RETURN          reduce using rule 71 (creationTDA -> creationHashmap .)
    PUTS            reduce using rule 71 (creationTDA -> creationHashmap .)
    ID              reduce using rule 71 (creationTDA -> creationHashmap .)
    IF              reduce using rule 71 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 71 (creationTDA -> creationHashmap .)
    $end            reduce using rule 71 (creationTDA -> creationHashmap .)
    END             reduce using rule 71 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 71 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 71 (creationTDA -> creationHashmap .)
    YIELD           reduce using rule 71 (creationTDA -> creationHashmap .)


state 74

    (95) operations -> operation .
    (96) operations -> operation . arithmeticOperator operations
    (97) operations -> operation . arithmeticOperator operationValue
    (83) arithmeticOperator -> . PLUS
    (84) arithmeticOperator -> . MINUS
    (85) arithmeticOperator -> . POWER
    (86) arithmeticOperator -> . MULTIPLICATION
    (87) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 95 (operations -> operation .)
    RETURN          reduce using rule 95 (operations -> operation .)
    PUTS            reduce using rule 95 (operations -> operation .)
    ID              reduce using rule 95 (operations -> operation .)
    IF              reduce using rule 95 (operations -> operation .)
    WHILE           reduce using rule 95 (operations -> operation .)
    $end            reduce using rule 95 (operations -> operation .)
    END             reduce using rule 95 (operations -> operation .)
    ELSE            reduce using rule 95 (operations -> operation .)
    ELSIF           reduce using rule 95 (operations -> operation .)
    YIELD           reduce using rule 95 (operations -> operation .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 106

state 75

    (98) operations -> operationValue . arithmeticOperator operation
    (93) operation -> operationValue . arithmeticOperator operationValue
    (83) arithmeticOperator -> . PLUS
    (84) arithmeticOperator -> . MINUS
    (85) arithmeticOperator -> . POWER
    (86) arithmeticOperator -> . MULTIPLICATION
    (87) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 112

state 76

    (99) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (100) array -> OPENBRACKET . CLOSEDBRACKET
    (67) creationStack -> OPENBRACKET . CLOSEDBRACKET
    (101) element_list -> . conditionValue
    (102) element_list -> . element_list COMMA conditionValue
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    CLOSEDBRACKET   shift and go to state 114
    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    element_list                   shift and go to state 113
    conditionValue                 shift and go to state 115
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 77

    (57) input -> GETS . DOT CHOMP DOT TO_F
    (58) input -> GETS . DOT CHOMP DOT TO_I
    (59) input -> GETS . DOT CHOMP

    DOT             shift and go to state 116


state 78

    (66) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 117


state 79

    (68) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 118


state 80

    (72) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 119


state 81

    (73) creationHashmap -> LBRACE . pairs RBRACE
    (74) creationHashmap -> LBRACE . RBRACE
    (76) pairs -> . pair
    (77) pairs -> . pair COMMA pairs
    (75) pair -> . STRING COLON value

    RBRACE          shift and go to state 121
    STRING          shift and go to state 123

    pairs                          shift and go to state 120
    pair                           shift and go to state 122

state 82

    (94) operation -> LPAREN . operationValue arithmeticOperator operationValue RPAREN
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 124
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 83

    (62) functionCall -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 129


state 84

    (63) functionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)
    YIELD           reduce using rule 63 (functionCall -> ID LPAREN RPAREN .)


state 85

    (107) arrayConcat -> ID ARRAYAPPEND ID .

    PRINT           reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    RETURN          reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    PUTS            reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    ID              reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    IF              reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    WHILE           reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    $end            reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    END             reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSE            reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSIF           reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)
    YIELD           reduce using rule 107 (arrayConcat -> ID ARRAYAPPEND ID .)


state 86

    (108) arrayConcat -> ID ARRAYAPPEND number .

    PRINT           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    RETURN          reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    PUTS            reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    ID              reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    IF              reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    WHILE           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    $end            reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    END             reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSE            reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSIF           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)
    YIELD           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND number .)


state 87

    (62) functionCall -> ID . LPAREN arguments RPAREN
    (63) functionCall -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 22


state 88

    (56) method -> ID DOT functionCall .

    PRINT           reduce using rule 56 (method -> ID DOT functionCall .)
    RETURN          reduce using rule 56 (method -> ID DOT functionCall .)
    PUTS            reduce using rule 56 (method -> ID DOT functionCall .)
    ID              reduce using rule 56 (method -> ID DOT functionCall .)
    IF              reduce using rule 56 (method -> ID DOT functionCall .)
    WHILE           reduce using rule 56 (method -> ID DOT functionCall .)
    $end            reduce using rule 56 (method -> ID DOT functionCall .)
    END             reduce using rule 56 (method -> ID DOT functionCall .)
    ELSE            reduce using rule 56 (method -> ID DOT functionCall .)
    ELSIF           reduce using rule 56 (method -> ID DOT functionCall .)
    YIELD           reduce using rule 56 (method -> ID DOT functionCall .)


state 89

    (117) unariOperator -> ID ASSIGNDECREMENT number .

    PRINT           reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    RETURN          reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    PUTS            reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    ID              reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    IF              reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    WHILE           reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    $end            reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    END             reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSE            reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSIF           reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)
    YIELD           reduce using rule 117 (unariOperator -> ID ASSIGNDECREMENT number .)


state 90

    (118) unariOperator -> ID ASSIGNINCREMENT number .

    PRINT           reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    RETURN          reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    PUTS            reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    ID              reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    IF              reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    WHILE           reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    $end            reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    END             reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSE            reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSIF           reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)
    YIELD           reduce using rule 118 (unariOperator -> ID ASSIGNINCREMENT number .)


state 91

    (6) conditional -> IF condition instructionBody . END
    (7) conditional -> IF condition instructionBody . conditionalElsif END
    (8) conditional -> IF condition instructionBody . ELSE instructionBody END
    (9) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (13) conditionalElsif -> . elsif
    (14) conditionalElsif -> . elsif conditionalElsif
    (10) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 130
    ELSE            shift and go to state 132
    ELSIF           shift and go to state 134

    conditionalElsif               shift and go to state 131
    elsif                          shift and go to state 133

state 92

    (111) condition -> conditionValue comparator . conditionValue
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    conditionValue                 shift and go to state 135
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 93

    (112) comparator -> GREATERTHAN .

    ID              reduce using rule 112 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 112 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 112 (comparator -> GREATERTHAN .)


state 94

    (113) comparator -> LESSTHAN .

    ID              reduce using rule 113 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 113 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 113 (comparator -> LESSTHAN .)


state 95

    (114) comparator -> EQUALS .

    ID              reduce using rule 114 (comparator -> EQUALS .)
    FLOAT           reduce using rule 114 (comparator -> EQUALS .)
    INTEGER         reduce using rule 114 (comparator -> EQUALS .)


state 96

    (115) comparator -> GREATEROREQUALS .

    ID              reduce using rule 115 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 115 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 115 (comparator -> GREATEROREQUALS .)


state 97

    (116) comparator -> LESSOREQUALS .

    ID              reduce using rule 116 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 116 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 116 (comparator -> LESSOREQUALS .)


state 98

    (109) indexation -> ID OPENBRACKET . element_list CLOSEDBRACKET
    (110) indexation -> ID OPENBRACKET . operation CLOSEDBRACKET
    (101) element_list -> . conditionValue
    (102) element_list -> . element_list COMMA conditionValue
    (93) operation -> . operationValue arithmeticOperator operationValue
    (94) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    LPAREN          shift and go to state 82
    ID              shift and go to state 136
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    element_list                   shift and go to state 137
    operation                      shift and go to state 138
    conditionValue                 shift and go to state 115
    operationValue                 shift and go to state 139
    number                         shift and go to state 140
    indexation                     shift and go to state 141
    attribute                      shift and go to state 142

state 99

    (88) attribute -> ID DOT . ID

    ID              shift and go to state 143


state 100

    (16) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 144


state 101

    (56) method -> ID DOT . functionCall
    (88) attribute -> ID DOT . ID
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 145

    functionCall                   shift and go to state 88

state 102

    (55) arguments -> argument COMMA . arguments
    (54) arguments -> . argument
    (55) arguments -> . argument COMMA arguments
    (49) argument -> . ID
    (50) argument -> . number
    (51) argument -> . attribute
    (52) argument -> . indexation
    (53) argument -> . STRING
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 53
    STRING          shift and go to state 57
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    argument                       shift and go to state 52
    arguments                      shift and go to state 146
    number                         shift and go to state 54
    attribute                      shift and go to state 55
    indexation                     shift and go to state 56

state 103

    (60) parameters -> ID .
    (61) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 60 (parameters -> ID .)
    COMMA           shift and go to state 147


state 104

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 148


state 105

    (3) instruction -> DEF ID LPAREN RPAREN . END
    (4) instruction -> DEF ID LPAREN RPAREN . instructionBody YIELD END
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    END             shift and go to state 149
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 150
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 106

    (96) operations -> operation arithmeticOperator . operations
    (97) operations -> operation arithmeticOperator . operationValue
    (95) operations -> . operation
    (96) operations -> . operation arithmeticOperator operations
    (97) operations -> . operation arithmeticOperator operationValue
    (98) operations -> . operationValue arithmeticOperator operation
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation
    (93) operation -> . operationValue arithmeticOperator operationValue
    (94) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    LPAREN          shift and go to state 82
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operation                      shift and go to state 74
    operations                     shift and go to state 151
    operationValue                 shift and go to state 152
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 107

    (83) arithmeticOperator -> PLUS .

    ID              reduce using rule 83 (arithmeticOperator -> PLUS .)
    LPAREN          reduce using rule 83 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 83 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 83 (arithmeticOperator -> PLUS .)


state 108

    (84) arithmeticOperator -> MINUS .

    ID              reduce using rule 84 (arithmeticOperator -> MINUS .)
    LPAREN          reduce using rule 84 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 84 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 84 (arithmeticOperator -> MINUS .)


state 109

    (85) arithmeticOperator -> POWER .

    ID              reduce using rule 85 (arithmeticOperator -> POWER .)
    LPAREN          reduce using rule 85 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 85 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 85 (arithmeticOperator -> POWER .)


state 110

    (86) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 86 (arithmeticOperator -> MULTIPLICATION .)
    LPAREN          reduce using rule 86 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 86 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 86 (arithmeticOperator -> MULTIPLICATION .)


state 111

    (87) arithmeticOperator -> DIVISION .

    ID              reduce using rule 87 (arithmeticOperator -> DIVISION .)
    LPAREN          reduce using rule 87 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 87 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 87 (arithmeticOperator -> DIVISION .)


state 112

    (98) operations -> operationValue arithmeticOperator . operation
    (93) operation -> operationValue arithmeticOperator . operationValue
    (93) operation -> . operationValue arithmeticOperator operationValue
    (94) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    LPAREN          shift and go to state 82
    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 153
    operation                      shift and go to state 154
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 113

    (99) array -> OPENBRACKET element_list . CLOSEDBRACKET
    (102) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 155
    COMMA           shift and go to state 156


state 114

    (100) array -> OPENBRACKET CLOSEDBRACKET .
    (67) creationStack -> OPENBRACKET CLOSEDBRACKET .

  ! reduce/reduce conflict for PRINT resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for $end resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSIF resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for YIELD resolved using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PRINT           reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RETURN          reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PUTS            reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    YIELD           reduce using rule 67 (creationStack -> OPENBRACKET CLOSEDBRACKET .)

  ! PRINT           [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RETURN          [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! PUTS            [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ID              [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! IF              [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! WHILE           [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! $end            [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! END             [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSE            [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSIF           [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! YIELD           [ reduce using rule 100 (array -> OPENBRACKET CLOSEDBRACKET .) ]


state 115

    (101) element_list -> conditionValue .

    CLOSEDBRACKET   reduce using rule 101 (element_list -> conditionValue .)
    COMMA           reduce using rule 101 (element_list -> conditionValue .)


state 116

    (57) input -> GETS DOT . CHOMP DOT TO_F
    (58) input -> GETS DOT . CHOMP DOT TO_I
    (59) input -> GETS DOT . CHOMP

    CHOMP           shift and go to state 157


state 117

    (66) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 158


state 118

    (68) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 159


state 119

    (72) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 160


state 120

    (73) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 161


state 121

    (74) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    RETURN          reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    PUTS            reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)
    YIELD           reduce using rule 74 (creationHashmap -> LBRACE RBRACE .)


state 122

    (76) pairs -> pair .
    (77) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 76 (pairs -> pair .)
    COMMA           shift and go to state 162


state 123

    (75) pair -> STRING . COLON value

    COLON           shift and go to state 163


state 124

    (94) operation -> LPAREN operationValue . arithmeticOperator operationValue RPAREN
    (83) arithmeticOperator -> . PLUS
    (84) arithmeticOperator -> . MINUS
    (85) arithmeticOperator -> . POWER
    (86) arithmeticOperator -> . MULTIPLICATION
    (87) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 164

state 125

    (89) operationValue -> ID .
    (88) attribute -> ID . DOT ID
    (109) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    PLUS            reduce using rule 89 (operationValue -> ID .)
    MINUS           reduce using rule 89 (operationValue -> ID .)
    POWER           reduce using rule 89 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 89 (operationValue -> ID .)
    DIVISION        reduce using rule 89 (operationValue -> ID .)
    PRINT           reduce using rule 89 (operationValue -> ID .)
    RETURN          reduce using rule 89 (operationValue -> ID .)
    PUTS            reduce using rule 89 (operationValue -> ID .)
    ID              reduce using rule 89 (operationValue -> ID .)
    IF              reduce using rule 89 (operationValue -> ID .)
    WHILE           reduce using rule 89 (operationValue -> ID .)
    $end            reduce using rule 89 (operationValue -> ID .)
    END             reduce using rule 89 (operationValue -> ID .)
    ELSE            reduce using rule 89 (operationValue -> ID .)
    ELSIF           reduce using rule 89 (operationValue -> ID .)
    YIELD           reduce using rule 89 (operationValue -> ID .)
    RPAREN          reduce using rule 89 (operationValue -> ID .)
    CLOSEDBRACKET   reduce using rule 89 (operationValue -> ID .)
    DOT             shift and go to state 99
    OPENBRACKET     shift and go to state 98


state 126

    (90) operationValue -> number .

    PLUS            reduce using rule 90 (operationValue -> number .)
    MINUS           reduce using rule 90 (operationValue -> number .)
    POWER           reduce using rule 90 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 90 (operationValue -> number .)
    DIVISION        reduce using rule 90 (operationValue -> number .)
    PRINT           reduce using rule 90 (operationValue -> number .)
    RETURN          reduce using rule 90 (operationValue -> number .)
    PUTS            reduce using rule 90 (operationValue -> number .)
    ID              reduce using rule 90 (operationValue -> number .)
    IF              reduce using rule 90 (operationValue -> number .)
    WHILE           reduce using rule 90 (operationValue -> number .)
    $end            reduce using rule 90 (operationValue -> number .)
    END             reduce using rule 90 (operationValue -> number .)
    ELSE            reduce using rule 90 (operationValue -> number .)
    ELSIF           reduce using rule 90 (operationValue -> number .)
    YIELD           reduce using rule 90 (operationValue -> number .)
    RPAREN          reduce using rule 90 (operationValue -> number .)
    CLOSEDBRACKET   reduce using rule 90 (operationValue -> number .)


state 127

    (91) operationValue -> attribute .

    PLUS            reduce using rule 91 (operationValue -> attribute .)
    MINUS           reduce using rule 91 (operationValue -> attribute .)
    POWER           reduce using rule 91 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> attribute .)
    DIVISION        reduce using rule 91 (operationValue -> attribute .)
    PRINT           reduce using rule 91 (operationValue -> attribute .)
    RETURN          reduce using rule 91 (operationValue -> attribute .)
    PUTS            reduce using rule 91 (operationValue -> attribute .)
    ID              reduce using rule 91 (operationValue -> attribute .)
    IF              reduce using rule 91 (operationValue -> attribute .)
    WHILE           reduce using rule 91 (operationValue -> attribute .)
    $end            reduce using rule 91 (operationValue -> attribute .)
    END             reduce using rule 91 (operationValue -> attribute .)
    ELSE            reduce using rule 91 (operationValue -> attribute .)
    ELSIF           reduce using rule 91 (operationValue -> attribute .)
    YIELD           reduce using rule 91 (operationValue -> attribute .)
    RPAREN          reduce using rule 91 (operationValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 91 (operationValue -> attribute .)


state 128

    (92) operationValue -> indexation .

    PLUS            reduce using rule 92 (operationValue -> indexation .)
    MINUS           reduce using rule 92 (operationValue -> indexation .)
    POWER           reduce using rule 92 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> indexation .)
    DIVISION        reduce using rule 92 (operationValue -> indexation .)
    PRINT           reduce using rule 92 (operationValue -> indexation .)
    RETURN          reduce using rule 92 (operationValue -> indexation .)
    PUTS            reduce using rule 92 (operationValue -> indexation .)
    ID              reduce using rule 92 (operationValue -> indexation .)
    IF              reduce using rule 92 (operationValue -> indexation .)
    WHILE           reduce using rule 92 (operationValue -> indexation .)
    $end            reduce using rule 92 (operationValue -> indexation .)
    END             reduce using rule 92 (operationValue -> indexation .)
    ELSE            reduce using rule 92 (operationValue -> indexation .)
    ELSIF           reduce using rule 92 (operationValue -> indexation .)
    YIELD           reduce using rule 92 (operationValue -> indexation .)
    RPAREN          reduce using rule 92 (operationValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 92 (operationValue -> indexation .)


state 129

    (62) functionCall -> ID LPAREN arguments RPAREN .

    PRINT           reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    PUTS            reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    ID              reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    IF              reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    END             reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSE            reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSIF           reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)
    YIELD           reduce using rule 62 (functionCall -> ID LPAREN arguments RPAREN .)


state 130

    (6) conditional -> IF condition instructionBody END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody END .)
    RETURN          reduce using rule 6 (conditional -> IF condition instructionBody END .)
    PUTS            reduce using rule 6 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody END .)
    YIELD           reduce using rule 6 (conditional -> IF condition instructionBody END .)


state 131

    (7) conditional -> IF condition instructionBody conditionalElsif . END
    (9) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 165
    ELSE            shift and go to state 166


state 132

    (8) conditional -> IF condition instructionBody ELSE . instructionBody END
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 167
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 133

    (13) conditionalElsif -> elsif .
    (14) conditionalElsif -> elsif . conditionalElsif
    (13) conditionalElsif -> . elsif
    (14) conditionalElsif -> . elsif conditionalElsif
    (10) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 13 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 134

    elsif                          shift and go to state 133
    conditionalElsif               shift and go to state 168

state 134

    (10) elsif -> ELSIF . condition instructionBody
    (111) condition -> . conditionValue comparator conditionValue
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    condition                      shift and go to state 169
    conditionValue                 shift and go to state 33
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 135

    (111) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    RETURN          reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    PUTS            reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 111 (condition -> conditionValue comparator conditionValue .)
    YIELD           reduce using rule 111 (condition -> conditionValue comparator conditionValue .)


state 136

    (103) conditionValue -> ID .
    (89) operationValue -> ID .
    (109) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> ID . DOT ID

    CLOSEDBRACKET   reduce using rule 103 (conditionValue -> ID .)
    COMMA           reduce using rule 103 (conditionValue -> ID .)
    PLUS            reduce using rule 89 (operationValue -> ID .)
    MINUS           reduce using rule 89 (operationValue -> ID .)
    POWER           reduce using rule 89 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 89 (operationValue -> ID .)
    DIVISION        reduce using rule 89 (operationValue -> ID .)
    OPENBRACKET     shift and go to state 98
    DOT             shift and go to state 99


state 137

    (109) indexation -> ID OPENBRACKET element_list . CLOSEDBRACKET
    (102) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 170
    COMMA           shift and go to state 156


state 138

    (110) indexation -> ID OPENBRACKET operation . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 171


state 139

    (93) operation -> operationValue . arithmeticOperator operationValue
    (83) arithmeticOperator -> . PLUS
    (84) arithmeticOperator -> . MINUS
    (85) arithmeticOperator -> . POWER
    (86) arithmeticOperator -> . MULTIPLICATION
    (87) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 172

state 140

    (104) conditionValue -> number .
    (90) operationValue -> number .

    CLOSEDBRACKET   reduce using rule 104 (conditionValue -> number .)
    COMMA           reduce using rule 104 (conditionValue -> number .)
    PLUS            reduce using rule 90 (operationValue -> number .)
    MINUS           reduce using rule 90 (operationValue -> number .)
    POWER           reduce using rule 90 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 90 (operationValue -> number .)
    DIVISION        reduce using rule 90 (operationValue -> number .)


state 141

    (105) conditionValue -> indexation .
    (92) operationValue -> indexation .

    CLOSEDBRACKET   reduce using rule 105 (conditionValue -> indexation .)
    COMMA           reduce using rule 105 (conditionValue -> indexation .)
    PLUS            reduce using rule 92 (operationValue -> indexation .)
    MINUS           reduce using rule 92 (operationValue -> indexation .)
    POWER           reduce using rule 92 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> indexation .)
    DIVISION        reduce using rule 92 (operationValue -> indexation .)


state 142

    (106) conditionValue -> attribute .
    (91) operationValue -> attribute .

    CLOSEDBRACKET   reduce using rule 106 (conditionValue -> attribute .)
    COMMA           reduce using rule 106 (conditionValue -> attribute .)
    PLUS            reduce using rule 91 (operationValue -> attribute .)
    MINUS           reduce using rule 91 (operationValue -> attribute .)
    POWER           reduce using rule 91 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> attribute .)
    DIVISION        reduce using rule 91 (operationValue -> attribute .)


state 143

    (88) attribute -> ID DOT ID .

    GREATERTHAN     reduce using rule 88 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 88 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 88 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 88 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 88 (attribute -> ID DOT ID .)
    COMMA           reduce using rule 88 (attribute -> ID DOT ID .)
    PRINT           reduce using rule 88 (attribute -> ID DOT ID .)
    RETURN          reduce using rule 88 (attribute -> ID DOT ID .)
    PUTS            reduce using rule 88 (attribute -> ID DOT ID .)
    ID              reduce using rule 88 (attribute -> ID DOT ID .)
    IF              reduce using rule 88 (attribute -> ID DOT ID .)
    WHILE           reduce using rule 88 (attribute -> ID DOT ID .)
    $end            reduce using rule 88 (attribute -> ID DOT ID .)
    END             reduce using rule 88 (attribute -> ID DOT ID .)
    ELSE            reduce using rule 88 (attribute -> ID DOT ID .)
    ELSIF           reduce using rule 88 (attribute -> ID DOT ID .)
    YIELD           reduce using rule 88 (attribute -> ID DOT ID .)
    PLUS            reduce using rule 88 (attribute -> ID DOT ID .)
    MINUS           reduce using rule 88 (attribute -> ID DOT ID .)
    POWER           reduce using rule 88 (attribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 88 (attribute -> ID DOT ID .)
    DIVISION        reduce using rule 88 (attribute -> ID DOT ID .)
    RPAREN          reduce using rule 88 (attribute -> ID DOT ID .)
    CLOSEDBRACKET   reduce using rule 88 (attribute -> ID DOT ID .)


state 144

    (16) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    RETURN          reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    PUTS            reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    YIELD           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)


state 145

    (88) attribute -> ID DOT ID .
    (62) functionCall -> ID . LPAREN arguments RPAREN
    (63) functionCall -> ID . LPAREN RPAREN

    GREATERTHAN     reduce using rule 88 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 88 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 88 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 88 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 88 (attribute -> ID DOT ID .)
    LPAREN          shift and go to state 22


state 146

    (55) arguments -> argument COMMA arguments .

    PRINT           reduce using rule 55 (arguments -> argument COMMA arguments .)
    RETURN          reduce using rule 55 (arguments -> argument COMMA arguments .)
    PUTS            reduce using rule 55 (arguments -> argument COMMA arguments .)
    ID              reduce using rule 55 (arguments -> argument COMMA arguments .)
    IF              reduce using rule 55 (arguments -> argument COMMA arguments .)
    WHILE           reduce using rule 55 (arguments -> argument COMMA arguments .)
    $end            reduce using rule 55 (arguments -> argument COMMA arguments .)
    END             reduce using rule 55 (arguments -> argument COMMA arguments .)
    ELSE            reduce using rule 55 (arguments -> argument COMMA arguments .)
    ELSIF           reduce using rule 55 (arguments -> argument COMMA arguments .)
    YIELD           reduce using rule 55 (arguments -> argument COMMA arguments .)
    RPAREN          reduce using rule 55 (arguments -> argument COMMA arguments .)


state 147

    (61) parameters -> ID COMMA . parameters
    (60) parameters -> . ID
    (61) parameters -> . ID COMMA parameters

    ID              shift and go to state 103

    parameters                     shift and go to state 173

state 148

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 174
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 149

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 150

    (4) instruction -> DEF ID LPAREN RPAREN instructionBody . YIELD END

    YIELD           shift and go to state 175


state 151

    (96) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    RETURN          reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    PUTS            reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 96 (operations -> operation arithmeticOperator operations .)
    YIELD           reduce using rule 96 (operations -> operation arithmeticOperator operations .)


state 152

    (97) operations -> operation arithmeticOperator operationValue .
    (98) operations -> operationValue . arithmeticOperator operation
    (93) operation -> operationValue . arithmeticOperator operationValue
    (83) arithmeticOperator -> . PLUS
    (84) arithmeticOperator -> . MINUS
    (85) arithmeticOperator -> . POWER
    (86) arithmeticOperator -> . MULTIPLICATION
    (87) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    RETURN          reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    PUTS            reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    ID              reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    IF              reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    WHILE           reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    $end            reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    END             reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    ELSE            reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    ELSIF           reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    YIELD           reduce using rule 97 (operations -> operation arithmeticOperator operationValue .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 112

state 153

    (93) operation -> operationValue arithmeticOperator operationValue .
    (93) operation -> operationValue . arithmeticOperator operationValue
    (83) arithmeticOperator -> . PLUS
    (84) arithmeticOperator -> . MINUS
    (85) arithmeticOperator -> . POWER
    (86) arithmeticOperator -> . MULTIPLICATION
    (87) arithmeticOperator -> . DIVISION

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    PRINT           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    YIELD           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

  ! PLUS            [ reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MINUS           [ reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! POWER           [ reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MULTIPLICATION  [ reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! DIVISION        [ reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .) ]

    arithmeticOperator             shift and go to state 172

state 154

    (98) operations -> operationValue arithmeticOperator operation .

    PRINT           reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    RETURN          reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    PUTS            reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    ID              reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    IF              reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    WHILE           reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    $end            reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    END             reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    ELSE            reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    ELSIF           reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)
    YIELD           reduce using rule 98 (operations -> operationValue arithmeticOperator operation .)


state 155

    (99) array -> OPENBRACKET element_list CLOSEDBRACKET .

    PRINT           reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    YIELD           reduce using rule 99 (array -> OPENBRACKET element_list CLOSEDBRACKET .)


state 156

    (102) element_list -> element_list COMMA . conditionValue
    (103) conditionValue -> . ID
    (104) conditionValue -> . number
    (105) conditionValue -> . indexation
    (106) conditionValue -> . attribute
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (88) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    conditionValue                 shift and go to state 176
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 157

    (57) input -> GETS DOT CHOMP . DOT TO_F
    (58) input -> GETS DOT CHOMP . DOT TO_I
    (59) input -> GETS DOT CHOMP .

    DOT             shift and go to state 177
    PRINT           reduce using rule 59 (input -> GETS DOT CHOMP .)
    RETURN          reduce using rule 59 (input -> GETS DOT CHOMP .)
    PUTS            reduce using rule 59 (input -> GETS DOT CHOMP .)
    ID              reduce using rule 59 (input -> GETS DOT CHOMP .)
    IF              reduce using rule 59 (input -> GETS DOT CHOMP .)
    WHILE           reduce using rule 59 (input -> GETS DOT CHOMP .)
    $end            reduce using rule 59 (input -> GETS DOT CHOMP .)
    END             reduce using rule 59 (input -> GETS DOT CHOMP .)
    ELSE            reduce using rule 59 (input -> GETS DOT CHOMP .)
    ELSIF           reduce using rule 59 (input -> GETS DOT CHOMP .)
    YIELD           reduce using rule 59 (input -> GETS DOT CHOMP .)


state 158

    (66) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 66 (creationStack -> STACK DOT NEW .)
    RETURN          reduce using rule 66 (creationStack -> STACK DOT NEW .)
    PUTS            reduce using rule 66 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 66 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 66 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 66 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 66 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 66 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 66 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 66 (creationStack -> STACK DOT NEW .)
    YIELD           reduce using rule 66 (creationStack -> STACK DOT NEW .)


state 159

    (68) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RETURN          reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    PUTS            reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)
    YIELD           reduce using rule 68 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 160

    (72) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    RETURN          reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    PUTS            reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 72 (creationHashmap -> HASH DOT NEW .)
    YIELD           reduce using rule 72 (creationHashmap -> HASH DOT NEW .)


state 161

    (73) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    RETURN          reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    PUTS            reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)
    YIELD           reduce using rule 73 (creationHashmap -> LBRACE pairs RBRACE .)


state 162

    (77) pairs -> pair COMMA . pairs
    (76) pairs -> . pair
    (77) pairs -> . pair COMMA pairs
    (75) pair -> . STRING COLON value

    STRING          shift and go to state 123

    pair                           shift and go to state 122
    pairs                          shift and go to state 178

state 163

    (75) pair -> STRING COLON . value
    (78) value -> . ID
    (79) value -> . STRING
    (80) value -> . number
    (81) value -> . LBRACE pairs RBRACE
    (82) value -> . LBRACE RBRACE
    (119) number -> . FLOAT
    (120) number -> . INTEGER

    ID              shift and go to state 181
    STRING          shift and go to state 179
    LBRACE          shift and go to state 183
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    value                          shift and go to state 180
    number                         shift and go to state 182

state 164

    (94) operation -> LPAREN operationValue arithmeticOperator . operationValue RPAREN
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 184
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 165

    (7) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    RETURN          reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    PUTS            reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)
    YIELD           reduce using rule 7 (conditional -> IF condition instructionBody conditionalElsif END .)


state 166

    (9) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 185
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 167

    (8) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 186


state 168

    (14) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 14 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 14 (conditionalElsif -> elsif conditionalElsif .)


state 169

    (10) elsif -> ELSIF condition . instructionBody
    (40) instructionBody -> . bodyLine
    (41) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . nestedConditional
    (33) bodyLine -> . nestedWhile
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (11) nestedConditional -> . conditional
    (12) nestedConditional -> . conditional nestedConditional
    (17) nestedWhile -> . whileLoop
    (18) nestedWhile -> . whileLoop nestedWhile
    (62) functionCall -> . ID LPAREN arguments RPAREN
    (63) functionCall -> . ID LPAREN RPAREN
    (107) arrayConcat -> . ID ARRAYAPPEND ID
    (108) arrayConcat -> . ID ARRAYAPPEND number
    (56) method -> . ID DOT functionCall
    (117) unariOperator -> . ID ASSIGNDECREMENT number
    (118) unariOperator -> . ID ASSIGNINCREMENT number
    (6) conditional -> . IF condition instructionBody END
    (7) conditional -> . IF condition instructionBody conditionalElsif END
    (8) conditional -> . IF condition instructionBody ELSE instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 187
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 170

    (109) indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    EQUALS          reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    COMMA           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PRINT           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    YIELD           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PLUS            reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MINUS           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    POWER           reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    DIVISION        reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RPAREN          reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 109 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)


state 171

    (110) indexation -> ID OPENBRACKET operation CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    EQUALS          reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    COMMA           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PRINT           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RETURN          reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PUTS            reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ID              reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    IF              reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    WHILE           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    $end            reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    END             reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSE            reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSIF           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    YIELD           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PLUS            reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MINUS           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    POWER           reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    DIVISION        reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RPAREN          reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 110 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)


state 172

    (93) operation -> operationValue arithmeticOperator . operationValue
    (89) operationValue -> . ID
    (90) operationValue -> . number
    (91) operationValue -> . attribute
    (92) operationValue -> . indexation
    (119) number -> . FLOAT
    (120) number -> . INTEGER
    (88) attribute -> . ID DOT ID
    (109) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 188
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 173

    (61) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 61 (parameters -> ID COMMA parameters .)


state 174

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 189


state 175

    (4) instruction -> DEF ID LPAREN RPAREN instructionBody YIELD . END

    END             shift and go to state 190


state 176

    (102) element_list -> element_list COMMA conditionValue .

    CLOSEDBRACKET   reduce using rule 102 (element_list -> element_list COMMA conditionValue .)
    COMMA           reduce using rule 102 (element_list -> element_list COMMA conditionValue .)


state 177

    (57) input -> GETS DOT CHOMP DOT . TO_F
    (58) input -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 191
    TO_I            shift and go to state 192


state 178

    (77) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 77 (pairs -> pair COMMA pairs .)


state 179

    (79) value -> STRING .

    COMMA           reduce using rule 79 (value -> STRING .)
    RBRACE          reduce using rule 79 (value -> STRING .)


state 180

    (75) pair -> STRING COLON value .

    COMMA           reduce using rule 75 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 75 (pair -> STRING COLON value .)


state 181

    (78) value -> ID .

    COMMA           reduce using rule 78 (value -> ID .)
    RBRACE          reduce using rule 78 (value -> ID .)


state 182

    (80) value -> number .

    COMMA           reduce using rule 80 (value -> number .)
    RBRACE          reduce using rule 80 (value -> number .)


state 183

    (81) value -> LBRACE . pairs RBRACE
    (82) value -> LBRACE . RBRACE
    (76) pairs -> . pair
    (77) pairs -> . pair COMMA pairs
    (75) pair -> . STRING COLON value

    RBRACE          shift and go to state 194
    STRING          shift and go to state 123

    pairs                          shift and go to state 193
    pair                           shift and go to state 122

state 184

    (94) operation -> LPAREN operationValue arithmeticOperator operationValue . RPAREN

    RPAREN          shift and go to state 195


state 185

    (9) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 196


state 186

    (8) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RETURN          reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PUTS            reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    YIELD           reduce using rule 8 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 187

    (10) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 10 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 10 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 10 (elsif -> ELSIF condition instructionBody .)


state 188

    (93) operation -> operationValue arithmeticOperator operationValue .

    CLOSEDBRACKET   reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)
    YIELD           reduce using rule 93 (operation -> operationValue arithmeticOperator operationValue .)


state 189

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 190

    (4) instruction -> DEF ID LPAREN RPAREN instructionBody YIELD END .

    $end            reduce using rule 4 (instruction -> DEF ID LPAREN RPAREN instructionBody YIELD END .)


state 191

    (57) input -> GETS DOT CHOMP DOT TO_F .

    PRINT           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    RETURN          reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    PUTS            reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    ID              reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    IF              reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    WHILE           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    $end            reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSIF           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)
    YIELD           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_F .)


state 192

    (58) input -> GETS DOT CHOMP DOT TO_I .

    PRINT           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    RETURN          reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    PUTS            reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    ID              reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    IF              reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    WHILE           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    $end            reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSIF           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)
    YIELD           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_I .)


state 193

    (81) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 197


state 194

    (82) value -> LBRACE RBRACE .

    COMMA           reduce using rule 82 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 82 (value -> LBRACE RBRACE .)


state 195

    (94) operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .

    PLUS            reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MINUS           reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    POWER           reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MULTIPLICATION  reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    DIVISION        reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PRINT           reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RETURN          reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PUTS            reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ID              reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    IF              reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    WHILE           reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    $end            reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    END             reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSE            reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSIF           reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    YIELD           reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    CLOSEDBRACKET   reduce using rule 94 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)


state 196

    (9) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RETURN          reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PUTS            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    YIELD           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 197

    (81) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 81 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 81 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 27 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for POWER in state 153 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 153 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 153 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
WARNING: reduce/reduce conflict in state 114 resolved using rule (creationStack -> OPENBRACKET CLOSEDBRACKET)
WARNING: rejected rule (array -> OPENBRACKET CLOSEDBRACKET) in state 114
WARNING: Rule (array -> OPENBRACKET CLOSEDBRACKET) is never reduced
