Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    ASSIGNMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    DOT
    ELSE
    ELSIF
    EQUALS
    FOR
    GETS
    GREATERTHAN
    IN
    LESSTHAN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> PRINT printBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     printBody -> ID
Rule 5     printBody -> TRUE
Rule 6     printBody -> FALSE
Rule 7     printBody -> dataType
Rule 8     printBody -> condition
Rule 9     instruction -> IF condition
Rule 10    instruction -> WHILE condition END
Rule 11    parameters -> ID
Rule 12    parameters -> ID COMMA ID
Rule 13    arithmetic -> PLUS
Rule 14    arithmetic -> MINUS
Rule 15    arithmetic -> POWER
Rule 16    arithmetic -> MULTIPLICATION
Rule 17    arithmetic -> DIVISION
Rule 18    operations -> dataType arithmetic dataType
Rule 19    operations -> arithmetic dataType
Rule 20    condition -> TRUE
Rule 21    condition -> FALSE
Rule 22    condition -> number GREATEROREQUALS number
Rule 23    number -> FLOAT
Rule 24    number -> INTEGER
Rule 25    dataType -> STRING
Rule 26    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 12
DEF                  : 2 3
DIVISION             : 17
DOT                  : 
ELSE                 : 
ELSIF                : 
END                  : 2 3 10
EQUALS               : 
FALSE                : 6 21
FLOAT                : 23
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 22
GREATERTHAN          : 
ID                   : 2 3 4 11 12 12
IF                   : 9
IN                   : 
INTEGER              : 24
LESSTHAN             : 
LPAREN               : 2 3
MINUS                : 14
MULTIPLICATION       : 16
OPENBRACKET          : 
PLUS                 : 13
POWER                : 15
PRINT                : 1
PUTS                 : 
RPAREN               : 2 3
STRING               : 25
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 5 20
WHILE                : 10
error                : 

Nonterminals, with rules where they appear

arithmetic           : 18 19
condition            : 8 9 10
dataType             : 7 18 18 19
instruction          : 0
number               : 22 22 26
operations           : 
parameters           : 2
printBody            : 1

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . PRINT printBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (9) instruction -> . IF condition
    (10) instruction -> . WHILE condition END

    PRINT           shift and go to state 2
    DEF             shift and go to state 3
    IF              shift and go to state 4
    WHILE           shift and go to state 5

    instruction                    shift and go to state 1

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> PRINT . printBody
    (4) printBody -> . ID
    (5) printBody -> . TRUE
    (6) printBody -> . FALSE
    (7) printBody -> . dataType
    (8) printBody -> . condition
    (25) dataType -> . STRING
    (26) dataType -> . number
    (20) condition -> . TRUE
    (21) condition -> . FALSE
    (22) condition -> . number GREATEROREQUALS number
    (23) number -> . FLOAT
    (24) number -> . INTEGER

    ID              shift and go to state 7
    TRUE            shift and go to state 8
    FALSE           shift and go to state 9
    STRING          shift and go to state 12
    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    printBody                      shift and go to state 6
    dataType                       shift and go to state 10
    condition                      shift and go to state 11
    number                         shift and go to state 13

state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 16


state 4

    (9) instruction -> IF . condition
    (20) condition -> . TRUE
    (21) condition -> . FALSE
    (22) condition -> . number GREATEROREQUALS number
    (23) number -> . FLOAT
    (24) number -> . INTEGER

    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    condition                      shift and go to state 17
    number                         shift and go to state 20

state 5

    (10) instruction -> WHILE . condition END
    (20) condition -> . TRUE
    (21) condition -> . FALSE
    (22) condition -> . number GREATEROREQUALS number
    (23) number -> . FLOAT
    (24) number -> . INTEGER

    TRUE            shift and go to state 18
    FALSE           shift and go to state 19
    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    condition                      shift and go to state 21
    number                         shift and go to state 20

state 6

    (1) instruction -> PRINT printBody .

    $end            reduce using rule 1 (instruction -> PRINT printBody .)


state 7

    (4) printBody -> ID .

    $end            reduce using rule 4 (printBody -> ID .)


state 8

    (5) printBody -> TRUE .
    (20) condition -> TRUE .

  ! reduce/reduce conflict for $end resolved using rule 5 (printBody -> TRUE .)
    $end            reduce using rule 5 (printBody -> TRUE .)

  ! $end            [ reduce using rule 20 (condition -> TRUE .) ]


state 9

    (6) printBody -> FALSE .
    (21) condition -> FALSE .

  ! reduce/reduce conflict for $end resolved using rule 6 (printBody -> FALSE .)
    $end            reduce using rule 6 (printBody -> FALSE .)

  ! $end            [ reduce using rule 21 (condition -> FALSE .) ]


state 10

    (7) printBody -> dataType .

    $end            reduce using rule 7 (printBody -> dataType .)


state 11

    (8) printBody -> condition .

    $end            reduce using rule 8 (printBody -> condition .)


state 12

    (25) dataType -> STRING .

    $end            reduce using rule 25 (dataType -> STRING .)


state 13

    (26) dataType -> number .
    (22) condition -> number . GREATEROREQUALS number

    $end            reduce using rule 26 (dataType -> number .)
    GREATEROREQUALS shift and go to state 22


state 14

    (23) number -> FLOAT .

    GREATEROREQUALS reduce using rule 23 (number -> FLOAT .)
    $end            reduce using rule 23 (number -> FLOAT .)
    END             reduce using rule 23 (number -> FLOAT .)


state 15

    (24) number -> INTEGER .

    GREATEROREQUALS reduce using rule 24 (number -> INTEGER .)
    $end            reduce using rule 24 (number -> INTEGER .)
    END             reduce using rule 24 (number -> INTEGER .)


state 16

    (2) instruction -> DEF ID . LPAREN parameters RPAREN END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 23


state 17

    (9) instruction -> IF condition .

    $end            reduce using rule 9 (instruction -> IF condition .)


state 18

    (20) condition -> TRUE .

    $end            reduce using rule 20 (condition -> TRUE .)
    END             reduce using rule 20 (condition -> TRUE .)


state 19

    (21) condition -> FALSE .

    $end            reduce using rule 21 (condition -> FALSE .)
    END             reduce using rule 21 (condition -> FALSE .)


state 20

    (22) condition -> number . GREATEROREQUALS number

    GREATEROREQUALS shift and go to state 22


state 21

    (10) instruction -> WHILE condition . END

    END             shift and go to state 24


state 22

    (22) condition -> number GREATEROREQUALS . number
    (23) number -> . FLOAT
    (24) number -> . INTEGER

    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    number                         shift and go to state 25

state 23

    (2) instruction -> DEF ID LPAREN . parameters RPAREN END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (11) parameters -> . ID
    (12) parameters -> . ID COMMA ID

    RPAREN          shift and go to state 28
    ID              shift and go to state 26

    parameters                     shift and go to state 27

state 24

    (10) instruction -> WHILE condition END .

    $end            reduce using rule 10 (instruction -> WHILE condition END .)


state 25

    (22) condition -> number GREATEROREQUALS number .

    $end            reduce using rule 22 (condition -> number GREATEROREQUALS number .)
    END             reduce using rule 22 (condition -> number GREATEROREQUALS number .)


state 26

    (11) parameters -> ID .
    (12) parameters -> ID . COMMA ID

    RPAREN          reduce using rule 11 (parameters -> ID .)
    COMMA           shift and go to state 29


state 27

    (2) instruction -> DEF ID LPAREN parameters . RPAREN END

    RPAREN          shift and go to state 30


state 28

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 31


state 29

    (12) parameters -> ID COMMA . ID

    ID              shift and go to state 32


state 30

    (2) instruction -> DEF ID LPAREN parameters RPAREN . END

    END             shift and go to state 33


state 31

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 32

    (12) parameters -> ID COMMA ID .

    RPAREN          reduce using rule 12 (parameters -> ID COMMA ID .)


state 33

    (2) instruction -> DEF ID LPAREN parameters RPAREN END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 8 resolved using rule (printBody -> TRUE)
WARNING: rejected rule (condition -> TRUE) in state 8
WARNING: reduce/reduce conflict in state 9 resolved using rule (printBody -> FALSE)
WARNING: rejected rule (condition -> FALSE) in state 9
