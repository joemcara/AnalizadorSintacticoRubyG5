Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CASE
    CLASS
    FOR
    IN
    NODE
    THEN

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    assignmentRule -> ID ASSIGNMENT operations
Rule 25    assignmentRule -> ID ASSIGNMENT array
Rule 26    assignmentRule -> ID ASSIGNMENT indexation
Rule 27    assignmentRule -> ID ASSIGNMENT attribute
Rule 28    assignmentRule -> ID ASSIGNMENT input
Rule 29    bodyLine -> assignmentRule
Rule 30    bodyLine -> PRINT printBody
Rule 31    bodyLine -> nestedConditional
Rule 32    bodyLine -> nestedWhile
Rule 33    bodyLine -> functionCall
Rule 34    bodyLine -> arrayConcat
Rule 35    bodyLine -> RETURN arguments
Rule 36    bodyLine -> PUTS printBody
Rule 37    bodyLine -> method
Rule 38    bodyLine -> unariOperator
Rule 39    instructionBody -> bodyLine
Rule 40    instructionBody -> bodyLine instructionBody
Rule 41    printBody -> ID
Rule 42    printBody -> TRUE
Rule 43    printBody -> FALSE
Rule 44    printBody -> dataType
Rule 45    printBody -> condition
Rule 46    printBody -> method
Rule 47    printBody -> functionCall
Rule 48    argument -> ID
Rule 49    argument -> number
Rule 50    argument -> attribute
Rule 51    argument -> indexation
Rule 52    argument -> STRING
Rule 53    arguments -> argument
Rule 54    arguments -> argument COMMA arguments
Rule 55    method -> ID DOT functionCall
Rule 56    input -> GETS DOT CHOMP DOT TO_F
Rule 57    input -> GETS DOT CHOMP DOT TO_I
Rule 58    input -> GETS DOT CHOMP
Rule 59    parameters -> ID
Rule 60    parameters -> ID COMMA parameters
Rule 61    functionCall -> ID LPAREN arguments RPAREN
Rule 62    functionCall -> ID LPAREN RPAREN
Rule 63    creationStack -> STACK DOT NEW
Rule 64    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 65    creationLinkedList -> LINKEDLIST DOT NEW
Rule 66    creationTDA -> creationStack
Rule 67    creationTDA -> creationLinkedList
Rule 68    creationTDA -> creationHashmap
Rule 69    creationHashmap -> HASH DOT NEW
Rule 70    creationHashmap -> LBRACE pairs RBRACE
Rule 71    creationHashmap -> LBRACE RBRACE
Rule 72    pair -> STRING COLON value
Rule 73    pairs -> pair
Rule 74    pairs -> pair COMMA pairs
Rule 75    value -> ID
Rule 76    value -> STRING
Rule 77    value -> number
Rule 78    value -> LBRACE pairs RBRACE
Rule 79    value -> LBRACE RBRACE
Rule 80    arithmeticOperator -> PLUS
Rule 81    arithmeticOperator -> MINUS
Rule 82    arithmeticOperator -> POWER
Rule 83    arithmeticOperator -> MULTIPLICATION
Rule 84    arithmeticOperator -> DIVISION
Rule 85    attribute -> ID DOT ID
Rule 86    operationValue -> ID
Rule 87    operationValue -> number
Rule 88    operationValue -> attribute
Rule 89    operationValue -> indexation
Rule 90    operation -> operationValue arithmeticOperator operationValue
Rule 91    operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN
Rule 92    operations -> operation
Rule 93    operations -> operation arithmeticOperator operations
Rule 94    operations -> operation arithmeticOperator operationValue
Rule 95    operations -> operationValue arithmeticOperator operation
Rule 96    array -> OPENBRACKET element_list CLOSEDBRACKET
Rule 97    array -> OPENBRACKET CLOSEDBRACKET
Rule 98    element_list -> conditionValue
Rule 99    element_list -> element_list COMMA conditionValue
Rule 100   conditionValue -> ID
Rule 101   conditionValue -> number
Rule 102   conditionValue -> indexation
Rule 103   conditionValue -> attribute
Rule 104   arrayConcat -> ID ARRAYAPPEND ID
Rule 105   arrayConcat -> ID ARRAYAPPEND number
Rule 106   indexation -> ID OPENBRACKET element_list CLOSEDBRACKET
Rule 107   indexation -> ID OPENBRACKET operation CLOSEDBRACKET
Rule 108   condition -> conditionValue comparator conditionValue
Rule 109   comparator -> GREATERTHAN
Rule 110   comparator -> LESSTHAN
Rule 111   comparator -> EQUALS
Rule 112   comparator -> GREATEROREQUALS
Rule 113   comparator -> LESSOREQUALS
Rule 114   unariOperator -> ID ASSIGNDECREMENT number
Rule 115   unariOperator -> ID ASSIGNINCREMENT number
Rule 116   number -> FLOAT
Rule 117   number -> INTEGER
Rule 118   dataType -> STRING
Rule 119   dataType -> number

Terminals, with rules where they appear

AND                  : 
ARRAYAPPEND          : 104 105
ASSIGNDECREMENT      : 114
ASSIGNINCREMENT      : 115
ASSIGNMENT           : 18 19 20 21 22 23 24 25 26 27 28
BREAK                : 
CASE                 : 
CHOMP                : 56 57 58
CLASS                : 
CLOSEDBRACKET        : 64 96 97 106 107
COLON                : 72
COMMA                : 54 60 74 99
DEF                  : 2 3
DIVISION             : 84
DOT                  : 55 56 56 57 57 58 63 65 69 85
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 111
FALSE                : 22 43
FLOAT                : 116
FOR                  : 
GETS                 : 56 57 58
GREATEROREQUALS      : 112
GREATERTHAN          : 109
HASH                 : 69
ID                   : 2 3 18 19 19 20 21 22 23 24 25 26 27 28 41 48 55 59 60 61 62 75 85 85 86 100 104 104 105 106 107 114 115
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 117
LBRACE               : 70 71 78 79
LESSOREQUALS         : 113
LESSTHAN             : 110
LINKEDLIST           : 65
LPAREN               : 2 3 61 62 91
MINUS                : 81
MULTIPLICATION       : 83
NEW                  : 63 65 69
NODE                 : 
OPENBRACKET          : 64 96 97 106 107
PLUS                 : 80
POWER                : 82
PRINT                : 30
PUTS                 : 36
RBRACE               : 70 71 78 79
RETURN               : 35
RPAREN               : 2 3 61 62 91
STACK                : 63
STRING               : 52 72 76 118
THEN                 : 
TO_F                 : 56
TO_I                 : 57
TRUE                 : 21 42
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

argument             : 53 54
arguments            : 35 54 61
arithmeticOperator   : 90 91 93 94 95
array                : 25
arrayConcat          : 34
assignmentRule       : 29
attribute            : 27 50 88 103
bodyLine             : 39 40
comparator           : 108
condition            : 5 6 7 8 9 15 20 45
conditionValue       : 98 99 108 108
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationHashmap      : 68
creationLinkedList   : 67
creationStack        : 66
creationTDA          : 23
dataType             : 44
element_list         : 96 99 106
elsif                : 12 13
functionCall         : 33 47 55
indexation           : 26 51 89 102
input                : 28
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 40
method               : 37 46
nestedConditional    : 11 31
nestedWhile          : 17 32
number               : 18 49 77 87 101 105 114 115 119
operation            : 92 93 94 95 107
operationValue       : 90 90 91 91 94 95
operations           : 24 93
pair                 : 73 74
pairs                : 70 74 78
parameters           : 2 60
printBody            : 30 36
unariOperator        : 38
value                : 72
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 20


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (24) assignmentRule -> ID . ASSIGNMENT operations
    (25) assignmentRule -> ID . ASSIGNMENT array
    (26) assignmentRule -> ID . ASSIGNMENT indexation
    (27) assignmentRule -> ID . ASSIGNMENT attribute
    (28) assignmentRule -> ID . ASSIGNMENT input
    (61) functionCall -> ID . LPAREN arguments RPAREN
    (62) functionCall -> ID . LPAREN RPAREN
    (104) arrayConcat -> ID . ARRAYAPPEND ID
    (105) arrayConcat -> ID . ARRAYAPPEND number
    (55) method -> ID . DOT functionCall
    (114) unariOperator -> ID . ASSIGNDECREMENT number
    (115) unariOperator -> ID . ASSIGNINCREMENT number

    ASSIGNMENT      shift and go to state 21
    LPAREN          shift and go to state 22
    ARRAYAPPEND     shift and go to state 23
    DOT             shift and go to state 24
    ASSIGNDECREMENT shift and go to state 25
    ASSIGNINCREMENT shift and go to state 26


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    RETURN          reduce using rule 10 (nestedConditional -> conditional .)
    PUTS            reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 27
    nestedConditional              shift and go to state 28

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 16 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 29
    nestedWhile                    shift and go to state 30

state 7

    (39) instructionBody -> bodyLine .
    (40) instructionBody -> bodyLine . instructionBody
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 39 (instructionBody -> bodyLine .)
    END             reduce using rule 39 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 39 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 39 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 31
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (108) condition -> . conditionValue comparator conditionValue
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    condition                      shift and go to state 32
    conditionValue                 shift and go to state 33
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (108) condition -> . conditionValue comparator conditionValue
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    condition                      shift and go to state 40
    conditionValue                 shift and go to state 33
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 10

    (29) bodyLine -> assignmentRule .

    PRINT           reduce using rule 29 (bodyLine -> assignmentRule .)
    RETURN          reduce using rule 29 (bodyLine -> assignmentRule .)
    PUTS            reduce using rule 29 (bodyLine -> assignmentRule .)
    ID              reduce using rule 29 (bodyLine -> assignmentRule .)
    IF              reduce using rule 29 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 29 (bodyLine -> assignmentRule .)
    $end            reduce using rule 29 (bodyLine -> assignmentRule .)
    END             reduce using rule 29 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 29 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 29 (bodyLine -> assignmentRule .)


state 11

    (30) bodyLine -> PRINT . printBody
    (41) printBody -> . ID
    (42) printBody -> . TRUE
    (43) printBody -> . FALSE
    (44) printBody -> . dataType
    (45) printBody -> . condition
    (46) printBody -> . method
    (47) printBody -> . functionCall
    (118) dataType -> . STRING
    (119) dataType -> . number
    (108) condition -> . conditionValue comparator conditionValue
    (55) method -> . ID DOT functionCall
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    STRING          shift and go to state 49
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    printBody                      shift and go to state 41
    dataType                       shift and go to state 45
    condition                      shift and go to state 46
    method                         shift and go to state 47
    functionCall                   shift and go to state 48
    number                         shift and go to state 50
    conditionValue                 shift and go to state 33
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 12

    (31) bodyLine -> nestedConditional .

    PRINT           reduce using rule 31 (bodyLine -> nestedConditional .)
    RETURN          reduce using rule 31 (bodyLine -> nestedConditional .)
    PUTS            reduce using rule 31 (bodyLine -> nestedConditional .)
    ID              reduce using rule 31 (bodyLine -> nestedConditional .)
    IF              reduce using rule 31 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 31 (bodyLine -> nestedConditional .)
    $end            reduce using rule 31 (bodyLine -> nestedConditional .)
    END             reduce using rule 31 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 31 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 31 (bodyLine -> nestedConditional .)


state 13

    (32) bodyLine -> nestedWhile .

    PRINT           reduce using rule 32 (bodyLine -> nestedWhile .)
    RETURN          reduce using rule 32 (bodyLine -> nestedWhile .)
    PUTS            reduce using rule 32 (bodyLine -> nestedWhile .)
    ID              reduce using rule 32 (bodyLine -> nestedWhile .)
    IF              reduce using rule 32 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 32 (bodyLine -> nestedWhile .)
    $end            reduce using rule 32 (bodyLine -> nestedWhile .)
    END             reduce using rule 32 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 32 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 32 (bodyLine -> nestedWhile .)


state 14

    (33) bodyLine -> functionCall .

    PRINT           reduce using rule 33 (bodyLine -> functionCall .)
    RETURN          reduce using rule 33 (bodyLine -> functionCall .)
    PUTS            reduce using rule 33 (bodyLine -> functionCall .)
    ID              reduce using rule 33 (bodyLine -> functionCall .)
    IF              reduce using rule 33 (bodyLine -> functionCall .)
    WHILE           reduce using rule 33 (bodyLine -> functionCall .)
    $end            reduce using rule 33 (bodyLine -> functionCall .)
    END             reduce using rule 33 (bodyLine -> functionCall .)
    ELSE            reduce using rule 33 (bodyLine -> functionCall .)
    ELSIF           reduce using rule 33 (bodyLine -> functionCall .)


state 15

    (34) bodyLine -> arrayConcat .

    PRINT           reduce using rule 34 (bodyLine -> arrayConcat .)
    RETURN          reduce using rule 34 (bodyLine -> arrayConcat .)
    PUTS            reduce using rule 34 (bodyLine -> arrayConcat .)
    ID              reduce using rule 34 (bodyLine -> arrayConcat .)
    IF              reduce using rule 34 (bodyLine -> arrayConcat .)
    WHILE           reduce using rule 34 (bodyLine -> arrayConcat .)
    $end            reduce using rule 34 (bodyLine -> arrayConcat .)
    END             reduce using rule 34 (bodyLine -> arrayConcat .)
    ELSE            reduce using rule 34 (bodyLine -> arrayConcat .)
    ELSIF           reduce using rule 34 (bodyLine -> arrayConcat .)


state 16

    (35) bodyLine -> RETURN . arguments
    (53) arguments -> . argument
    (54) arguments -> . argument COMMA arguments
    (48) argument -> . ID
    (49) argument -> . number
    (50) argument -> . attribute
    (51) argument -> . indexation
    (52) argument -> . STRING
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 53
    STRING          shift and go to state 57
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    arguments                      shift and go to state 51
    argument                       shift and go to state 52
    number                         shift and go to state 54
    attribute                      shift and go to state 55
    indexation                     shift and go to state 56

state 17

    (36) bodyLine -> PUTS . printBody
    (41) printBody -> . ID
    (42) printBody -> . TRUE
    (43) printBody -> . FALSE
    (44) printBody -> . dataType
    (45) printBody -> . condition
    (46) printBody -> . method
    (47) printBody -> . functionCall
    (118) dataType -> . STRING
    (119) dataType -> . number
    (108) condition -> . conditionValue comparator conditionValue
    (55) method -> . ID DOT functionCall
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 42
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    STRING          shift and go to state 49
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    printBody                      shift and go to state 58
    dataType                       shift and go to state 45
    condition                      shift and go to state 46
    method                         shift and go to state 47
    functionCall                   shift and go to state 48
    number                         shift and go to state 50
    conditionValue                 shift and go to state 33
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 18

    (37) bodyLine -> method .

    PRINT           reduce using rule 37 (bodyLine -> method .)
    RETURN          reduce using rule 37 (bodyLine -> method .)
    PUTS            reduce using rule 37 (bodyLine -> method .)
    ID              reduce using rule 37 (bodyLine -> method .)
    IF              reduce using rule 37 (bodyLine -> method .)
    WHILE           reduce using rule 37 (bodyLine -> method .)
    $end            reduce using rule 37 (bodyLine -> method .)
    END             reduce using rule 37 (bodyLine -> method .)
    ELSE            reduce using rule 37 (bodyLine -> method .)
    ELSIF           reduce using rule 37 (bodyLine -> method .)


state 19

    (38) bodyLine -> unariOperator .

    PRINT           reduce using rule 38 (bodyLine -> unariOperator .)
    RETURN          reduce using rule 38 (bodyLine -> unariOperator .)
    PUTS            reduce using rule 38 (bodyLine -> unariOperator .)
    ID              reduce using rule 38 (bodyLine -> unariOperator .)
    IF              reduce using rule 38 (bodyLine -> unariOperator .)
    WHILE           reduce using rule 38 (bodyLine -> unariOperator .)
    $end            reduce using rule 38 (bodyLine -> unariOperator .)
    END             reduce using rule 38 (bodyLine -> unariOperator .)
    ELSE            reduce using rule 38 (bodyLine -> unariOperator .)
    ELSIF           reduce using rule 38 (bodyLine -> unariOperator .)


state 20

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 59


state 21

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (24) assignmentRule -> ID ASSIGNMENT . operations
    (25) assignmentRule -> ID ASSIGNMENT . array
    (26) assignmentRule -> ID ASSIGNMENT . indexation
    (27) assignmentRule -> ID ASSIGNMENT . attribute
    (28) assignmentRule -> ID ASSIGNMENT . input
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (108) condition -> . conditionValue comparator conditionValue
    (66) creationTDA -> . creationStack
    (67) creationTDA -> . creationLinkedList
    (68) creationTDA -> . creationHashmap
    (92) operations -> . operation
    (93) operations -> . operation arithmeticOperator operations
    (94) operations -> . operation arithmeticOperator operationValue
    (95) operations -> . operationValue arithmeticOperator operation
    (96) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (97) array -> . OPENBRACKET CLOSEDBRACKET
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID
    (56) input -> . GETS DOT CHOMP DOT TO_F
    (57) input -> . GETS DOT CHOMP DOT TO_I
    (58) input -> . GETS DOT CHOMP
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (63) creationStack -> . STACK DOT NEW
    (64) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (65) creationLinkedList -> . LINKEDLIST DOT NEW
    (69) creationHashmap -> . HASH DOT NEW
    (70) creationHashmap -> . LBRACE pairs RBRACE
    (71) creationHashmap -> . LBRACE RBRACE
    (90) operation -> . operationValue arithmeticOperator operationValue
    (91) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation

    ID              shift and go to state 60
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39
    OPENBRACKET     shift and go to state 76
    GETS            shift and go to state 77
    STACK           shift and go to state 78
    LINKEDLIST      shift and go to state 79
    HASH            shift and go to state 80
    LBRACE          shift and go to state 81
    LPAREN          shift and go to state 82

    number                         shift and go to state 61
    condition                      shift and go to state 62
    creationTDA                    shift and go to state 65
    operations                     shift and go to state 66
    array                          shift and go to state 67
    indexation                     shift and go to state 68
    attribute                      shift and go to state 69
    input                          shift and go to state 70
    conditionValue                 shift and go to state 33
    creationStack                  shift and go to state 71
    creationLinkedList             shift and go to state 72
    creationHashmap                shift and go to state 73
    operation                      shift and go to state 74
    operationValue                 shift and go to state 75

state 22

    (61) functionCall -> ID LPAREN . arguments RPAREN
    (62) functionCall -> ID LPAREN . RPAREN
    (53) arguments -> . argument
    (54) arguments -> . argument COMMA arguments
    (48) argument -> . ID
    (49) argument -> . number
    (50) argument -> . attribute
    (51) argument -> . indexation
    (52) argument -> . STRING
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    RPAREN          shift and go to state 84
    ID              shift and go to state 53
    STRING          shift and go to state 57
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    arguments                      shift and go to state 83
    argument                       shift and go to state 52
    number                         shift and go to state 54
    attribute                      shift and go to state 55
    indexation                     shift and go to state 56

state 23

    (104) arrayConcat -> ID ARRAYAPPEND . ID
    (105) arrayConcat -> ID ARRAYAPPEND . number
    (116) number -> . FLOAT
    (117) number -> . INTEGER

    ID              shift and go to state 85
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    number                         shift and go to state 86

state 24

    (55) method -> ID DOT . functionCall
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 87

    functionCall                   shift and go to state 88

state 25

    (114) unariOperator -> ID ASSIGNDECREMENT . number
    (116) number -> . FLOAT
    (117) number -> . INTEGER

    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    number                         shift and go to state 89

state 26

    (115) unariOperator -> ID ASSIGNINCREMENT . number
    (116) number -> . FLOAT
    (117) number -> . INTEGER

    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    number                         shift and go to state 90

state 27

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    RETURN          reduce using rule 10 (nestedConditional -> conditional .)
    PUTS            reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 27
    nestedConditional              shift and go to state 28

state 28

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    RETURN          reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    PUTS            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 29

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 16 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 29
    nestedWhile                    shift and go to state 30

state 30

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    RETURN          reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    PUTS            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 31

    (40) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 40 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 40 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 40 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 40 (instructionBody -> bodyLine instructionBody .)


state 32

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 91
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 33

    (108) condition -> conditionValue . comparator conditionValue
    (109) comparator -> . GREATERTHAN
    (110) comparator -> . LESSTHAN
    (111) comparator -> . EQUALS
    (112) comparator -> . GREATEROREQUALS
    (113) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 93
    LESSTHAN        shift and go to state 94
    EQUALS          shift and go to state 95
    GREATEROREQUALS shift and go to state 96
    LESSOREQUALS    shift and go to state 97

    comparator                     shift and go to state 92

state 34

    (100) conditionValue -> ID .
    (106) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> ID . DOT ID

    GREATERTHAN     reduce using rule 100 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 100 (conditionValue -> ID .)
    EQUALS          reduce using rule 100 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 100 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 100 (conditionValue -> ID .)
    CLOSEDBRACKET   reduce using rule 100 (conditionValue -> ID .)
    COMMA           reduce using rule 100 (conditionValue -> ID .)
    PRINT           reduce using rule 100 (conditionValue -> ID .)
    RETURN          reduce using rule 100 (conditionValue -> ID .)
    PUTS            reduce using rule 100 (conditionValue -> ID .)
    ID              reduce using rule 100 (conditionValue -> ID .)
    IF              reduce using rule 100 (conditionValue -> ID .)
    WHILE           reduce using rule 100 (conditionValue -> ID .)
    $end            reduce using rule 100 (conditionValue -> ID .)
    END             reduce using rule 100 (conditionValue -> ID .)
    ELSE            reduce using rule 100 (conditionValue -> ID .)
    ELSIF           reduce using rule 100 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 98
    DOT             shift and go to state 99


state 35

    (101) conditionValue -> number .

    GREATERTHAN     reduce using rule 101 (conditionValue -> number .)
    LESSTHAN        reduce using rule 101 (conditionValue -> number .)
    EQUALS          reduce using rule 101 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 101 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 101 (conditionValue -> number .)
    CLOSEDBRACKET   reduce using rule 101 (conditionValue -> number .)
    COMMA           reduce using rule 101 (conditionValue -> number .)
    PRINT           reduce using rule 101 (conditionValue -> number .)
    RETURN          reduce using rule 101 (conditionValue -> number .)
    PUTS            reduce using rule 101 (conditionValue -> number .)
    ID              reduce using rule 101 (conditionValue -> number .)
    IF              reduce using rule 101 (conditionValue -> number .)
    WHILE           reduce using rule 101 (conditionValue -> number .)
    $end            reduce using rule 101 (conditionValue -> number .)
    END             reduce using rule 101 (conditionValue -> number .)
    ELSE            reduce using rule 101 (conditionValue -> number .)
    ELSIF           reduce using rule 101 (conditionValue -> number .)


state 36

    (102) conditionValue -> indexation .

    GREATERTHAN     reduce using rule 102 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 102 (conditionValue -> indexation .)
    EQUALS          reduce using rule 102 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 102 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 102 (conditionValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 102 (conditionValue -> indexation .)
    COMMA           reduce using rule 102 (conditionValue -> indexation .)
    PRINT           reduce using rule 102 (conditionValue -> indexation .)
    RETURN          reduce using rule 102 (conditionValue -> indexation .)
    PUTS            reduce using rule 102 (conditionValue -> indexation .)
    ID              reduce using rule 102 (conditionValue -> indexation .)
    IF              reduce using rule 102 (conditionValue -> indexation .)
    WHILE           reduce using rule 102 (conditionValue -> indexation .)
    $end            reduce using rule 102 (conditionValue -> indexation .)
    END             reduce using rule 102 (conditionValue -> indexation .)
    ELSE            reduce using rule 102 (conditionValue -> indexation .)
    ELSIF           reduce using rule 102 (conditionValue -> indexation .)


state 37

    (103) conditionValue -> attribute .

    GREATERTHAN     reduce using rule 103 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 103 (conditionValue -> attribute .)
    EQUALS          reduce using rule 103 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 103 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 103 (conditionValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 103 (conditionValue -> attribute .)
    COMMA           reduce using rule 103 (conditionValue -> attribute .)
    PRINT           reduce using rule 103 (conditionValue -> attribute .)
    RETURN          reduce using rule 103 (conditionValue -> attribute .)
    PUTS            reduce using rule 103 (conditionValue -> attribute .)
    ID              reduce using rule 103 (conditionValue -> attribute .)
    IF              reduce using rule 103 (conditionValue -> attribute .)
    WHILE           reduce using rule 103 (conditionValue -> attribute .)
    $end            reduce using rule 103 (conditionValue -> attribute .)
    END             reduce using rule 103 (conditionValue -> attribute .)
    ELSE            reduce using rule 103 (conditionValue -> attribute .)
    ELSIF           reduce using rule 103 (conditionValue -> attribute .)


state 38

    (116) number -> FLOAT .

    GREATERTHAN     reduce using rule 116 (number -> FLOAT .)
    LESSTHAN        reduce using rule 116 (number -> FLOAT .)
    EQUALS          reduce using rule 116 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 116 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 116 (number -> FLOAT .)
    PRINT           reduce using rule 116 (number -> FLOAT .)
    RETURN          reduce using rule 116 (number -> FLOAT .)
    PUTS            reduce using rule 116 (number -> FLOAT .)
    ID              reduce using rule 116 (number -> FLOAT .)
    IF              reduce using rule 116 (number -> FLOAT .)
    WHILE           reduce using rule 116 (number -> FLOAT .)
    $end            reduce using rule 116 (number -> FLOAT .)
    END             reduce using rule 116 (number -> FLOAT .)
    ELSE            reduce using rule 116 (number -> FLOAT .)
    ELSIF           reduce using rule 116 (number -> FLOAT .)
    COMMA           reduce using rule 116 (number -> FLOAT .)
    PLUS            reduce using rule 116 (number -> FLOAT .)
    MINUS           reduce using rule 116 (number -> FLOAT .)
    POWER           reduce using rule 116 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 116 (number -> FLOAT .)
    DIVISION        reduce using rule 116 (number -> FLOAT .)
    RPAREN          reduce using rule 116 (number -> FLOAT .)
    CLOSEDBRACKET   reduce using rule 116 (number -> FLOAT .)
    RBRACE          reduce using rule 116 (number -> FLOAT .)


state 39

    (117) number -> INTEGER .

    GREATERTHAN     reduce using rule 117 (number -> INTEGER .)
    LESSTHAN        reduce using rule 117 (number -> INTEGER .)
    EQUALS          reduce using rule 117 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 117 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 117 (number -> INTEGER .)
    PRINT           reduce using rule 117 (number -> INTEGER .)
    RETURN          reduce using rule 117 (number -> INTEGER .)
    PUTS            reduce using rule 117 (number -> INTEGER .)
    ID              reduce using rule 117 (number -> INTEGER .)
    IF              reduce using rule 117 (number -> INTEGER .)
    WHILE           reduce using rule 117 (number -> INTEGER .)
    $end            reduce using rule 117 (number -> INTEGER .)
    END             reduce using rule 117 (number -> INTEGER .)
    ELSE            reduce using rule 117 (number -> INTEGER .)
    ELSIF           reduce using rule 117 (number -> INTEGER .)
    COMMA           reduce using rule 117 (number -> INTEGER .)
    PLUS            reduce using rule 117 (number -> INTEGER .)
    MINUS           reduce using rule 117 (number -> INTEGER .)
    POWER           reduce using rule 117 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 117 (number -> INTEGER .)
    DIVISION        reduce using rule 117 (number -> INTEGER .)
    RPAREN          reduce using rule 117 (number -> INTEGER .)
    CLOSEDBRACKET   reduce using rule 117 (number -> INTEGER .)
    RBRACE          reduce using rule 117 (number -> INTEGER .)


state 40

    (15) whileLoop -> WHILE condition . instructionBody END
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 100
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 41

    (30) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 30 (bodyLine -> PRINT printBody .)
    RETURN          reduce using rule 30 (bodyLine -> PRINT printBody .)
    PUTS            reduce using rule 30 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 30 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 30 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 30 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 30 (bodyLine -> PRINT printBody .)
    END             reduce using rule 30 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 30 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 30 (bodyLine -> PRINT printBody .)


state 42

    (41) printBody -> ID .
    (55) method -> ID . DOT functionCall
    (61) functionCall -> ID . LPAREN arguments RPAREN
    (62) functionCall -> ID . LPAREN RPAREN
    (100) conditionValue -> ID .
    (106) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> ID . DOT ID

    PRINT           reduce using rule 41 (printBody -> ID .)
    RETURN          reduce using rule 41 (printBody -> ID .)
    PUTS            reduce using rule 41 (printBody -> ID .)
    ID              reduce using rule 41 (printBody -> ID .)
    IF              reduce using rule 41 (printBody -> ID .)
    WHILE           reduce using rule 41 (printBody -> ID .)
    $end            reduce using rule 41 (printBody -> ID .)
    END             reduce using rule 41 (printBody -> ID .)
    ELSE            reduce using rule 41 (printBody -> ID .)
    ELSIF           reduce using rule 41 (printBody -> ID .)
    DOT             shift and go to state 101
    LPAREN          shift and go to state 22
    GREATERTHAN     reduce using rule 100 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 100 (conditionValue -> ID .)
    EQUALS          reduce using rule 100 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 100 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 100 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 98


state 43

    (42) printBody -> TRUE .

    PRINT           reduce using rule 42 (printBody -> TRUE .)
    RETURN          reduce using rule 42 (printBody -> TRUE .)
    PUTS            reduce using rule 42 (printBody -> TRUE .)
    ID              reduce using rule 42 (printBody -> TRUE .)
    IF              reduce using rule 42 (printBody -> TRUE .)
    WHILE           reduce using rule 42 (printBody -> TRUE .)
    $end            reduce using rule 42 (printBody -> TRUE .)
    END             reduce using rule 42 (printBody -> TRUE .)
    ELSE            reduce using rule 42 (printBody -> TRUE .)
    ELSIF           reduce using rule 42 (printBody -> TRUE .)


state 44

    (43) printBody -> FALSE .

    PRINT           reduce using rule 43 (printBody -> FALSE .)
    RETURN          reduce using rule 43 (printBody -> FALSE .)
    PUTS            reduce using rule 43 (printBody -> FALSE .)
    ID              reduce using rule 43 (printBody -> FALSE .)
    IF              reduce using rule 43 (printBody -> FALSE .)
    WHILE           reduce using rule 43 (printBody -> FALSE .)
    $end            reduce using rule 43 (printBody -> FALSE .)
    END             reduce using rule 43 (printBody -> FALSE .)
    ELSE            reduce using rule 43 (printBody -> FALSE .)
    ELSIF           reduce using rule 43 (printBody -> FALSE .)


state 45

    (44) printBody -> dataType .

    PRINT           reduce using rule 44 (printBody -> dataType .)
    RETURN          reduce using rule 44 (printBody -> dataType .)
    PUTS            reduce using rule 44 (printBody -> dataType .)
    ID              reduce using rule 44 (printBody -> dataType .)
    IF              reduce using rule 44 (printBody -> dataType .)
    WHILE           reduce using rule 44 (printBody -> dataType .)
    $end            reduce using rule 44 (printBody -> dataType .)
    END             reduce using rule 44 (printBody -> dataType .)
    ELSE            reduce using rule 44 (printBody -> dataType .)
    ELSIF           reduce using rule 44 (printBody -> dataType .)


state 46

    (45) printBody -> condition .

    PRINT           reduce using rule 45 (printBody -> condition .)
    RETURN          reduce using rule 45 (printBody -> condition .)
    PUTS            reduce using rule 45 (printBody -> condition .)
    ID              reduce using rule 45 (printBody -> condition .)
    IF              reduce using rule 45 (printBody -> condition .)
    WHILE           reduce using rule 45 (printBody -> condition .)
    $end            reduce using rule 45 (printBody -> condition .)
    END             reduce using rule 45 (printBody -> condition .)
    ELSE            reduce using rule 45 (printBody -> condition .)
    ELSIF           reduce using rule 45 (printBody -> condition .)


state 47

    (46) printBody -> method .

    PRINT           reduce using rule 46 (printBody -> method .)
    RETURN          reduce using rule 46 (printBody -> method .)
    PUTS            reduce using rule 46 (printBody -> method .)
    ID              reduce using rule 46 (printBody -> method .)
    IF              reduce using rule 46 (printBody -> method .)
    WHILE           reduce using rule 46 (printBody -> method .)
    $end            reduce using rule 46 (printBody -> method .)
    END             reduce using rule 46 (printBody -> method .)
    ELSE            reduce using rule 46 (printBody -> method .)
    ELSIF           reduce using rule 46 (printBody -> method .)


state 48

    (47) printBody -> functionCall .

    PRINT           reduce using rule 47 (printBody -> functionCall .)
    RETURN          reduce using rule 47 (printBody -> functionCall .)
    PUTS            reduce using rule 47 (printBody -> functionCall .)
    ID              reduce using rule 47 (printBody -> functionCall .)
    IF              reduce using rule 47 (printBody -> functionCall .)
    WHILE           reduce using rule 47 (printBody -> functionCall .)
    $end            reduce using rule 47 (printBody -> functionCall .)
    END             reduce using rule 47 (printBody -> functionCall .)
    ELSE            reduce using rule 47 (printBody -> functionCall .)
    ELSIF           reduce using rule 47 (printBody -> functionCall .)


state 49

    (118) dataType -> STRING .

    PRINT           reduce using rule 118 (dataType -> STRING .)
    RETURN          reduce using rule 118 (dataType -> STRING .)
    PUTS            reduce using rule 118 (dataType -> STRING .)
    ID              reduce using rule 118 (dataType -> STRING .)
    IF              reduce using rule 118 (dataType -> STRING .)
    WHILE           reduce using rule 118 (dataType -> STRING .)
    $end            reduce using rule 118 (dataType -> STRING .)
    END             reduce using rule 118 (dataType -> STRING .)
    ELSE            reduce using rule 118 (dataType -> STRING .)
    ELSIF           reduce using rule 118 (dataType -> STRING .)


state 50

    (119) dataType -> number .
    (101) conditionValue -> number .

    PRINT           reduce using rule 119 (dataType -> number .)
    RETURN          reduce using rule 119 (dataType -> number .)
    PUTS            reduce using rule 119 (dataType -> number .)
    ID              reduce using rule 119 (dataType -> number .)
    IF              reduce using rule 119 (dataType -> number .)
    WHILE           reduce using rule 119 (dataType -> number .)
    $end            reduce using rule 119 (dataType -> number .)
    END             reduce using rule 119 (dataType -> number .)
    ELSE            reduce using rule 119 (dataType -> number .)
    ELSIF           reduce using rule 119 (dataType -> number .)
    GREATERTHAN     reduce using rule 101 (conditionValue -> number .)
    LESSTHAN        reduce using rule 101 (conditionValue -> number .)
    EQUALS          reduce using rule 101 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 101 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 101 (conditionValue -> number .)


state 51

    (35) bodyLine -> RETURN arguments .

    PRINT           reduce using rule 35 (bodyLine -> RETURN arguments .)
    RETURN          reduce using rule 35 (bodyLine -> RETURN arguments .)
    PUTS            reduce using rule 35 (bodyLine -> RETURN arguments .)
    ID              reduce using rule 35 (bodyLine -> RETURN arguments .)
    IF              reduce using rule 35 (bodyLine -> RETURN arguments .)
    WHILE           reduce using rule 35 (bodyLine -> RETURN arguments .)
    $end            reduce using rule 35 (bodyLine -> RETURN arguments .)
    END             reduce using rule 35 (bodyLine -> RETURN arguments .)
    ELSE            reduce using rule 35 (bodyLine -> RETURN arguments .)
    ELSIF           reduce using rule 35 (bodyLine -> RETURN arguments .)


state 52

    (53) arguments -> argument .
    (54) arguments -> argument . COMMA arguments

    PRINT           reduce using rule 53 (arguments -> argument .)
    RETURN          reduce using rule 53 (arguments -> argument .)
    PUTS            reduce using rule 53 (arguments -> argument .)
    ID              reduce using rule 53 (arguments -> argument .)
    IF              reduce using rule 53 (arguments -> argument .)
    WHILE           reduce using rule 53 (arguments -> argument .)
    $end            reduce using rule 53 (arguments -> argument .)
    END             reduce using rule 53 (arguments -> argument .)
    ELSE            reduce using rule 53 (arguments -> argument .)
    ELSIF           reduce using rule 53 (arguments -> argument .)
    RPAREN          reduce using rule 53 (arguments -> argument .)
    COMMA           shift and go to state 102


state 53

    (48) argument -> ID .
    (85) attribute -> ID . DOT ID
    (106) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    COMMA           reduce using rule 48 (argument -> ID .)
    PRINT           reduce using rule 48 (argument -> ID .)
    RETURN          reduce using rule 48 (argument -> ID .)
    PUTS            reduce using rule 48 (argument -> ID .)
    ID              reduce using rule 48 (argument -> ID .)
    IF              reduce using rule 48 (argument -> ID .)
    WHILE           reduce using rule 48 (argument -> ID .)
    $end            reduce using rule 48 (argument -> ID .)
    END             reduce using rule 48 (argument -> ID .)
    ELSE            reduce using rule 48 (argument -> ID .)
    ELSIF           reduce using rule 48 (argument -> ID .)
    RPAREN          reduce using rule 48 (argument -> ID .)
    DOT             shift and go to state 99
    OPENBRACKET     shift and go to state 98


state 54

    (49) argument -> number .

    COMMA           reduce using rule 49 (argument -> number .)
    PRINT           reduce using rule 49 (argument -> number .)
    RETURN          reduce using rule 49 (argument -> number .)
    PUTS            reduce using rule 49 (argument -> number .)
    ID              reduce using rule 49 (argument -> number .)
    IF              reduce using rule 49 (argument -> number .)
    WHILE           reduce using rule 49 (argument -> number .)
    $end            reduce using rule 49 (argument -> number .)
    END             reduce using rule 49 (argument -> number .)
    ELSE            reduce using rule 49 (argument -> number .)
    ELSIF           reduce using rule 49 (argument -> number .)
    RPAREN          reduce using rule 49 (argument -> number .)


state 55

    (50) argument -> attribute .

    COMMA           reduce using rule 50 (argument -> attribute .)
    PRINT           reduce using rule 50 (argument -> attribute .)
    RETURN          reduce using rule 50 (argument -> attribute .)
    PUTS            reduce using rule 50 (argument -> attribute .)
    ID              reduce using rule 50 (argument -> attribute .)
    IF              reduce using rule 50 (argument -> attribute .)
    WHILE           reduce using rule 50 (argument -> attribute .)
    $end            reduce using rule 50 (argument -> attribute .)
    END             reduce using rule 50 (argument -> attribute .)
    ELSE            reduce using rule 50 (argument -> attribute .)
    ELSIF           reduce using rule 50 (argument -> attribute .)
    RPAREN          reduce using rule 50 (argument -> attribute .)


state 56

    (51) argument -> indexation .

    COMMA           reduce using rule 51 (argument -> indexation .)
    PRINT           reduce using rule 51 (argument -> indexation .)
    RETURN          reduce using rule 51 (argument -> indexation .)
    PUTS            reduce using rule 51 (argument -> indexation .)
    ID              reduce using rule 51 (argument -> indexation .)
    IF              reduce using rule 51 (argument -> indexation .)
    WHILE           reduce using rule 51 (argument -> indexation .)
    $end            reduce using rule 51 (argument -> indexation .)
    END             reduce using rule 51 (argument -> indexation .)
    ELSE            reduce using rule 51 (argument -> indexation .)
    ELSIF           reduce using rule 51 (argument -> indexation .)
    RPAREN          reduce using rule 51 (argument -> indexation .)


state 57

    (52) argument -> STRING .

    COMMA           reduce using rule 52 (argument -> STRING .)
    PRINT           reduce using rule 52 (argument -> STRING .)
    RETURN          reduce using rule 52 (argument -> STRING .)
    PUTS            reduce using rule 52 (argument -> STRING .)
    ID              reduce using rule 52 (argument -> STRING .)
    IF              reduce using rule 52 (argument -> STRING .)
    WHILE           reduce using rule 52 (argument -> STRING .)
    $end            reduce using rule 52 (argument -> STRING .)
    END             reduce using rule 52 (argument -> STRING .)
    ELSE            reduce using rule 52 (argument -> STRING .)
    ELSIF           reduce using rule 52 (argument -> STRING .)
    RPAREN          reduce using rule 52 (argument -> STRING .)


state 58

    (36) bodyLine -> PUTS printBody .

    PRINT           reduce using rule 36 (bodyLine -> PUTS printBody .)
    RETURN          reduce using rule 36 (bodyLine -> PUTS printBody .)
    PUTS            reduce using rule 36 (bodyLine -> PUTS printBody .)
    ID              reduce using rule 36 (bodyLine -> PUTS printBody .)
    IF              reduce using rule 36 (bodyLine -> PUTS printBody .)
    WHILE           reduce using rule 36 (bodyLine -> PUTS printBody .)
    $end            reduce using rule 36 (bodyLine -> PUTS printBody .)
    END             reduce using rule 36 (bodyLine -> PUTS printBody .)
    ELSE            reduce using rule 36 (bodyLine -> PUTS printBody .)
    ELSIF           reduce using rule 36 (bodyLine -> PUTS printBody .)


state 59

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (59) parameters -> . ID
    (60) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 105
    ID              shift and go to state 103

    parameters                     shift and go to state 104

state 60

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (106) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> ID . DOT ID
    (100) conditionValue -> ID .
    (86) operationValue -> ID .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    RETURN          reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    PUTS            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    OPENBRACKET     shift and go to state 98
    DOT             shift and go to state 99
    GREATERTHAN     reduce using rule 100 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 100 (conditionValue -> ID .)
    EQUALS          reduce using rule 100 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 100 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 100 (conditionValue -> ID .)
    PLUS            reduce using rule 86 (operationValue -> ID .)
    MINUS           reduce using rule 86 (operationValue -> ID .)
    POWER           reduce using rule 86 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 86 (operationValue -> ID .)
    DIVISION        reduce using rule 86 (operationValue -> ID .)


state 61

    (18) assignmentRule -> ID ASSIGNMENT number .
    (101) conditionValue -> number .
    (87) operationValue -> number .

    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    RETURN          reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    PUTS            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 101 (conditionValue -> number .)
    LESSTHAN        reduce using rule 101 (conditionValue -> number .)
    EQUALS          reduce using rule 101 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 101 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 101 (conditionValue -> number .)
    PLUS            reduce using rule 87 (operationValue -> number .)
    MINUS           reduce using rule 87 (operationValue -> number .)
    POWER           reduce using rule 87 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 87 (operationValue -> number .)
    DIVISION        reduce using rule 87 (operationValue -> number .)


state 62

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    RETURN          reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    PUTS            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 63

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RETURN          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    PUTS            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 64

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RETURN          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    PUTS            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 65

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RETURN          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    PUTS            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 66

    (24) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    RETURN          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    PUTS            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)


state 67

    (25) assignmentRule -> ID ASSIGNMENT array .

    PRINT           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    RETURN          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    PUTS            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ID              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    IF              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    WHILE           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    $end            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    END             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ELSE            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ELSIF           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)


state 68

    (26) assignmentRule -> ID ASSIGNMENT indexation .
    (102) conditionValue -> indexation .
    (89) operationValue -> indexation .

    PRINT           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    RETURN          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    PUTS            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    ID              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    IF              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    WHILE           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    $end            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    END             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSE            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSIF           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    GREATERTHAN     reduce using rule 102 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 102 (conditionValue -> indexation .)
    EQUALS          reduce using rule 102 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 102 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 102 (conditionValue -> indexation .)
    PLUS            reduce using rule 89 (operationValue -> indexation .)
    MINUS           reduce using rule 89 (operationValue -> indexation .)
    POWER           reduce using rule 89 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 89 (operationValue -> indexation .)
    DIVISION        reduce using rule 89 (operationValue -> indexation .)


state 69

    (27) assignmentRule -> ID ASSIGNMENT attribute .
    (103) conditionValue -> attribute .
    (88) operationValue -> attribute .

    PRINT           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    RETURN          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    PUTS            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    ID              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    IF              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    WHILE           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    $end            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    END             reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSE            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSIF           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    GREATERTHAN     reduce using rule 103 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 103 (conditionValue -> attribute .)
    EQUALS          reduce using rule 103 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 103 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 103 (conditionValue -> attribute .)
    PLUS            reduce using rule 88 (operationValue -> attribute .)
    MINUS           reduce using rule 88 (operationValue -> attribute .)
    POWER           reduce using rule 88 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 88 (operationValue -> attribute .)
    DIVISION        reduce using rule 88 (operationValue -> attribute .)


state 70

    (28) assignmentRule -> ID ASSIGNMENT input .

    PRINT           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    RETURN          reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    PUTS            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    ID              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    IF              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    WHILE           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    $end            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    END             reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    ELSE            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)
    ELSIF           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT input .)


state 71

    (66) creationTDA -> creationStack .

    PRINT           reduce using rule 66 (creationTDA -> creationStack .)
    RETURN          reduce using rule 66 (creationTDA -> creationStack .)
    PUTS            reduce using rule 66 (creationTDA -> creationStack .)
    ID              reduce using rule 66 (creationTDA -> creationStack .)
    IF              reduce using rule 66 (creationTDA -> creationStack .)
    WHILE           reduce using rule 66 (creationTDA -> creationStack .)
    $end            reduce using rule 66 (creationTDA -> creationStack .)
    END             reduce using rule 66 (creationTDA -> creationStack .)
    ELSE            reduce using rule 66 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 66 (creationTDA -> creationStack .)


state 72

    (67) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 67 (creationTDA -> creationLinkedList .)
    RETURN          reduce using rule 67 (creationTDA -> creationLinkedList .)
    PUTS            reduce using rule 67 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 67 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 67 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 67 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 67 (creationTDA -> creationLinkedList .)
    END             reduce using rule 67 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 67 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 67 (creationTDA -> creationLinkedList .)


state 73

    (68) creationTDA -> creationHashmap .

    PRINT           reduce using rule 68 (creationTDA -> creationHashmap .)
    RETURN          reduce using rule 68 (creationTDA -> creationHashmap .)
    PUTS            reduce using rule 68 (creationTDA -> creationHashmap .)
    ID              reduce using rule 68 (creationTDA -> creationHashmap .)
    IF              reduce using rule 68 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 68 (creationTDA -> creationHashmap .)
    $end            reduce using rule 68 (creationTDA -> creationHashmap .)
    END             reduce using rule 68 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 68 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 68 (creationTDA -> creationHashmap .)


state 74

    (92) operations -> operation .
    (93) operations -> operation . arithmeticOperator operations
    (94) operations -> operation . arithmeticOperator operationValue
    (80) arithmeticOperator -> . PLUS
    (81) arithmeticOperator -> . MINUS
    (82) arithmeticOperator -> . POWER
    (83) arithmeticOperator -> . MULTIPLICATION
    (84) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 92 (operations -> operation .)
    RETURN          reduce using rule 92 (operations -> operation .)
    PUTS            reduce using rule 92 (operations -> operation .)
    ID              reduce using rule 92 (operations -> operation .)
    IF              reduce using rule 92 (operations -> operation .)
    WHILE           reduce using rule 92 (operations -> operation .)
    $end            reduce using rule 92 (operations -> operation .)
    END             reduce using rule 92 (operations -> operation .)
    ELSE            reduce using rule 92 (operations -> operation .)
    ELSIF           reduce using rule 92 (operations -> operation .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 106

state 75

    (95) operations -> operationValue . arithmeticOperator operation
    (90) operation -> operationValue . arithmeticOperator operationValue
    (80) arithmeticOperator -> . PLUS
    (81) arithmeticOperator -> . MINUS
    (82) arithmeticOperator -> . POWER
    (83) arithmeticOperator -> . MULTIPLICATION
    (84) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 112

state 76

    (96) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (97) array -> OPENBRACKET . CLOSEDBRACKET
    (64) creationStack -> OPENBRACKET . CLOSEDBRACKET
    (98) element_list -> . conditionValue
    (99) element_list -> . element_list COMMA conditionValue
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    CLOSEDBRACKET   shift and go to state 114
    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    element_list                   shift and go to state 113
    conditionValue                 shift and go to state 115
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 77

    (56) input -> GETS . DOT CHOMP DOT TO_F
    (57) input -> GETS . DOT CHOMP DOT TO_I
    (58) input -> GETS . DOT CHOMP

    DOT             shift and go to state 116


state 78

    (63) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 117


state 79

    (65) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 118


state 80

    (69) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 119


state 81

    (70) creationHashmap -> LBRACE . pairs RBRACE
    (71) creationHashmap -> LBRACE . RBRACE
    (73) pairs -> . pair
    (74) pairs -> . pair COMMA pairs
    (72) pair -> . STRING COLON value

    RBRACE          shift and go to state 121
    STRING          shift and go to state 123

    pairs                          shift and go to state 120
    pair                           shift and go to state 122

state 82

    (91) operation -> LPAREN . operationValue arithmeticOperator operationValue RPAREN
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 124
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 83

    (61) functionCall -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 129


state 84

    (62) functionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 62 (functionCall -> ID LPAREN RPAREN .)


state 85

    (104) arrayConcat -> ID ARRAYAPPEND ID .

    PRINT           reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    RETURN          reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    PUTS            reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    ID              reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    IF              reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    WHILE           reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    $end            reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    END             reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSE            reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSIF           reduce using rule 104 (arrayConcat -> ID ARRAYAPPEND ID .)


state 86

    (105) arrayConcat -> ID ARRAYAPPEND number .

    PRINT           reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    RETURN          reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    PUTS            reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    ID              reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    IF              reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    WHILE           reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    $end            reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    END             reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSE            reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSIF           reduce using rule 105 (arrayConcat -> ID ARRAYAPPEND number .)


state 87

    (61) functionCall -> ID . LPAREN arguments RPAREN
    (62) functionCall -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 22


state 88

    (55) method -> ID DOT functionCall .

    PRINT           reduce using rule 55 (method -> ID DOT functionCall .)
    RETURN          reduce using rule 55 (method -> ID DOT functionCall .)
    PUTS            reduce using rule 55 (method -> ID DOT functionCall .)
    ID              reduce using rule 55 (method -> ID DOT functionCall .)
    IF              reduce using rule 55 (method -> ID DOT functionCall .)
    WHILE           reduce using rule 55 (method -> ID DOT functionCall .)
    $end            reduce using rule 55 (method -> ID DOT functionCall .)
    END             reduce using rule 55 (method -> ID DOT functionCall .)
    ELSE            reduce using rule 55 (method -> ID DOT functionCall .)
    ELSIF           reduce using rule 55 (method -> ID DOT functionCall .)


state 89

    (114) unariOperator -> ID ASSIGNDECREMENT number .

    PRINT           reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    RETURN          reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    PUTS            reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    ID              reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    IF              reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    WHILE           reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    $end            reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    END             reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSE            reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSIF           reduce using rule 114 (unariOperator -> ID ASSIGNDECREMENT number .)


state 90

    (115) unariOperator -> ID ASSIGNINCREMENT number .

    PRINT           reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    RETURN          reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    PUTS            reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    ID              reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    IF              reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    WHILE           reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    $end            reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    END             reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSE            reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSIF           reduce using rule 115 (unariOperator -> ID ASSIGNINCREMENT number .)


state 91

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 130
    ELSE            shift and go to state 132
    ELSIF           shift and go to state 134

    conditionalElsif               shift and go to state 131
    elsif                          shift and go to state 133

state 92

    (108) condition -> conditionValue comparator . conditionValue
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    conditionValue                 shift and go to state 135
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 93

    (109) comparator -> GREATERTHAN .

    ID              reduce using rule 109 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 109 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 109 (comparator -> GREATERTHAN .)


state 94

    (110) comparator -> LESSTHAN .

    ID              reduce using rule 110 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 110 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 110 (comparator -> LESSTHAN .)


state 95

    (111) comparator -> EQUALS .

    ID              reduce using rule 111 (comparator -> EQUALS .)
    FLOAT           reduce using rule 111 (comparator -> EQUALS .)
    INTEGER         reduce using rule 111 (comparator -> EQUALS .)


state 96

    (112) comparator -> GREATEROREQUALS .

    ID              reduce using rule 112 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 112 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 112 (comparator -> GREATEROREQUALS .)


state 97

    (113) comparator -> LESSOREQUALS .

    ID              reduce using rule 113 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 113 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 113 (comparator -> LESSOREQUALS .)


state 98

    (106) indexation -> ID OPENBRACKET . element_list CLOSEDBRACKET
    (107) indexation -> ID OPENBRACKET . operation CLOSEDBRACKET
    (98) element_list -> . conditionValue
    (99) element_list -> . element_list COMMA conditionValue
    (90) operation -> . operationValue arithmeticOperator operationValue
    (91) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    LPAREN          shift and go to state 82
    ID              shift and go to state 136
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    element_list                   shift and go to state 137
    operation                      shift and go to state 138
    conditionValue                 shift and go to state 115
    operationValue                 shift and go to state 139
    number                         shift and go to state 140
    indexation                     shift and go to state 141
    attribute                      shift and go to state 142

state 99

    (85) attribute -> ID DOT . ID

    ID              shift and go to state 143


state 100

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 144


state 101

    (55) method -> ID DOT . functionCall
    (85) attribute -> ID DOT . ID
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 145

    functionCall                   shift and go to state 88

state 102

    (54) arguments -> argument COMMA . arguments
    (53) arguments -> . argument
    (54) arguments -> . argument COMMA arguments
    (48) argument -> . ID
    (49) argument -> . number
    (50) argument -> . attribute
    (51) argument -> . indexation
    (52) argument -> . STRING
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 53
    STRING          shift and go to state 57
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    argument                       shift and go to state 52
    arguments                      shift and go to state 146
    number                         shift and go to state 54
    attribute                      shift and go to state 55
    indexation                     shift and go to state 56

state 103

    (59) parameters -> ID .
    (60) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 59 (parameters -> ID .)
    COMMA           shift and go to state 147


state 104

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 148


state 105

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 149


state 106

    (93) operations -> operation arithmeticOperator . operations
    (94) operations -> operation arithmeticOperator . operationValue
    (92) operations -> . operation
    (93) operations -> . operation arithmeticOperator operations
    (94) operations -> . operation arithmeticOperator operationValue
    (95) operations -> . operationValue arithmeticOperator operation
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation
    (90) operation -> . operationValue arithmeticOperator operationValue
    (91) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    LPAREN          shift and go to state 82
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operation                      shift and go to state 74
    operations                     shift and go to state 150
    operationValue                 shift and go to state 151
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 107

    (80) arithmeticOperator -> PLUS .

    ID              reduce using rule 80 (arithmeticOperator -> PLUS .)
    LPAREN          reduce using rule 80 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 80 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 80 (arithmeticOperator -> PLUS .)


state 108

    (81) arithmeticOperator -> MINUS .

    ID              reduce using rule 81 (arithmeticOperator -> MINUS .)
    LPAREN          reduce using rule 81 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 81 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 81 (arithmeticOperator -> MINUS .)


state 109

    (82) arithmeticOperator -> POWER .

    ID              reduce using rule 82 (arithmeticOperator -> POWER .)
    LPAREN          reduce using rule 82 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 82 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 82 (arithmeticOperator -> POWER .)


state 110

    (83) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 83 (arithmeticOperator -> MULTIPLICATION .)
    LPAREN          reduce using rule 83 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 83 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 83 (arithmeticOperator -> MULTIPLICATION .)


state 111

    (84) arithmeticOperator -> DIVISION .

    ID              reduce using rule 84 (arithmeticOperator -> DIVISION .)
    LPAREN          reduce using rule 84 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 84 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 84 (arithmeticOperator -> DIVISION .)


state 112

    (95) operations -> operationValue arithmeticOperator . operation
    (90) operation -> operationValue arithmeticOperator . operationValue
    (90) operation -> . operationValue arithmeticOperator operationValue
    (91) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    LPAREN          shift and go to state 82
    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 152
    operation                      shift and go to state 153
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 113

    (96) array -> OPENBRACKET element_list . CLOSEDBRACKET
    (99) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 154
    COMMA           shift and go to state 155


state 114

    (97) array -> OPENBRACKET CLOSEDBRACKET .
    (64) creationStack -> OPENBRACKET CLOSEDBRACKET .

  ! reduce/reduce conflict for PRINT resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for $end resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSIF resolved using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PRINT           reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RETURN          reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PUTS            reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 64 (creationStack -> OPENBRACKET CLOSEDBRACKET .)

  ! PRINT           [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RETURN          [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! PUTS            [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ID              [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! IF              [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! WHILE           [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! $end            [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! END             [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSE            [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSIF           [ reduce using rule 97 (array -> OPENBRACKET CLOSEDBRACKET .) ]


state 115

    (98) element_list -> conditionValue .

    CLOSEDBRACKET   reduce using rule 98 (element_list -> conditionValue .)
    COMMA           reduce using rule 98 (element_list -> conditionValue .)


state 116

    (56) input -> GETS DOT . CHOMP DOT TO_F
    (57) input -> GETS DOT . CHOMP DOT TO_I
    (58) input -> GETS DOT . CHOMP

    CHOMP           shift and go to state 156


state 117

    (63) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 157


state 118

    (65) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 158


state 119

    (69) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 159


state 120

    (70) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 160


state 121

    (71) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    RETURN          reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    PUTS            reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 71 (creationHashmap -> LBRACE RBRACE .)


state 122

    (73) pairs -> pair .
    (74) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 73 (pairs -> pair .)
    COMMA           shift and go to state 161


state 123

    (72) pair -> STRING . COLON value

    COLON           shift and go to state 162


state 124

    (91) operation -> LPAREN operationValue . arithmeticOperator operationValue RPAREN
    (80) arithmeticOperator -> . PLUS
    (81) arithmeticOperator -> . MINUS
    (82) arithmeticOperator -> . POWER
    (83) arithmeticOperator -> . MULTIPLICATION
    (84) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 163

state 125

    (86) operationValue -> ID .
    (85) attribute -> ID . DOT ID
    (106) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    PLUS            reduce using rule 86 (operationValue -> ID .)
    MINUS           reduce using rule 86 (operationValue -> ID .)
    POWER           reduce using rule 86 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 86 (operationValue -> ID .)
    DIVISION        reduce using rule 86 (operationValue -> ID .)
    PRINT           reduce using rule 86 (operationValue -> ID .)
    RETURN          reduce using rule 86 (operationValue -> ID .)
    PUTS            reduce using rule 86 (operationValue -> ID .)
    ID              reduce using rule 86 (operationValue -> ID .)
    IF              reduce using rule 86 (operationValue -> ID .)
    WHILE           reduce using rule 86 (operationValue -> ID .)
    $end            reduce using rule 86 (operationValue -> ID .)
    END             reduce using rule 86 (operationValue -> ID .)
    ELSE            reduce using rule 86 (operationValue -> ID .)
    ELSIF           reduce using rule 86 (operationValue -> ID .)
    RPAREN          reduce using rule 86 (operationValue -> ID .)
    CLOSEDBRACKET   reduce using rule 86 (operationValue -> ID .)
    DOT             shift and go to state 99
    OPENBRACKET     shift and go to state 98


state 126

    (87) operationValue -> number .

    PLUS            reduce using rule 87 (operationValue -> number .)
    MINUS           reduce using rule 87 (operationValue -> number .)
    POWER           reduce using rule 87 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 87 (operationValue -> number .)
    DIVISION        reduce using rule 87 (operationValue -> number .)
    PRINT           reduce using rule 87 (operationValue -> number .)
    RETURN          reduce using rule 87 (operationValue -> number .)
    PUTS            reduce using rule 87 (operationValue -> number .)
    ID              reduce using rule 87 (operationValue -> number .)
    IF              reduce using rule 87 (operationValue -> number .)
    WHILE           reduce using rule 87 (operationValue -> number .)
    $end            reduce using rule 87 (operationValue -> number .)
    END             reduce using rule 87 (operationValue -> number .)
    ELSE            reduce using rule 87 (operationValue -> number .)
    ELSIF           reduce using rule 87 (operationValue -> number .)
    RPAREN          reduce using rule 87 (operationValue -> number .)
    CLOSEDBRACKET   reduce using rule 87 (operationValue -> number .)


state 127

    (88) operationValue -> attribute .

    PLUS            reduce using rule 88 (operationValue -> attribute .)
    MINUS           reduce using rule 88 (operationValue -> attribute .)
    POWER           reduce using rule 88 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 88 (operationValue -> attribute .)
    DIVISION        reduce using rule 88 (operationValue -> attribute .)
    PRINT           reduce using rule 88 (operationValue -> attribute .)
    RETURN          reduce using rule 88 (operationValue -> attribute .)
    PUTS            reduce using rule 88 (operationValue -> attribute .)
    ID              reduce using rule 88 (operationValue -> attribute .)
    IF              reduce using rule 88 (operationValue -> attribute .)
    WHILE           reduce using rule 88 (operationValue -> attribute .)
    $end            reduce using rule 88 (operationValue -> attribute .)
    END             reduce using rule 88 (operationValue -> attribute .)
    ELSE            reduce using rule 88 (operationValue -> attribute .)
    ELSIF           reduce using rule 88 (operationValue -> attribute .)
    RPAREN          reduce using rule 88 (operationValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 88 (operationValue -> attribute .)


state 128

    (89) operationValue -> indexation .

    PLUS            reduce using rule 89 (operationValue -> indexation .)
    MINUS           reduce using rule 89 (operationValue -> indexation .)
    POWER           reduce using rule 89 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 89 (operationValue -> indexation .)
    DIVISION        reduce using rule 89 (operationValue -> indexation .)
    PRINT           reduce using rule 89 (operationValue -> indexation .)
    RETURN          reduce using rule 89 (operationValue -> indexation .)
    PUTS            reduce using rule 89 (operationValue -> indexation .)
    ID              reduce using rule 89 (operationValue -> indexation .)
    IF              reduce using rule 89 (operationValue -> indexation .)
    WHILE           reduce using rule 89 (operationValue -> indexation .)
    $end            reduce using rule 89 (operationValue -> indexation .)
    END             reduce using rule 89 (operationValue -> indexation .)
    ELSE            reduce using rule 89 (operationValue -> indexation .)
    ELSIF           reduce using rule 89 (operationValue -> indexation .)
    RPAREN          reduce using rule 89 (operationValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 89 (operationValue -> indexation .)


state 129

    (61) functionCall -> ID LPAREN arguments RPAREN .

    PRINT           reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    PUTS            reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    ID              reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    IF              reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    END             reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSE            reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSIF           reduce using rule 61 (functionCall -> ID LPAREN arguments RPAREN .)


state 130

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    RETURN          reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PUTS            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 131

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 164
    ELSE            shift and go to state 165


state 132

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 166
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 133

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 134

    elsif                          shift and go to state 133
    conditionalElsif               shift and go to state 167

state 134

    (9) elsif -> ELSIF . condition instructionBody
    (108) condition -> . conditionValue comparator conditionValue
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    condition                      shift and go to state 168
    conditionValue                 shift and go to state 33
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 135

    (108) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    RETURN          reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    PUTS            reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 108 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 108 (condition -> conditionValue comparator conditionValue .)


state 136

    (100) conditionValue -> ID .
    (86) operationValue -> ID .
    (106) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> ID . DOT ID

    CLOSEDBRACKET   reduce using rule 100 (conditionValue -> ID .)
    COMMA           reduce using rule 100 (conditionValue -> ID .)
    PLUS            reduce using rule 86 (operationValue -> ID .)
    MINUS           reduce using rule 86 (operationValue -> ID .)
    POWER           reduce using rule 86 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 86 (operationValue -> ID .)
    DIVISION        reduce using rule 86 (operationValue -> ID .)
    OPENBRACKET     shift and go to state 98
    DOT             shift and go to state 99


state 137

    (106) indexation -> ID OPENBRACKET element_list . CLOSEDBRACKET
    (99) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 169
    COMMA           shift and go to state 155


state 138

    (107) indexation -> ID OPENBRACKET operation . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 170


state 139

    (90) operation -> operationValue . arithmeticOperator operationValue
    (80) arithmeticOperator -> . PLUS
    (81) arithmeticOperator -> . MINUS
    (82) arithmeticOperator -> . POWER
    (83) arithmeticOperator -> . MULTIPLICATION
    (84) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 171

state 140

    (101) conditionValue -> number .
    (87) operationValue -> number .

    CLOSEDBRACKET   reduce using rule 101 (conditionValue -> number .)
    COMMA           reduce using rule 101 (conditionValue -> number .)
    PLUS            reduce using rule 87 (operationValue -> number .)
    MINUS           reduce using rule 87 (operationValue -> number .)
    POWER           reduce using rule 87 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 87 (operationValue -> number .)
    DIVISION        reduce using rule 87 (operationValue -> number .)


state 141

    (102) conditionValue -> indexation .
    (89) operationValue -> indexation .

    CLOSEDBRACKET   reduce using rule 102 (conditionValue -> indexation .)
    COMMA           reduce using rule 102 (conditionValue -> indexation .)
    PLUS            reduce using rule 89 (operationValue -> indexation .)
    MINUS           reduce using rule 89 (operationValue -> indexation .)
    POWER           reduce using rule 89 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 89 (operationValue -> indexation .)
    DIVISION        reduce using rule 89 (operationValue -> indexation .)


state 142

    (103) conditionValue -> attribute .
    (88) operationValue -> attribute .

    CLOSEDBRACKET   reduce using rule 103 (conditionValue -> attribute .)
    COMMA           reduce using rule 103 (conditionValue -> attribute .)
    PLUS            reduce using rule 88 (operationValue -> attribute .)
    MINUS           reduce using rule 88 (operationValue -> attribute .)
    POWER           reduce using rule 88 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 88 (operationValue -> attribute .)
    DIVISION        reduce using rule 88 (operationValue -> attribute .)


state 143

    (85) attribute -> ID DOT ID .

    GREATERTHAN     reduce using rule 85 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 85 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 85 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 85 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 85 (attribute -> ID DOT ID .)
    COMMA           reduce using rule 85 (attribute -> ID DOT ID .)
    PRINT           reduce using rule 85 (attribute -> ID DOT ID .)
    RETURN          reduce using rule 85 (attribute -> ID DOT ID .)
    PUTS            reduce using rule 85 (attribute -> ID DOT ID .)
    ID              reduce using rule 85 (attribute -> ID DOT ID .)
    IF              reduce using rule 85 (attribute -> ID DOT ID .)
    WHILE           reduce using rule 85 (attribute -> ID DOT ID .)
    $end            reduce using rule 85 (attribute -> ID DOT ID .)
    END             reduce using rule 85 (attribute -> ID DOT ID .)
    ELSE            reduce using rule 85 (attribute -> ID DOT ID .)
    ELSIF           reduce using rule 85 (attribute -> ID DOT ID .)
    PLUS            reduce using rule 85 (attribute -> ID DOT ID .)
    MINUS           reduce using rule 85 (attribute -> ID DOT ID .)
    POWER           reduce using rule 85 (attribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 85 (attribute -> ID DOT ID .)
    DIVISION        reduce using rule 85 (attribute -> ID DOT ID .)
    RPAREN          reduce using rule 85 (attribute -> ID DOT ID .)
    CLOSEDBRACKET   reduce using rule 85 (attribute -> ID DOT ID .)


state 144

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    RETURN          reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PUTS            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 145

    (85) attribute -> ID DOT ID .
    (61) functionCall -> ID . LPAREN arguments RPAREN
    (62) functionCall -> ID . LPAREN RPAREN

    GREATERTHAN     reduce using rule 85 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 85 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 85 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 85 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 85 (attribute -> ID DOT ID .)
    LPAREN          shift and go to state 22


state 146

    (54) arguments -> argument COMMA arguments .

    PRINT           reduce using rule 54 (arguments -> argument COMMA arguments .)
    RETURN          reduce using rule 54 (arguments -> argument COMMA arguments .)
    PUTS            reduce using rule 54 (arguments -> argument COMMA arguments .)
    ID              reduce using rule 54 (arguments -> argument COMMA arguments .)
    IF              reduce using rule 54 (arguments -> argument COMMA arguments .)
    WHILE           reduce using rule 54 (arguments -> argument COMMA arguments .)
    $end            reduce using rule 54 (arguments -> argument COMMA arguments .)
    END             reduce using rule 54 (arguments -> argument COMMA arguments .)
    ELSE            reduce using rule 54 (arguments -> argument COMMA arguments .)
    ELSIF           reduce using rule 54 (arguments -> argument COMMA arguments .)
    RPAREN          reduce using rule 54 (arguments -> argument COMMA arguments .)


state 147

    (60) parameters -> ID COMMA . parameters
    (59) parameters -> . ID
    (60) parameters -> . ID COMMA parameters

    ID              shift and go to state 103

    parameters                     shift and go to state 172

state 148

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 173
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 149

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 150

    (93) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    RETURN          reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    PUTS            reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 93 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 93 (operations -> operation arithmeticOperator operations .)


state 151

    (94) operations -> operation arithmeticOperator operationValue .
    (95) operations -> operationValue . arithmeticOperator operation
    (90) operation -> operationValue . arithmeticOperator operationValue
    (80) arithmeticOperator -> . PLUS
    (81) arithmeticOperator -> . MINUS
    (82) arithmeticOperator -> . POWER
    (83) arithmeticOperator -> . MULTIPLICATION
    (84) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    RETURN          reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    PUTS            reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    ID              reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    IF              reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    WHILE           reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    $end            reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    END             reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    ELSE            reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    ELSIF           reduce using rule 94 (operations -> operation arithmeticOperator operationValue .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

    arithmeticOperator             shift and go to state 112

state 152

    (90) operation -> operationValue arithmeticOperator operationValue .
    (90) operation -> operationValue . arithmeticOperator operationValue
    (80) arithmeticOperator -> . PLUS
    (81) arithmeticOperator -> . MINUS
    (82) arithmeticOperator -> . POWER
    (83) arithmeticOperator -> . MULTIPLICATION
    (84) arithmeticOperator -> . DIVISION

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    PRINT           reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    POWER           shift and go to state 109
    MULTIPLICATION  shift and go to state 110
    DIVISION        shift and go to state 111

  ! PLUS            [ reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MINUS           [ reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! POWER           [ reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MULTIPLICATION  [ reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! DIVISION        [ reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .) ]

    arithmeticOperator             shift and go to state 171

state 153

    (95) operations -> operationValue arithmeticOperator operation .

    PRINT           reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    RETURN          reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    PUTS            reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    ID              reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    IF              reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    WHILE           reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    $end            reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    END             reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    ELSE            reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)
    ELSIF           reduce using rule 95 (operations -> operationValue arithmeticOperator operation .)


state 154

    (96) array -> OPENBRACKET element_list CLOSEDBRACKET .

    PRINT           reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 96 (array -> OPENBRACKET element_list CLOSEDBRACKET .)


state 155

    (99) element_list -> element_list COMMA . conditionValue
    (100) conditionValue -> . ID
    (101) conditionValue -> . number
    (102) conditionValue -> . indexation
    (103) conditionValue -> . attribute
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (85) attribute -> . ID DOT ID

    ID              shift and go to state 34
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    conditionValue                 shift and go to state 174
    number                         shift and go to state 35
    indexation                     shift and go to state 36
    attribute                      shift and go to state 37

state 156

    (56) input -> GETS DOT CHOMP . DOT TO_F
    (57) input -> GETS DOT CHOMP . DOT TO_I
    (58) input -> GETS DOT CHOMP .

    DOT             shift and go to state 175
    PRINT           reduce using rule 58 (input -> GETS DOT CHOMP .)
    RETURN          reduce using rule 58 (input -> GETS DOT CHOMP .)
    PUTS            reduce using rule 58 (input -> GETS DOT CHOMP .)
    ID              reduce using rule 58 (input -> GETS DOT CHOMP .)
    IF              reduce using rule 58 (input -> GETS DOT CHOMP .)
    WHILE           reduce using rule 58 (input -> GETS DOT CHOMP .)
    $end            reduce using rule 58 (input -> GETS DOT CHOMP .)
    END             reduce using rule 58 (input -> GETS DOT CHOMP .)
    ELSE            reduce using rule 58 (input -> GETS DOT CHOMP .)
    ELSIF           reduce using rule 58 (input -> GETS DOT CHOMP .)


state 157

    (63) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 63 (creationStack -> STACK DOT NEW .)
    RETURN          reduce using rule 63 (creationStack -> STACK DOT NEW .)
    PUTS            reduce using rule 63 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 63 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 63 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 63 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 63 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 63 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 63 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 63 (creationStack -> STACK DOT NEW .)


state 158

    (65) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RETURN          reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    PUTS            reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 65 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 159

    (69) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    RETURN          reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    PUTS            reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 69 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 69 (creationHashmap -> HASH DOT NEW .)


state 160

    (70) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    RETURN          reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    PUTS            reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 70 (creationHashmap -> LBRACE pairs RBRACE .)


state 161

    (74) pairs -> pair COMMA . pairs
    (73) pairs -> . pair
    (74) pairs -> . pair COMMA pairs
    (72) pair -> . STRING COLON value

    STRING          shift and go to state 123

    pair                           shift and go to state 122
    pairs                          shift and go to state 176

state 162

    (72) pair -> STRING COLON . value
    (75) value -> . ID
    (76) value -> . STRING
    (77) value -> . number
    (78) value -> . LBRACE pairs RBRACE
    (79) value -> . LBRACE RBRACE
    (116) number -> . FLOAT
    (117) number -> . INTEGER

    ID              shift and go to state 179
    STRING          shift and go to state 177
    LBRACE          shift and go to state 181
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    value                          shift and go to state 178
    number                         shift and go to state 180

state 163

    (91) operation -> LPAREN operationValue arithmeticOperator . operationValue RPAREN
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 182
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 164

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    RETURN          reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PUTS            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 165

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 183
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 166

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 184


state 167

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 168

    (9) elsif -> ELSIF condition . instructionBody
    (39) instructionBody -> . bodyLine
    (40) instructionBody -> . bodyLine instructionBody
    (29) bodyLine -> . assignmentRule
    (30) bodyLine -> . PRINT printBody
    (31) bodyLine -> . nestedConditional
    (32) bodyLine -> . nestedWhile
    (33) bodyLine -> . functionCall
    (34) bodyLine -> . arrayConcat
    (35) bodyLine -> . RETURN arguments
    (36) bodyLine -> . PUTS printBody
    (37) bodyLine -> . method
    (38) bodyLine -> . unariOperator
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (28) assignmentRule -> . ID ASSIGNMENT input
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (61) functionCall -> . ID LPAREN arguments RPAREN
    (62) functionCall -> . ID LPAREN RPAREN
    (104) arrayConcat -> . ID ARRAYAPPEND ID
    (105) arrayConcat -> . ID ARRAYAPPEND number
    (55) method -> . ID DOT functionCall
    (114) unariOperator -> . ID ASSIGNDECREMENT number
    (115) unariOperator -> . ID ASSIGNINCREMENT number
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 185
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    unariOperator                  shift and go to state 19
    conditional                    shift and go to state 27
    whileLoop                      shift and go to state 29

state 169

    (106) indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    EQUALS          reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    COMMA           reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PRINT           reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PLUS            reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MINUS           reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    POWER           reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    DIVISION        reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RPAREN          reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 106 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)


state 170

    (107) indexation -> ID OPENBRACKET operation CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    EQUALS          reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    COMMA           reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PRINT           reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RETURN          reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PUTS            reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ID              reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    IF              reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    WHILE           reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    $end            reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    END             reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSE            reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSIF           reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PLUS            reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MINUS           reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    POWER           reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    DIVISION        reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RPAREN          reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 107 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)


state 171

    (90) operation -> operationValue arithmeticOperator . operationValue
    (86) operationValue -> . ID
    (87) operationValue -> . number
    (88) operationValue -> . attribute
    (89) operationValue -> . indexation
    (116) number -> . FLOAT
    (117) number -> . INTEGER
    (85) attribute -> . ID DOT ID
    (106) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (107) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 125
    FLOAT           shift and go to state 38
    INTEGER         shift and go to state 39

    operationValue                 shift and go to state 186
    number                         shift and go to state 126
    attribute                      shift and go to state 127
    indexation                     shift and go to state 128

state 172

    (60) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 60 (parameters -> ID COMMA parameters .)


state 173

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 187


state 174

    (99) element_list -> element_list COMMA conditionValue .

    CLOSEDBRACKET   reduce using rule 99 (element_list -> element_list COMMA conditionValue .)
    COMMA           reduce using rule 99 (element_list -> element_list COMMA conditionValue .)


state 175

    (56) input -> GETS DOT CHOMP DOT . TO_F
    (57) input -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 188
    TO_I            shift and go to state 189


state 176

    (74) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 74 (pairs -> pair COMMA pairs .)


state 177

    (76) value -> STRING .

    COMMA           reduce using rule 76 (value -> STRING .)
    RBRACE          reduce using rule 76 (value -> STRING .)


state 178

    (72) pair -> STRING COLON value .

    COMMA           reduce using rule 72 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 72 (pair -> STRING COLON value .)


state 179

    (75) value -> ID .

    COMMA           reduce using rule 75 (value -> ID .)
    RBRACE          reduce using rule 75 (value -> ID .)


state 180

    (77) value -> number .

    COMMA           reduce using rule 77 (value -> number .)
    RBRACE          reduce using rule 77 (value -> number .)


state 181

    (78) value -> LBRACE . pairs RBRACE
    (79) value -> LBRACE . RBRACE
    (73) pairs -> . pair
    (74) pairs -> . pair COMMA pairs
    (72) pair -> . STRING COLON value

    RBRACE          shift and go to state 191
    STRING          shift and go to state 123

    pairs                          shift and go to state 190
    pair                           shift and go to state 122

state 182

    (91) operation -> LPAREN operationValue arithmeticOperator operationValue . RPAREN

    RPAREN          shift and go to state 192


state 183

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 193


state 184

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RETURN          reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PUTS            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 185

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 186

    (90) operation -> operationValue arithmeticOperator operationValue .

    CLOSEDBRACKET   reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 90 (operation -> operationValue arithmeticOperator operationValue .)


state 187

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 188

    (56) input -> GETS DOT CHOMP DOT TO_F .

    PRINT           reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    RETURN          reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    PUTS            reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    ID              reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    IF              reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    WHILE           reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    $end            reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSIF           reduce using rule 56 (input -> GETS DOT CHOMP DOT TO_F .)


state 189

    (57) input -> GETS DOT CHOMP DOT TO_I .

    PRINT           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    RETURN          reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    PUTS            reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    ID              reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    IF              reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    WHILE           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    $end            reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSIF           reduce using rule 57 (input -> GETS DOT CHOMP DOT TO_I .)


state 190

    (78) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 194


state 191

    (79) value -> LBRACE RBRACE .

    COMMA           reduce using rule 79 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 79 (value -> LBRACE RBRACE .)


state 192

    (91) operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .

    PLUS            reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MINUS           reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    POWER           reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MULTIPLICATION  reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    DIVISION        reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PRINT           reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RETURN          reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PUTS            reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ID              reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    IF              reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    WHILE           reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    $end            reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    END             reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSE            reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSIF           reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    CLOSEDBRACKET   reduce using rule 91 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)


state 193

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RETURN          reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PUTS            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 194

    (78) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 78 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 78 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 27 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for POWER in state 152 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 152 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
WARNING: reduce/reduce conflict in state 114 resolved using rule (creationStack -> OPENBRACKET CLOSEDBRACKET)
WARNING: rejected rule (array -> OPENBRACKET CLOSEDBRACKET) in state 114
WARNING: Rule (array -> OPENBRACKET CLOSEDBRACKET) is never reduced
