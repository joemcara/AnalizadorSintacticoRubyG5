Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    CLOSEDBRACKET
    DOT
    FOR
    GETS
    IN
    OPENBRACKET
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition conditionalBody END
Rule 6     conditional -> IF condition conditionalBody conditionalElsif END
Rule 7     conditional -> IF condition conditionalBody ELSE conditionalBody END
Rule 8     conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END
Rule 9     elsif -> ELSIF condition conditionalBody
Rule 10    conditionalBody -> instructionBody
Rule 11    conditionalBody -> instructionBody nestedConditional
Rule 12    conditionalBody -> nestedConditional instructionBody
Rule 13    conditionalBody -> nestedConditional
Rule 14    nestedConditional -> conditional
Rule 15    nestedConditional -> conditional nestedConditional
Rule 16    conditionalElsif -> elsif
Rule 17    conditionalElsif -> elsif conditionalElsif
Rule 18    instruction -> WHILE condition instructionBody END
Rule 19    bodyLine -> ID ASSIGNMENT number
Rule 20    bodyLine -> ID ASSIGNMENT STRING
Rule 21    bodyLine -> PRINT printBody
Rule 22    instructionBody -> bodyLine
Rule 23    instructionBody -> bodyLine instructionBody
Rule 24    printBody -> ID
Rule 25    printBody -> TRUE
Rule 26    printBody -> FALSE
Rule 27    printBody -> dataType
Rule 28    printBody -> condition
Rule 29    parameters -> ID
Rule 30    parameters -> ID COMMA ID
Rule 31    arithmaticOperator -> PLUS
Rule 32    arithmaticOperator -> MINUS
Rule 33    arithmaticOperator -> POWER
Rule 34    arithmaticOperator -> MULTIPLICATION
Rule 35    arithmaticOperator -> DIVISION
Rule 36    operations -> number arithmaticOperator number
Rule 37    condition -> number comparator number
Rule 38    comparator -> GREATERTHAN
Rule 39    comparator -> LESSTHAN
Rule 40    comparator -> EQUALS
Rule 41    comparator -> GREATEROREQUALS
Rule 42    comparator -> LESSOREQUALS
Rule 43    number -> FLOAT
Rule 44    number -> INTEGER
Rule 45    dataType -> STRING
Rule 46    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 19 20
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 
COMMA                : 30
DEF                  : 2 3
DIVISION             : 35
DOT                  : 
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 18
EQUALS               : 40
FALSE                : 26
FLOAT                : 43
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 41
GREATERTHAN          : 38
ID                   : 2 3 19 20 24 29 30 30
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 44
LESSOREQUALS         : 42
LESSTHAN             : 39
LPAREN               : 2 3
MINUS                : 32
MULTIPLICATION       : 34
OPENBRACKET          : 
PLUS                 : 31
POWER                : 33
PRINT                : 21
PUTS                 : 
RPAREN               : 2 3
STRING               : 20 45
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 25
WHILE                : 18
error                : 

Nonterminals, with rules where they appear

arithmaticOperator   : 36
bodyLine             : 22 23
comparator           : 37
condition            : 5 6 7 8 9 18 28
conditional          : 4 14 15
conditionalBody      : 5 6 7 7 8 8 9
conditionalElsif     : 6 8 17
dataType             : 27
elsif                : 16 17
instruction          : 0
instructionBody      : 1 2 10 11 12 18 23
nestedConditional    : 11 12 13 15
number               : 19 36 36 37 37 46
operations           : 
parameters           : 2
printBody            : 21

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (18) instruction -> . WHILE condition instructionBody END
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody

    DEF             shift and go to state 3
    WHILE           shift and go to state 6
    IF              shift and go to state 8
    ID              shift and go to state 4
    PRINT           shift and go to state 9

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    bodyLine                       shift and go to state 7

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 10


state 4

    (19) bodyLine -> ID . ASSIGNMENT number
    (20) bodyLine -> ID . ASSIGNMENT STRING

    ASSIGNMENT      shift and go to state 11


state 5

    (4) instruction -> conditional .

    $end            reduce using rule 4 (instruction -> conditional .)


state 6

    (18) instruction -> WHILE . condition instructionBody END
    (37) condition -> . number comparator number
    (43) number -> . FLOAT
    (44) number -> . INTEGER

    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    condition                      shift and go to state 12
    number                         shift and go to state 13

state 7

    (22) instructionBody -> bodyLine .
    (23) instructionBody -> bodyLine . instructionBody
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody

    $end            reduce using rule 22 (instructionBody -> bodyLine .)
    END             reduce using rule 22 (instructionBody -> bodyLine .)
    IF              reduce using rule 22 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 22 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 22 (instructionBody -> bodyLine .)
    ID              shift and go to state 4
    PRINT           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 16

state 8

    (5) conditional -> IF . condition conditionalBody END
    (6) conditional -> IF . condition conditionalBody conditionalElsif END
    (7) conditional -> IF . condition conditionalBody ELSE conditionalBody END
    (8) conditional -> IF . condition conditionalBody conditionalElsif ELSE conditionalBody END
    (37) condition -> . number comparator number
    (43) number -> . FLOAT
    (44) number -> . INTEGER

    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    condition                      shift and go to state 17
    number                         shift and go to state 13

state 9

    (21) bodyLine -> PRINT . printBody
    (24) printBody -> . ID
    (25) printBody -> . TRUE
    (26) printBody -> . FALSE
    (27) printBody -> . dataType
    (28) printBody -> . condition
    (45) dataType -> . STRING
    (46) dataType -> . number
    (37) condition -> . number comparator number
    (43) number -> . FLOAT
    (44) number -> . INTEGER

    ID              shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 24
    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    printBody                      shift and go to state 18
    dataType                       shift and go to state 22
    condition                      shift and go to state 23
    number                         shift and go to state 25

state 10

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 26


state 11

    (19) bodyLine -> ID ASSIGNMENT . number
    (20) bodyLine -> ID ASSIGNMENT . STRING
    (43) number -> . FLOAT
    (44) number -> . INTEGER

    STRING          shift and go to state 28
    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    number                         shift and go to state 27

state 12

    (18) instruction -> WHILE condition . instructionBody END
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 9

    instructionBody                shift and go to state 29
    bodyLine                       shift and go to state 7

state 13

    (37) condition -> number . comparator number
    (38) comparator -> . GREATERTHAN
    (39) comparator -> . LESSTHAN
    (40) comparator -> . EQUALS
    (41) comparator -> . GREATEROREQUALS
    (42) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 31
    LESSTHAN        shift and go to state 32
    EQUALS          shift and go to state 33
    GREATEROREQUALS shift and go to state 34
    LESSOREQUALS    shift and go to state 35

    comparator                     shift and go to state 30

state 14

    (43) number -> FLOAT .

    GREATERTHAN     reduce using rule 43 (number -> FLOAT .)
    LESSTHAN        reduce using rule 43 (number -> FLOAT .)
    EQUALS          reduce using rule 43 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 43 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 43 (number -> FLOAT .)
    ID              reduce using rule 43 (number -> FLOAT .)
    PRINT           reduce using rule 43 (number -> FLOAT .)
    $end            reduce using rule 43 (number -> FLOAT .)
    END             reduce using rule 43 (number -> FLOAT .)
    IF              reduce using rule 43 (number -> FLOAT .)
    ELSE            reduce using rule 43 (number -> FLOAT .)
    ELSIF           reduce using rule 43 (number -> FLOAT .)


state 15

    (44) number -> INTEGER .

    GREATERTHAN     reduce using rule 44 (number -> INTEGER .)
    LESSTHAN        reduce using rule 44 (number -> INTEGER .)
    EQUALS          reduce using rule 44 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 44 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 44 (number -> INTEGER .)
    ID              reduce using rule 44 (number -> INTEGER .)
    PRINT           reduce using rule 44 (number -> INTEGER .)
    $end            reduce using rule 44 (number -> INTEGER .)
    END             reduce using rule 44 (number -> INTEGER .)
    IF              reduce using rule 44 (number -> INTEGER .)
    ELSE            reduce using rule 44 (number -> INTEGER .)
    ELSIF           reduce using rule 44 (number -> INTEGER .)


state 16

    (23) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 23 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 23 (instructionBody -> bodyLine instructionBody .)
    IF              reduce using rule 23 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 23 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 23 (instructionBody -> bodyLine instructionBody .)


state 17

    (5) conditional -> IF condition . conditionalBody END
    (6) conditional -> IF condition . conditionalBody conditionalElsif END
    (7) conditional -> IF condition . conditionalBody ELSE conditionalBody END
    (8) conditional -> IF condition . conditionalBody conditionalElsif ELSE conditionalBody END
    (10) conditionalBody -> . instructionBody
    (11) conditionalBody -> . instructionBody nestedConditional
    (12) conditionalBody -> . nestedConditional instructionBody
    (13) conditionalBody -> . nestedConditional
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (14) nestedConditional -> . conditional
    (15) nestedConditional -> . conditional nestedConditional
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 9
    IF              shift and go to state 8

    conditionalBody                shift and go to state 36
    instructionBody                shift and go to state 37
    nestedConditional              shift and go to state 38
    bodyLine                       shift and go to state 7
    conditional                    shift and go to state 39

state 18

    (21) bodyLine -> PRINT printBody .

    ID              reduce using rule 21 (bodyLine -> PRINT printBody .)
    PRINT           reduce using rule 21 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 21 (bodyLine -> PRINT printBody .)
    END             reduce using rule 21 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 21 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 21 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 21 (bodyLine -> PRINT printBody .)


state 19

    (24) printBody -> ID .

    ID              reduce using rule 24 (printBody -> ID .)
    PRINT           reduce using rule 24 (printBody -> ID .)
    $end            reduce using rule 24 (printBody -> ID .)
    END             reduce using rule 24 (printBody -> ID .)
    IF              reduce using rule 24 (printBody -> ID .)
    ELSE            reduce using rule 24 (printBody -> ID .)
    ELSIF           reduce using rule 24 (printBody -> ID .)


state 20

    (25) printBody -> TRUE .

    ID              reduce using rule 25 (printBody -> TRUE .)
    PRINT           reduce using rule 25 (printBody -> TRUE .)
    $end            reduce using rule 25 (printBody -> TRUE .)
    END             reduce using rule 25 (printBody -> TRUE .)
    IF              reduce using rule 25 (printBody -> TRUE .)
    ELSE            reduce using rule 25 (printBody -> TRUE .)
    ELSIF           reduce using rule 25 (printBody -> TRUE .)


state 21

    (26) printBody -> FALSE .

    ID              reduce using rule 26 (printBody -> FALSE .)
    PRINT           reduce using rule 26 (printBody -> FALSE .)
    $end            reduce using rule 26 (printBody -> FALSE .)
    END             reduce using rule 26 (printBody -> FALSE .)
    IF              reduce using rule 26 (printBody -> FALSE .)
    ELSE            reduce using rule 26 (printBody -> FALSE .)
    ELSIF           reduce using rule 26 (printBody -> FALSE .)


state 22

    (27) printBody -> dataType .

    ID              reduce using rule 27 (printBody -> dataType .)
    PRINT           reduce using rule 27 (printBody -> dataType .)
    $end            reduce using rule 27 (printBody -> dataType .)
    END             reduce using rule 27 (printBody -> dataType .)
    IF              reduce using rule 27 (printBody -> dataType .)
    ELSE            reduce using rule 27 (printBody -> dataType .)
    ELSIF           reduce using rule 27 (printBody -> dataType .)


state 23

    (28) printBody -> condition .

    ID              reduce using rule 28 (printBody -> condition .)
    PRINT           reduce using rule 28 (printBody -> condition .)
    $end            reduce using rule 28 (printBody -> condition .)
    END             reduce using rule 28 (printBody -> condition .)
    IF              reduce using rule 28 (printBody -> condition .)
    ELSE            reduce using rule 28 (printBody -> condition .)
    ELSIF           reduce using rule 28 (printBody -> condition .)


state 24

    (45) dataType -> STRING .

    ID              reduce using rule 45 (dataType -> STRING .)
    PRINT           reduce using rule 45 (dataType -> STRING .)
    $end            reduce using rule 45 (dataType -> STRING .)
    END             reduce using rule 45 (dataType -> STRING .)
    IF              reduce using rule 45 (dataType -> STRING .)
    ELSE            reduce using rule 45 (dataType -> STRING .)
    ELSIF           reduce using rule 45 (dataType -> STRING .)


state 25

    (46) dataType -> number .
    (37) condition -> number . comparator number
    (38) comparator -> . GREATERTHAN
    (39) comparator -> . LESSTHAN
    (40) comparator -> . EQUALS
    (41) comparator -> . GREATEROREQUALS
    (42) comparator -> . LESSOREQUALS

    ID              reduce using rule 46 (dataType -> number .)
    PRINT           reduce using rule 46 (dataType -> number .)
    $end            reduce using rule 46 (dataType -> number .)
    END             reduce using rule 46 (dataType -> number .)
    IF              reduce using rule 46 (dataType -> number .)
    ELSE            reduce using rule 46 (dataType -> number .)
    ELSIF           reduce using rule 46 (dataType -> number .)
    GREATERTHAN     shift and go to state 31
    LESSTHAN        shift and go to state 32
    EQUALS          shift and go to state 33
    GREATEROREQUALS shift and go to state 34
    LESSOREQUALS    shift and go to state 35

    comparator                     shift and go to state 30

state 26

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (29) parameters -> . ID
    (30) parameters -> . ID COMMA ID

    RPAREN          shift and go to state 42
    ID              shift and go to state 40

    parameters                     shift and go to state 41

state 27

    (19) bodyLine -> ID ASSIGNMENT number .

    ID              reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)
    PRINT           reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)
    $end            reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)
    END             reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)
    IF              reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 19 (bodyLine -> ID ASSIGNMENT number .)


state 28

    (20) bodyLine -> ID ASSIGNMENT STRING .

    ID              reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)
    PRINT           reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)
    $end            reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)
    END             reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)
    IF              reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)
    ELSE            reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)
    ELSIF           reduce using rule 20 (bodyLine -> ID ASSIGNMENT STRING .)


state 29

    (18) instruction -> WHILE condition instructionBody . END

    END             shift and go to state 43


state 30

    (37) condition -> number comparator . number
    (43) number -> . FLOAT
    (44) number -> . INTEGER

    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    number                         shift and go to state 44

state 31

    (38) comparator -> GREATERTHAN .

    FLOAT           reduce using rule 38 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 38 (comparator -> GREATERTHAN .)


state 32

    (39) comparator -> LESSTHAN .

    FLOAT           reduce using rule 39 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 39 (comparator -> LESSTHAN .)


state 33

    (40) comparator -> EQUALS .

    FLOAT           reduce using rule 40 (comparator -> EQUALS .)
    INTEGER         reduce using rule 40 (comparator -> EQUALS .)


state 34

    (41) comparator -> GREATEROREQUALS .

    FLOAT           reduce using rule 41 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 41 (comparator -> GREATEROREQUALS .)


state 35

    (42) comparator -> LESSOREQUALS .

    FLOAT           reduce using rule 42 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 42 (comparator -> LESSOREQUALS .)


state 36

    (5) conditional -> IF condition conditionalBody . END
    (6) conditional -> IF condition conditionalBody . conditionalElsif END
    (7) conditional -> IF condition conditionalBody . ELSE conditionalBody END
    (8) conditional -> IF condition conditionalBody . conditionalElsif ELSE conditionalBody END
    (16) conditionalElsif -> . elsif
    (17) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition conditionalBody

    END             shift and go to state 45
    ELSE            shift and go to state 47
    ELSIF           shift and go to state 49

    conditionalElsif               shift and go to state 46
    elsif                          shift and go to state 48

state 37

    (10) conditionalBody -> instructionBody .
    (11) conditionalBody -> instructionBody . nestedConditional
    (14) nestedConditional -> . conditional
    (15) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END

    END             reduce using rule 10 (conditionalBody -> instructionBody .)
    ELSE            reduce using rule 10 (conditionalBody -> instructionBody .)
    ELSIF           reduce using rule 10 (conditionalBody -> instructionBody .)
    IF              shift and go to state 8

    nestedConditional              shift and go to state 50
    conditional                    shift and go to state 39

state 38

    (12) conditionalBody -> nestedConditional . instructionBody
    (13) conditionalBody -> nestedConditional .
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody

    END             reduce using rule 13 (conditionalBody -> nestedConditional .)
    ELSE            reduce using rule 13 (conditionalBody -> nestedConditional .)
    ELSIF           reduce using rule 13 (conditionalBody -> nestedConditional .)
    ID              shift and go to state 4
    PRINT           shift and go to state 9

    instructionBody                shift and go to state 51
    bodyLine                       shift and go to state 7

state 39

    (14) nestedConditional -> conditional .
    (15) nestedConditional -> conditional . nestedConditional
    (14) nestedConditional -> . conditional
    (15) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END

    ID              reduce using rule 14 (nestedConditional -> conditional .)
    PRINT           reduce using rule 14 (nestedConditional -> conditional .)
    END             reduce using rule 14 (nestedConditional -> conditional .)
    ELSE            reduce using rule 14 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 14 (nestedConditional -> conditional .)
    IF              shift and go to state 8

    conditional                    shift and go to state 39
    nestedConditional              shift and go to state 52

state 40

    (29) parameters -> ID .
    (30) parameters -> ID . COMMA ID

    RPAREN          reduce using rule 29 (parameters -> ID .)
    COMMA           shift and go to state 53


state 41

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 54


state 42

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 55


state 43

    (18) instruction -> WHILE condition instructionBody END .

    $end            reduce using rule 18 (instruction -> WHILE condition instructionBody END .)


state 44

    (37) condition -> number comparator number .

    ID              reduce using rule 37 (condition -> number comparator number .)
    PRINT           reduce using rule 37 (condition -> number comparator number .)
    IF              reduce using rule 37 (condition -> number comparator number .)
    $end            reduce using rule 37 (condition -> number comparator number .)
    END             reduce using rule 37 (condition -> number comparator number .)
    ELSE            reduce using rule 37 (condition -> number comparator number .)
    ELSIF           reduce using rule 37 (condition -> number comparator number .)


state 45

    (5) conditional -> IF condition conditionalBody END .

    $end            reduce using rule 5 (conditional -> IF condition conditionalBody END .)
    IF              reduce using rule 5 (conditional -> IF condition conditionalBody END .)
    ID              reduce using rule 5 (conditional -> IF condition conditionalBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition conditionalBody END .)
    END             reduce using rule 5 (conditional -> IF condition conditionalBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition conditionalBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition conditionalBody END .)


state 46

    (6) conditional -> IF condition conditionalBody conditionalElsif . END
    (8) conditional -> IF condition conditionalBody conditionalElsif . ELSE conditionalBody END

    END             shift and go to state 56
    ELSE            shift and go to state 57


state 47

    (7) conditional -> IF condition conditionalBody ELSE . conditionalBody END
    (10) conditionalBody -> . instructionBody
    (11) conditionalBody -> . instructionBody nestedConditional
    (12) conditionalBody -> . nestedConditional instructionBody
    (13) conditionalBody -> . nestedConditional
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (14) nestedConditional -> . conditional
    (15) nestedConditional -> . conditional nestedConditional
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 9
    IF              shift and go to state 8

    conditionalBody                shift and go to state 58
    instructionBody                shift and go to state 37
    nestedConditional              shift and go to state 38
    bodyLine                       shift and go to state 7
    conditional                    shift and go to state 39

state 48

    (16) conditionalElsif -> elsif .
    (17) conditionalElsif -> elsif . conditionalElsif
    (16) conditionalElsif -> . elsif
    (17) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition conditionalBody

    END             reduce using rule 16 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 16 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 49

    elsif                          shift and go to state 48
    conditionalElsif               shift and go to state 59

state 49

    (9) elsif -> ELSIF . condition conditionalBody
    (37) condition -> . number comparator number
    (43) number -> . FLOAT
    (44) number -> . INTEGER

    FLOAT           shift and go to state 14
    INTEGER         shift and go to state 15

    condition                      shift and go to state 60
    number                         shift and go to state 13

state 50

    (11) conditionalBody -> instructionBody nestedConditional .

    END             reduce using rule 11 (conditionalBody -> instructionBody nestedConditional .)
    ELSE            reduce using rule 11 (conditionalBody -> instructionBody nestedConditional .)
    ELSIF           reduce using rule 11 (conditionalBody -> instructionBody nestedConditional .)


state 51

    (12) conditionalBody -> nestedConditional instructionBody .

    END             reduce using rule 12 (conditionalBody -> nestedConditional instructionBody .)
    ELSE            reduce using rule 12 (conditionalBody -> nestedConditional instructionBody .)
    ELSIF           reduce using rule 12 (conditionalBody -> nestedConditional instructionBody .)


state 52

    (15) nestedConditional -> conditional nestedConditional .

    ID              reduce using rule 15 (nestedConditional -> conditional nestedConditional .)
    PRINT           reduce using rule 15 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 15 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 15 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 15 (nestedConditional -> conditional nestedConditional .)


state 53

    (30) parameters -> ID COMMA . ID

    ID              shift and go to state 61


state 54

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody

    ID              shift and go to state 4
    PRINT           shift and go to state 9

    instructionBody                shift and go to state 62
    bodyLine                       shift and go to state 7

state 55

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 56

    (6) conditional -> IF condition conditionalBody conditionalElsif END .

    $end            reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)
    IF              reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition conditionalBody conditionalElsif END .)


state 57

    (8) conditional -> IF condition conditionalBody conditionalElsif ELSE . conditionalBody END
    (10) conditionalBody -> . instructionBody
    (11) conditionalBody -> . instructionBody nestedConditional
    (12) conditionalBody -> . nestedConditional instructionBody
    (13) conditionalBody -> . nestedConditional
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (14) nestedConditional -> . conditional
    (15) nestedConditional -> . conditional nestedConditional
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 9
    IF              shift and go to state 8

    conditionalBody                shift and go to state 63
    instructionBody                shift and go to state 37
    nestedConditional              shift and go to state 38
    bodyLine                       shift and go to state 7
    conditional                    shift and go to state 39

state 58

    (7) conditional -> IF condition conditionalBody ELSE conditionalBody . END

    END             shift and go to state 64


state 59

    (17) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 17 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 17 (conditionalElsif -> elsif conditionalElsif .)


state 60

    (9) elsif -> ELSIF condition . conditionalBody
    (10) conditionalBody -> . instructionBody
    (11) conditionalBody -> . instructionBody nestedConditional
    (12) conditionalBody -> . nestedConditional instructionBody
    (13) conditionalBody -> . nestedConditional
    (22) instructionBody -> . bodyLine
    (23) instructionBody -> . bodyLine instructionBody
    (14) nestedConditional -> . conditional
    (15) nestedConditional -> . conditional nestedConditional
    (19) bodyLine -> . ID ASSIGNMENT number
    (20) bodyLine -> . ID ASSIGNMENT STRING
    (21) bodyLine -> . PRINT printBody
    (5) conditional -> . IF condition conditionalBody END
    (6) conditional -> . IF condition conditionalBody conditionalElsif END
    (7) conditional -> . IF condition conditionalBody ELSE conditionalBody END
    (8) conditional -> . IF condition conditionalBody conditionalElsif ELSE conditionalBody END

    ID              shift and go to state 4
    PRINT           shift and go to state 9
    IF              shift and go to state 8

    conditionalBody                shift and go to state 65
    instructionBody                shift and go to state 37
    nestedConditional              shift and go to state 38
    bodyLine                       shift and go to state 7
    conditional                    shift and go to state 39

state 61

    (30) parameters -> ID COMMA ID .

    RPAREN          reduce using rule 30 (parameters -> ID COMMA ID .)


state 62

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 66


state 63

    (8) conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody . END

    END             shift and go to state 67


state 64

    (7) conditional -> IF condition conditionalBody ELSE conditionalBody END .

    $end            reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)
    IF              reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)
    ID              reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)
    END             reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition conditionalBody ELSE conditionalBody END .)


state 65

    (9) elsif -> ELSIF condition conditionalBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition conditionalBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition conditionalBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition conditionalBody .)


state 66

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 67

    (8) conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .

    $end            reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)
    IF              reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)
    ID              reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)
    END             reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition conditionalBody conditionalElsif ELSE conditionalBody END .)

