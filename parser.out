Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CASE
    CLASS
    FOR
    IN
    NODE
    THEN
    YIELD

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> lambda_expression
Rule 5     lambda_expression -> LAMBDA LBRACE instructionBody RBRACE
Rule 6     lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE
Rule 7     instruction -> conditional
Rule 8     conditional -> IF condition instructionBody END
Rule 9     conditional -> IF condition instructionBody conditionalElsif END
Rule 10    conditional -> IF condition instructionBody ELSE instructionBody END
Rule 11    conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 12    elsif -> ELSIF condition instructionBody
Rule 13    nestedConditional -> conditional
Rule 14    nestedConditional -> conditional nestedConditional
Rule 15    conditionalElsif -> elsif
Rule 16    conditionalElsif -> elsif conditionalElsif
Rule 17    instruction -> whileLoop
Rule 18    whileLoop -> WHILE condition instructionBody END
Rule 19    nestedWhile -> whileLoop
Rule 20    nestedWhile -> whileLoop nestedWhile
Rule 21    assignmentRule -> ID ASSIGNMENT number
Rule 22    assignmentRule -> ID ASSIGNMENT ID
Rule 23    assignmentRule -> ID ASSIGNMENT condition
Rule 24    assignmentRule -> ID ASSIGNMENT TRUE
Rule 25    assignmentRule -> ID ASSIGNMENT FALSE
Rule 26    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 27    assignmentRule -> ID ASSIGNMENT operations
Rule 28    assignmentRule -> ID ASSIGNMENT array
Rule 29    assignmentRule -> ID ASSIGNMENT indexation
Rule 30    assignmentRule -> ID ASSIGNMENT attribute
Rule 31    assignmentRule -> ID ASSIGNMENT input
Rule 32    bodyLine -> assignmentRule
Rule 33    bodyLine -> PRINT printBody
Rule 34    bodyLine -> nestedConditional
Rule 35    bodyLine -> nestedWhile
Rule 36    bodyLine -> functionCall
Rule 37    bodyLine -> arrayConcat
Rule 38    bodyLine -> RETURN arguments
Rule 39    bodyLine -> PUTS printBody
Rule 40    bodyLine -> method
Rule 41    bodyLine -> unariOperator
Rule 42    instructionBody -> bodyLine
Rule 43    instructionBody -> bodyLine instructionBody
Rule 44    printBody -> ID
Rule 45    printBody -> TRUE
Rule 46    printBody -> FALSE
Rule 47    printBody -> dataType
Rule 48    printBody -> condition
Rule 49    printBody -> method
Rule 50    printBody -> functionCall
Rule 51    argument -> ID
Rule 52    argument -> number
Rule 53    argument -> attribute
Rule 54    argument -> indexation
Rule 55    argument -> STRING
Rule 56    arguments -> argument
Rule 57    arguments -> argument COMMA arguments
Rule 58    method -> ID DOT functionCall
Rule 59    input -> GETS DOT CHOMP DOT TO_F
Rule 60    input -> GETS DOT CHOMP DOT TO_I
Rule 61    input -> GETS DOT CHOMP
Rule 62    parameters -> ID
Rule 63    parameters -> ID COMMA parameters
Rule 64    functionCall -> ID LPAREN arguments RPAREN
Rule 65    functionCall -> ID LPAREN RPAREN
Rule 66    blockFunction -> LBRACE instructionBody RBRACE
Rule 67    blockFunction -> DO instructionBody END
Rule 68    creationStack -> STACK DOT NEW
Rule 69    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 70    creationLinkedList -> LINKEDLIST DOT NEW
Rule 71    creationTDA -> creationStack
Rule 72    creationTDA -> creationLinkedList
Rule 73    creationTDA -> creationHashmap
Rule 74    creationHashmap -> HASH DOT NEW
Rule 75    creationHashmap -> LBRACE pairs RBRACE
Rule 76    creationHashmap -> LBRACE RBRACE
Rule 77    pair -> STRING COLON value
Rule 78    pairs -> pair
Rule 79    pairs -> pair COMMA pairs
Rule 80    value -> ID
Rule 81    value -> STRING
Rule 82    value -> number
Rule 83    value -> LBRACE pairs RBRACE
Rule 84    value -> LBRACE RBRACE
Rule 85    arithmeticOperator -> PLUS
Rule 86    arithmeticOperator -> MINUS
Rule 87    arithmeticOperator -> POWER
Rule 88    arithmeticOperator -> MULTIPLICATION
Rule 89    arithmeticOperator -> DIVISION
Rule 90    attribute -> ID DOT ID
Rule 91    operationValue -> ID
Rule 92    operationValue -> number
Rule 93    operationValue -> attribute
Rule 94    operationValue -> indexation
Rule 95    operation -> operationValue arithmeticOperator operationValue
Rule 96    operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN
Rule 97    operations -> operation
Rule 98    operations -> operation arithmeticOperator operations
Rule 99    operations -> operation arithmeticOperator operationValue
Rule 100   operations -> operationValue arithmeticOperator operation
Rule 101   array -> OPENBRACKET element_list CLOSEDBRACKET
Rule 102   array -> OPENBRACKET CLOSEDBRACKET
Rule 103   element_list -> conditionValue
Rule 104   element_list -> element_list COMMA conditionValue
Rule 105   conditionValue -> ID
Rule 106   conditionValue -> number
Rule 107   conditionValue -> indexation
Rule 108   conditionValue -> attribute
Rule 109   arrayConcat -> ID ARRAYAPPEND ID
Rule 110   arrayConcat -> ID ARRAYAPPEND number
Rule 111   indexation -> ID OPENBRACKET element_list CLOSEDBRACKET
Rule 112   indexation -> ID OPENBRACKET operation CLOSEDBRACKET
Rule 113   condition -> conditionValue comparator conditionValue
Rule 114   comparator -> GREATERTHAN
Rule 115   comparator -> LESSTHAN
Rule 116   comparator -> EQUALS
Rule 117   comparator -> GREATEROREQUALS
Rule 118   comparator -> LESSOREQUALS
Rule 119   unariOperator -> ID ASSIGNDECREMENT number
Rule 120   unariOperator -> ID ASSIGNINCREMENT number
Rule 121   number -> FLOAT
Rule 122   number -> INTEGER
Rule 123   dataType -> STRING
Rule 124   dataType -> number

Terminals, with rules where they appear

AND                  : 
ARRAYAPPEND          : 109 110
ASSIGNDECREMENT      : 119
ASSIGNINCREMENT      : 120
ASSIGNMENT           : 6 21 22 23 24 25 26 27 28 29 30 31
BREAK                : 
CASE                 : 
CHOMP                : 59 60 61
CLASS                : 
CLOSEDBRACKET        : 69 101 102 111 112
COLON                : 77
COMMA                : 57 63 79 104
DEF                  : 2 3
DIVISION             : 89
DO                   : 67
DOT                  : 58 59 59 60 60 61 68 70 74 90
ELSE                 : 10 11
ELSIF                : 12
END                  : 2 3 8 9 10 11 18 67
EQUALS               : 116
FALSE                : 25 46
FLOAT                : 121
FOR                  : 
GETS                 : 59 60 61
GREATEROREQUALS      : 117
GREATERTHAN          : 114
HASH                 : 74
ID                   : 2 3 6 21 22 22 23 24 25 26 27 28 29 30 31 44 51 58 62 63 64 65 80 90 90 91 105 109 109 110 111 112 119 120
IF                   : 8 9 10 11
IN                   : 
INTEGER              : 122
LAMBDA               : 5 6
LBRACE               : 5 6 66 75 76 83 84
LESSOREQUALS         : 118
LESSTHAN             : 115
LINKEDLIST           : 70
LPAREN               : 2 3 64 65 96
MINUS                : 86
MULTIPLICATION       : 88
NEW                  : 68 70 74
NODE                 : 
OPENBRACKET          : 69 101 102 111 112
PLUS                 : 85
POWER                : 87
PRINT                : 33
PUTS                 : 39
RBRACE               : 5 6 66 75 76 83 84
RETURN               : 38
RPAREN               : 2 3 64 65 96
STACK                : 68
STRING               : 55 77 81 123
THEN                 : 
TO_F                 : 59
TO_I                 : 60
TRUE                 : 24 45
WHILE                : 18
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argument             : 56 57
arguments            : 38 57 64
arithmeticOperator   : 95 96 98 99 100
array                : 28
arrayConcat          : 37
assignmentRule       : 32
attribute            : 30 53 93 108
blockFunction        : 
bodyLine             : 42 43
comparator           : 113
condition            : 8 9 10 11 12 18 23 48
conditionValue       : 103 104 113 113
conditional          : 7 13 14
conditionalElsif     : 9 11 16
creationHashmap      : 73
creationLinkedList   : 72
creationStack        : 71
creationTDA          : 26
dataType             : 47
element_list         : 101 104 111
elsif                : 15 16
functionCall         : 36 50 58
indexation           : 29 54 94 107
input                : 31
instruction          : 0
instructionBody      : 1 2 5 6 8 9 10 10 11 11 12 18 43 66 67
lambda_expression    : 4
method               : 40 49
nestedConditional    : 14 34
nestedWhile          : 20 35
number               : 21 52 82 92 106 110 119 120 124
operation            : 97 98 99 100 112
operationValue       : 95 95 96 96 99 100
operations           : 27 98
pair                 : 78 79
pairs                : 75 79 83
parameters           : 2 63
printBody            : 33 39
unariOperator        : 41
value                : 77
whileLoop            : 17 19 20

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . lambda_expression
    (7) instruction -> . conditional
    (17) instruction -> . whileLoop
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (5) lambda_expression -> . LAMBDA LBRACE instructionBody RBRACE
    (6) lambda_expression -> . ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number

    DEF             shift and go to state 3
    LAMBDA          shift and go to state 9
    ID              shift and go to state 4
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    lambda_expression              shift and go to state 5
    conditional                    shift and go to state 6
    whileLoop                      shift and go to state 7
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 22


state 4

    (6) lambda_expression -> ID . ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE
    (21) assignmentRule -> ID . ASSIGNMENT number
    (22) assignmentRule -> ID . ASSIGNMENT ID
    (23) assignmentRule -> ID . ASSIGNMENT condition
    (24) assignmentRule -> ID . ASSIGNMENT TRUE
    (25) assignmentRule -> ID . ASSIGNMENT FALSE
    (26) assignmentRule -> ID . ASSIGNMENT creationTDA
    (27) assignmentRule -> ID . ASSIGNMENT operations
    (28) assignmentRule -> ID . ASSIGNMENT array
    (29) assignmentRule -> ID . ASSIGNMENT indexation
    (30) assignmentRule -> ID . ASSIGNMENT attribute
    (31) assignmentRule -> ID . ASSIGNMENT input
    (64) functionCall -> ID . LPAREN arguments RPAREN
    (65) functionCall -> ID . LPAREN RPAREN
    (109) arrayConcat -> ID . ARRAYAPPEND ID
    (110) arrayConcat -> ID . ARRAYAPPEND number
    (58) method -> ID . DOT functionCall
    (119) unariOperator -> ID . ASSIGNDECREMENT number
    (120) unariOperator -> ID . ASSIGNINCREMENT number

    ASSIGNMENT      shift and go to state 23
    LPAREN          shift and go to state 24
    ARRAYAPPEND     shift and go to state 25
    DOT             shift and go to state 26
    ASSIGNDECREMENT shift and go to state 27
    ASSIGNINCREMENT shift and go to state 28


state 5

    (4) instruction -> lambda_expression .

    $end            reduce using rule 4 (instruction -> lambda_expression .)


state 6

    (7) instruction -> conditional .
    (13) nestedConditional -> conditional .
    (14) nestedConditional -> conditional . nestedConditional
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 7 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 7 (instruction -> conditional .)
    PRINT           reduce using rule 13 (nestedConditional -> conditional .)
    RETURN          reduce using rule 13 (nestedConditional -> conditional .)
    PUTS            reduce using rule 13 (nestedConditional -> conditional .)
    ID              reduce using rule 13 (nestedConditional -> conditional .)
    WHILE           reduce using rule 13 (nestedConditional -> conditional .)
    IF              shift and go to state 10

  ! IF              [ reduce using rule 13 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 13 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 29
    nestedConditional              shift and go to state 30

state 7

    (17) instruction -> whileLoop .
    (19) nestedWhile -> whileLoop .
    (20) nestedWhile -> whileLoop . nestedWhile
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (18) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 17 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 17 (instruction -> whileLoop .)
    PRINT           reduce using rule 19 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 19 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 19 (nestedWhile -> whileLoop .)
    ID              reduce using rule 19 (nestedWhile -> whileLoop .)
    IF              reduce using rule 19 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 11

  ! WHILE           [ reduce using rule 19 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 19 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 31
    nestedWhile                    shift and go to state 32

state 8

    (42) instructionBody -> bodyLine .
    (43) instructionBody -> bodyLine . instructionBody
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 42 (instructionBody -> bodyLine .)
    RBRACE          reduce using rule 42 (instructionBody -> bodyLine .)
    END             reduce using rule 42 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 42 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 42 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    bodyLine                       shift and go to state 8
    instructionBody                shift and go to state 33
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 9

    (5) lambda_expression -> LAMBDA . LBRACE instructionBody RBRACE

    LBRACE          shift and go to state 35


state 10

    (8) conditional -> IF . condition instructionBody END
    (9) conditional -> IF . condition instructionBody conditionalElsif END
    (10) conditional -> IF . condition instructionBody ELSE instructionBody END
    (11) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (113) condition -> . conditionValue comparator conditionValue
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 38
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    condition                      shift and go to state 36
    conditionValue                 shift and go to state 37
    number                         shift and go to state 39
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 11

    (18) whileLoop -> WHILE . condition instructionBody END
    (113) condition -> . conditionValue comparator conditionValue
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 38
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    condition                      shift and go to state 44
    conditionValue                 shift and go to state 37
    number                         shift and go to state 39
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 12

    (32) bodyLine -> assignmentRule .

    PRINT           reduce using rule 32 (bodyLine -> assignmentRule .)
    RETURN          reduce using rule 32 (bodyLine -> assignmentRule .)
    PUTS            reduce using rule 32 (bodyLine -> assignmentRule .)
    ID              reduce using rule 32 (bodyLine -> assignmentRule .)
    IF              reduce using rule 32 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 32 (bodyLine -> assignmentRule .)
    $end            reduce using rule 32 (bodyLine -> assignmentRule .)
    RBRACE          reduce using rule 32 (bodyLine -> assignmentRule .)
    END             reduce using rule 32 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 32 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 32 (bodyLine -> assignmentRule .)


state 13

    (33) bodyLine -> PRINT . printBody
    (44) printBody -> . ID
    (45) printBody -> . TRUE
    (46) printBody -> . FALSE
    (47) printBody -> . dataType
    (48) printBody -> . condition
    (49) printBody -> . method
    (50) printBody -> . functionCall
    (123) dataType -> . STRING
    (124) dataType -> . number
    (113) condition -> . conditionValue comparator conditionValue
    (58) method -> . ID DOT functionCall
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    STRING          shift and go to state 53
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    printBody                      shift and go to state 45
    dataType                       shift and go to state 49
    condition                      shift and go to state 50
    method                         shift and go to state 51
    functionCall                   shift and go to state 52
    number                         shift and go to state 54
    conditionValue                 shift and go to state 37
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 14

    (34) bodyLine -> nestedConditional .

    PRINT           reduce using rule 34 (bodyLine -> nestedConditional .)
    RETURN          reduce using rule 34 (bodyLine -> nestedConditional .)
    PUTS            reduce using rule 34 (bodyLine -> nestedConditional .)
    ID              reduce using rule 34 (bodyLine -> nestedConditional .)
    IF              reduce using rule 34 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 34 (bodyLine -> nestedConditional .)
    $end            reduce using rule 34 (bodyLine -> nestedConditional .)
    RBRACE          reduce using rule 34 (bodyLine -> nestedConditional .)
    END             reduce using rule 34 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 34 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 34 (bodyLine -> nestedConditional .)


state 15

    (35) bodyLine -> nestedWhile .

    PRINT           reduce using rule 35 (bodyLine -> nestedWhile .)
    RETURN          reduce using rule 35 (bodyLine -> nestedWhile .)
    PUTS            reduce using rule 35 (bodyLine -> nestedWhile .)
    ID              reduce using rule 35 (bodyLine -> nestedWhile .)
    IF              reduce using rule 35 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 35 (bodyLine -> nestedWhile .)
    $end            reduce using rule 35 (bodyLine -> nestedWhile .)
    RBRACE          reduce using rule 35 (bodyLine -> nestedWhile .)
    END             reduce using rule 35 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 35 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 35 (bodyLine -> nestedWhile .)


state 16

    (36) bodyLine -> functionCall .

    PRINT           reduce using rule 36 (bodyLine -> functionCall .)
    RETURN          reduce using rule 36 (bodyLine -> functionCall .)
    PUTS            reduce using rule 36 (bodyLine -> functionCall .)
    ID              reduce using rule 36 (bodyLine -> functionCall .)
    IF              reduce using rule 36 (bodyLine -> functionCall .)
    WHILE           reduce using rule 36 (bodyLine -> functionCall .)
    $end            reduce using rule 36 (bodyLine -> functionCall .)
    RBRACE          reduce using rule 36 (bodyLine -> functionCall .)
    END             reduce using rule 36 (bodyLine -> functionCall .)
    ELSE            reduce using rule 36 (bodyLine -> functionCall .)
    ELSIF           reduce using rule 36 (bodyLine -> functionCall .)


state 17

    (37) bodyLine -> arrayConcat .

    PRINT           reduce using rule 37 (bodyLine -> arrayConcat .)
    RETURN          reduce using rule 37 (bodyLine -> arrayConcat .)
    PUTS            reduce using rule 37 (bodyLine -> arrayConcat .)
    ID              reduce using rule 37 (bodyLine -> arrayConcat .)
    IF              reduce using rule 37 (bodyLine -> arrayConcat .)
    WHILE           reduce using rule 37 (bodyLine -> arrayConcat .)
    $end            reduce using rule 37 (bodyLine -> arrayConcat .)
    RBRACE          reduce using rule 37 (bodyLine -> arrayConcat .)
    END             reduce using rule 37 (bodyLine -> arrayConcat .)
    ELSE            reduce using rule 37 (bodyLine -> arrayConcat .)
    ELSIF           reduce using rule 37 (bodyLine -> arrayConcat .)


state 18

    (38) bodyLine -> RETURN . arguments
    (56) arguments -> . argument
    (57) arguments -> . argument COMMA arguments
    (51) argument -> . ID
    (52) argument -> . number
    (53) argument -> . attribute
    (54) argument -> . indexation
    (55) argument -> . STRING
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 57
    STRING          shift and go to state 61
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    arguments                      shift and go to state 55
    argument                       shift and go to state 56
    number                         shift and go to state 58
    attribute                      shift and go to state 59
    indexation                     shift and go to state 60

state 19

    (39) bodyLine -> PUTS . printBody
    (44) printBody -> . ID
    (45) printBody -> . TRUE
    (46) printBody -> . FALSE
    (47) printBody -> . dataType
    (48) printBody -> . condition
    (49) printBody -> . method
    (50) printBody -> . functionCall
    (123) dataType -> . STRING
    (124) dataType -> . number
    (113) condition -> . conditionValue comparator conditionValue
    (58) method -> . ID DOT functionCall
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    STRING          shift and go to state 53
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    printBody                      shift and go to state 62
    dataType                       shift and go to state 49
    condition                      shift and go to state 50
    method                         shift and go to state 51
    functionCall                   shift and go to state 52
    number                         shift and go to state 54
    conditionValue                 shift and go to state 37
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 20

    (40) bodyLine -> method .

    PRINT           reduce using rule 40 (bodyLine -> method .)
    RETURN          reduce using rule 40 (bodyLine -> method .)
    PUTS            reduce using rule 40 (bodyLine -> method .)
    ID              reduce using rule 40 (bodyLine -> method .)
    IF              reduce using rule 40 (bodyLine -> method .)
    WHILE           reduce using rule 40 (bodyLine -> method .)
    $end            reduce using rule 40 (bodyLine -> method .)
    RBRACE          reduce using rule 40 (bodyLine -> method .)
    END             reduce using rule 40 (bodyLine -> method .)
    ELSE            reduce using rule 40 (bodyLine -> method .)
    ELSIF           reduce using rule 40 (bodyLine -> method .)


state 21

    (41) bodyLine -> unariOperator .

    PRINT           reduce using rule 41 (bodyLine -> unariOperator .)
    RETURN          reduce using rule 41 (bodyLine -> unariOperator .)
    PUTS            reduce using rule 41 (bodyLine -> unariOperator .)
    ID              reduce using rule 41 (bodyLine -> unariOperator .)
    IF              reduce using rule 41 (bodyLine -> unariOperator .)
    WHILE           reduce using rule 41 (bodyLine -> unariOperator .)
    $end            reduce using rule 41 (bodyLine -> unariOperator .)
    RBRACE          reduce using rule 41 (bodyLine -> unariOperator .)
    END             reduce using rule 41 (bodyLine -> unariOperator .)
    ELSE            reduce using rule 41 (bodyLine -> unariOperator .)
    ELSIF           reduce using rule 41 (bodyLine -> unariOperator .)


state 22

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 63


state 23

    (6) lambda_expression -> ID ASSIGNMENT . LAMBDA LBRACE instructionBody RBRACE
    (21) assignmentRule -> ID ASSIGNMENT . number
    (22) assignmentRule -> ID ASSIGNMENT . ID
    (23) assignmentRule -> ID ASSIGNMENT . condition
    (24) assignmentRule -> ID ASSIGNMENT . TRUE
    (25) assignmentRule -> ID ASSIGNMENT . FALSE
    (26) assignmentRule -> ID ASSIGNMENT . creationTDA
    (27) assignmentRule -> ID ASSIGNMENT . operations
    (28) assignmentRule -> ID ASSIGNMENT . array
    (29) assignmentRule -> ID ASSIGNMENT . indexation
    (30) assignmentRule -> ID ASSIGNMENT . attribute
    (31) assignmentRule -> ID ASSIGNMENT . input
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (113) condition -> . conditionValue comparator conditionValue
    (71) creationTDA -> . creationStack
    (72) creationTDA -> . creationLinkedList
    (73) creationTDA -> . creationHashmap
    (97) operations -> . operation
    (98) operations -> . operation arithmeticOperator operations
    (99) operations -> . operation arithmeticOperator operationValue
    (100) operations -> . operationValue arithmeticOperator operation
    (101) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (102) array -> . OPENBRACKET CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID
    (59) input -> . GETS DOT CHOMP DOT TO_F
    (60) input -> . GETS DOT CHOMP DOT TO_I
    (61) input -> . GETS DOT CHOMP
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (68) creationStack -> . STACK DOT NEW
    (69) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (70) creationLinkedList -> . LINKEDLIST DOT NEW
    (74) creationHashmap -> . HASH DOT NEW
    (75) creationHashmap -> . LBRACE pairs RBRACE
    (76) creationHashmap -> . LBRACE RBRACE
    (95) operation -> . operationValue arithmeticOperator operationValue
    (96) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation

    LAMBDA          shift and go to state 65
    ID              shift and go to state 64
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43
    OPENBRACKET     shift and go to state 82
    GETS            shift and go to state 83
    STACK           shift and go to state 84
    LINKEDLIST      shift and go to state 85
    HASH            shift and go to state 86
    LBRACE          shift and go to state 66
    LPAREN          shift and go to state 87

    number                         shift and go to state 67
    condition                      shift and go to state 68
    creationTDA                    shift and go to state 71
    operations                     shift and go to state 72
    array                          shift and go to state 73
    indexation                     shift and go to state 74
    attribute                      shift and go to state 75
    input                          shift and go to state 76
    conditionValue                 shift and go to state 37
    creationStack                  shift and go to state 77
    creationLinkedList             shift and go to state 78
    creationHashmap                shift and go to state 79
    operation                      shift and go to state 80
    operationValue                 shift and go to state 81

state 24

    (64) functionCall -> ID LPAREN . arguments RPAREN
    (65) functionCall -> ID LPAREN . RPAREN
    (56) arguments -> . argument
    (57) arguments -> . argument COMMA arguments
    (51) argument -> . ID
    (52) argument -> . number
    (53) argument -> . attribute
    (54) argument -> . indexation
    (55) argument -> . STRING
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    RPAREN          shift and go to state 89
    ID              shift and go to state 57
    STRING          shift and go to state 61
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    arguments                      shift and go to state 88
    argument                       shift and go to state 56
    number                         shift and go to state 58
    attribute                      shift and go to state 59
    indexation                     shift and go to state 60

state 25

    (109) arrayConcat -> ID ARRAYAPPEND . ID
    (110) arrayConcat -> ID ARRAYAPPEND . number
    (121) number -> . FLOAT
    (122) number -> . INTEGER

    ID              shift and go to state 90
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    number                         shift and go to state 91

state 26

    (58) method -> ID DOT . functionCall
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 92

    functionCall                   shift and go to state 93

state 27

    (119) unariOperator -> ID ASSIGNDECREMENT . number
    (121) number -> . FLOAT
    (122) number -> . INTEGER

    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    number                         shift and go to state 94

state 28

    (120) unariOperator -> ID ASSIGNINCREMENT . number
    (121) number -> . FLOAT
    (122) number -> . INTEGER

    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    number                         shift and go to state 95

state 29

    (13) nestedConditional -> conditional .
    (14) nestedConditional -> conditional . nestedConditional
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 13 (nestedConditional -> conditional .)
    RETURN          reduce using rule 13 (nestedConditional -> conditional .)
    PUTS            reduce using rule 13 (nestedConditional -> conditional .)
    ID              reduce using rule 13 (nestedConditional -> conditional .)
    WHILE           reduce using rule 13 (nestedConditional -> conditional .)
    $end            reduce using rule 13 (nestedConditional -> conditional .)
    RBRACE          reduce using rule 13 (nestedConditional -> conditional .)
    END             reduce using rule 13 (nestedConditional -> conditional .)
    ELSE            reduce using rule 13 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 13 (nestedConditional -> conditional .)
    IF              shift and go to state 10

  ! IF              [ reduce using rule 13 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 29
    nestedConditional              shift and go to state 30

state 30

    (14) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    RETURN          reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    PUTS            reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    RBRACE          reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 14 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 14 (nestedConditional -> conditional nestedConditional .)


state 31

    (19) nestedWhile -> whileLoop .
    (20) nestedWhile -> whileLoop . nestedWhile
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (18) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 19 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 19 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 19 (nestedWhile -> whileLoop .)
    ID              reduce using rule 19 (nestedWhile -> whileLoop .)
    IF              reduce using rule 19 (nestedWhile -> whileLoop .)
    $end            reduce using rule 19 (nestedWhile -> whileLoop .)
    RBRACE          reduce using rule 19 (nestedWhile -> whileLoop .)
    END             reduce using rule 19 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 19 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 19 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 11

  ! WHILE           [ reduce using rule 19 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 31
    nestedWhile                    shift and go to state 32

state 32

    (20) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    RETURN          reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    PUTS            reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    RBRACE          reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 20 (nestedWhile -> whileLoop nestedWhile .)


state 33

    (43) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 43 (instructionBody -> bodyLine instructionBody .)
    RBRACE          reduce using rule 43 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 43 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 43 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 43 (instructionBody -> bodyLine instructionBody .)


state 34

    (21) assignmentRule -> ID . ASSIGNMENT number
    (22) assignmentRule -> ID . ASSIGNMENT ID
    (23) assignmentRule -> ID . ASSIGNMENT condition
    (24) assignmentRule -> ID . ASSIGNMENT TRUE
    (25) assignmentRule -> ID . ASSIGNMENT FALSE
    (26) assignmentRule -> ID . ASSIGNMENT creationTDA
    (27) assignmentRule -> ID . ASSIGNMENT operations
    (28) assignmentRule -> ID . ASSIGNMENT array
    (29) assignmentRule -> ID . ASSIGNMENT indexation
    (30) assignmentRule -> ID . ASSIGNMENT attribute
    (31) assignmentRule -> ID . ASSIGNMENT input
    (64) functionCall -> ID . LPAREN arguments RPAREN
    (65) functionCall -> ID . LPAREN RPAREN
    (109) arrayConcat -> ID . ARRAYAPPEND ID
    (110) arrayConcat -> ID . ARRAYAPPEND number
    (58) method -> ID . DOT functionCall
    (119) unariOperator -> ID . ASSIGNDECREMENT number
    (120) unariOperator -> ID . ASSIGNINCREMENT number

    ASSIGNMENT      shift and go to state 96
    LPAREN          shift and go to state 24
    ARRAYAPPEND     shift and go to state 25
    DOT             shift and go to state 26
    ASSIGNDECREMENT shift and go to state 27
    ASSIGNINCREMENT shift and go to state 28


state 35

    (5) lambda_expression -> LAMBDA LBRACE . instructionBody RBRACE
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 97
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 36

    (8) conditional -> IF condition . instructionBody END
    (9) conditional -> IF condition . instructionBody conditionalElsif END
    (10) conditional -> IF condition . instructionBody ELSE instructionBody END
    (11) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 98
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 37

    (113) condition -> conditionValue . comparator conditionValue
    (114) comparator -> . GREATERTHAN
    (115) comparator -> . LESSTHAN
    (116) comparator -> . EQUALS
    (117) comparator -> . GREATEROREQUALS
    (118) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 100
    LESSTHAN        shift and go to state 101
    EQUALS          shift and go to state 102
    GREATEROREQUALS shift and go to state 103
    LESSOREQUALS    shift and go to state 104

    comparator                     shift and go to state 99

state 38

    (105) conditionValue -> ID .
    (111) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> ID . DOT ID

    GREATERTHAN     reduce using rule 105 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 105 (conditionValue -> ID .)
    EQUALS          reduce using rule 105 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> ID .)
    CLOSEDBRACKET   reduce using rule 105 (conditionValue -> ID .)
    COMMA           reduce using rule 105 (conditionValue -> ID .)
    PRINT           reduce using rule 105 (conditionValue -> ID .)
    RETURN          reduce using rule 105 (conditionValue -> ID .)
    PUTS            reduce using rule 105 (conditionValue -> ID .)
    ID              reduce using rule 105 (conditionValue -> ID .)
    IF              reduce using rule 105 (conditionValue -> ID .)
    WHILE           reduce using rule 105 (conditionValue -> ID .)
    $end            reduce using rule 105 (conditionValue -> ID .)
    RBRACE          reduce using rule 105 (conditionValue -> ID .)
    END             reduce using rule 105 (conditionValue -> ID .)
    ELSE            reduce using rule 105 (conditionValue -> ID .)
    ELSIF           reduce using rule 105 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 105
    DOT             shift and go to state 106


state 39

    (106) conditionValue -> number .

    GREATERTHAN     reduce using rule 106 (conditionValue -> number .)
    LESSTHAN        reduce using rule 106 (conditionValue -> number .)
    EQUALS          reduce using rule 106 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> number .)
    CLOSEDBRACKET   reduce using rule 106 (conditionValue -> number .)
    COMMA           reduce using rule 106 (conditionValue -> number .)
    PRINT           reduce using rule 106 (conditionValue -> number .)
    RETURN          reduce using rule 106 (conditionValue -> number .)
    PUTS            reduce using rule 106 (conditionValue -> number .)
    ID              reduce using rule 106 (conditionValue -> number .)
    IF              reduce using rule 106 (conditionValue -> number .)
    WHILE           reduce using rule 106 (conditionValue -> number .)
    $end            reduce using rule 106 (conditionValue -> number .)
    RBRACE          reduce using rule 106 (conditionValue -> number .)
    END             reduce using rule 106 (conditionValue -> number .)
    ELSE            reduce using rule 106 (conditionValue -> number .)
    ELSIF           reduce using rule 106 (conditionValue -> number .)


state 40

    (107) conditionValue -> indexation .

    GREATERTHAN     reduce using rule 107 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 107 (conditionValue -> indexation .)
    EQUALS          reduce using rule 107 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 107 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 107 (conditionValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 107 (conditionValue -> indexation .)
    COMMA           reduce using rule 107 (conditionValue -> indexation .)
    PRINT           reduce using rule 107 (conditionValue -> indexation .)
    RETURN          reduce using rule 107 (conditionValue -> indexation .)
    PUTS            reduce using rule 107 (conditionValue -> indexation .)
    ID              reduce using rule 107 (conditionValue -> indexation .)
    IF              reduce using rule 107 (conditionValue -> indexation .)
    WHILE           reduce using rule 107 (conditionValue -> indexation .)
    $end            reduce using rule 107 (conditionValue -> indexation .)
    RBRACE          reduce using rule 107 (conditionValue -> indexation .)
    END             reduce using rule 107 (conditionValue -> indexation .)
    ELSE            reduce using rule 107 (conditionValue -> indexation .)
    ELSIF           reduce using rule 107 (conditionValue -> indexation .)


state 41

    (108) conditionValue -> attribute .

    GREATERTHAN     reduce using rule 108 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 108 (conditionValue -> attribute .)
    EQUALS          reduce using rule 108 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 108 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 108 (conditionValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 108 (conditionValue -> attribute .)
    COMMA           reduce using rule 108 (conditionValue -> attribute .)
    PRINT           reduce using rule 108 (conditionValue -> attribute .)
    RETURN          reduce using rule 108 (conditionValue -> attribute .)
    PUTS            reduce using rule 108 (conditionValue -> attribute .)
    ID              reduce using rule 108 (conditionValue -> attribute .)
    IF              reduce using rule 108 (conditionValue -> attribute .)
    WHILE           reduce using rule 108 (conditionValue -> attribute .)
    $end            reduce using rule 108 (conditionValue -> attribute .)
    RBRACE          reduce using rule 108 (conditionValue -> attribute .)
    END             reduce using rule 108 (conditionValue -> attribute .)
    ELSE            reduce using rule 108 (conditionValue -> attribute .)
    ELSIF           reduce using rule 108 (conditionValue -> attribute .)


state 42

    (121) number -> FLOAT .

    GREATERTHAN     reduce using rule 121 (number -> FLOAT .)
    LESSTHAN        reduce using rule 121 (number -> FLOAT .)
    EQUALS          reduce using rule 121 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 121 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 121 (number -> FLOAT .)
    PRINT           reduce using rule 121 (number -> FLOAT .)
    RETURN          reduce using rule 121 (number -> FLOAT .)
    PUTS            reduce using rule 121 (number -> FLOAT .)
    ID              reduce using rule 121 (number -> FLOAT .)
    IF              reduce using rule 121 (number -> FLOAT .)
    WHILE           reduce using rule 121 (number -> FLOAT .)
    $end            reduce using rule 121 (number -> FLOAT .)
    RBRACE          reduce using rule 121 (number -> FLOAT .)
    END             reduce using rule 121 (number -> FLOAT .)
    ELSE            reduce using rule 121 (number -> FLOAT .)
    ELSIF           reduce using rule 121 (number -> FLOAT .)
    COMMA           reduce using rule 121 (number -> FLOAT .)
    PLUS            reduce using rule 121 (number -> FLOAT .)
    MINUS           reduce using rule 121 (number -> FLOAT .)
    POWER           reduce using rule 121 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 121 (number -> FLOAT .)
    DIVISION        reduce using rule 121 (number -> FLOAT .)
    RPAREN          reduce using rule 121 (number -> FLOAT .)
    CLOSEDBRACKET   reduce using rule 121 (number -> FLOAT .)


state 43

    (122) number -> INTEGER .

    GREATERTHAN     reduce using rule 122 (number -> INTEGER .)
    LESSTHAN        reduce using rule 122 (number -> INTEGER .)
    EQUALS          reduce using rule 122 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 122 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 122 (number -> INTEGER .)
    PRINT           reduce using rule 122 (number -> INTEGER .)
    RETURN          reduce using rule 122 (number -> INTEGER .)
    PUTS            reduce using rule 122 (number -> INTEGER .)
    ID              reduce using rule 122 (number -> INTEGER .)
    IF              reduce using rule 122 (number -> INTEGER .)
    WHILE           reduce using rule 122 (number -> INTEGER .)
    $end            reduce using rule 122 (number -> INTEGER .)
    RBRACE          reduce using rule 122 (number -> INTEGER .)
    END             reduce using rule 122 (number -> INTEGER .)
    ELSE            reduce using rule 122 (number -> INTEGER .)
    ELSIF           reduce using rule 122 (number -> INTEGER .)
    COMMA           reduce using rule 122 (number -> INTEGER .)
    PLUS            reduce using rule 122 (number -> INTEGER .)
    MINUS           reduce using rule 122 (number -> INTEGER .)
    POWER           reduce using rule 122 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 122 (number -> INTEGER .)
    DIVISION        reduce using rule 122 (number -> INTEGER .)
    RPAREN          reduce using rule 122 (number -> INTEGER .)
    CLOSEDBRACKET   reduce using rule 122 (number -> INTEGER .)


state 44

    (18) whileLoop -> WHILE condition . instructionBody END
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 107
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 45

    (33) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 33 (bodyLine -> PRINT printBody .)
    RETURN          reduce using rule 33 (bodyLine -> PRINT printBody .)
    PUTS            reduce using rule 33 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 33 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 33 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 33 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 33 (bodyLine -> PRINT printBody .)
    RBRACE          reduce using rule 33 (bodyLine -> PRINT printBody .)
    END             reduce using rule 33 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 33 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 33 (bodyLine -> PRINT printBody .)


state 46

    (44) printBody -> ID .
    (58) method -> ID . DOT functionCall
    (64) functionCall -> ID . LPAREN arguments RPAREN
    (65) functionCall -> ID . LPAREN RPAREN
    (105) conditionValue -> ID .
    (111) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> ID . DOT ID

    PRINT           reduce using rule 44 (printBody -> ID .)
    RETURN          reduce using rule 44 (printBody -> ID .)
    PUTS            reduce using rule 44 (printBody -> ID .)
    ID              reduce using rule 44 (printBody -> ID .)
    IF              reduce using rule 44 (printBody -> ID .)
    WHILE           reduce using rule 44 (printBody -> ID .)
    $end            reduce using rule 44 (printBody -> ID .)
    RBRACE          reduce using rule 44 (printBody -> ID .)
    END             reduce using rule 44 (printBody -> ID .)
    ELSE            reduce using rule 44 (printBody -> ID .)
    ELSIF           reduce using rule 44 (printBody -> ID .)
    DOT             shift and go to state 108
    LPAREN          shift and go to state 24
    GREATERTHAN     reduce using rule 105 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 105 (conditionValue -> ID .)
    EQUALS          reduce using rule 105 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 105


state 47

    (45) printBody -> TRUE .

    PRINT           reduce using rule 45 (printBody -> TRUE .)
    RETURN          reduce using rule 45 (printBody -> TRUE .)
    PUTS            reduce using rule 45 (printBody -> TRUE .)
    ID              reduce using rule 45 (printBody -> TRUE .)
    IF              reduce using rule 45 (printBody -> TRUE .)
    WHILE           reduce using rule 45 (printBody -> TRUE .)
    $end            reduce using rule 45 (printBody -> TRUE .)
    RBRACE          reduce using rule 45 (printBody -> TRUE .)
    END             reduce using rule 45 (printBody -> TRUE .)
    ELSE            reduce using rule 45 (printBody -> TRUE .)
    ELSIF           reduce using rule 45 (printBody -> TRUE .)


state 48

    (46) printBody -> FALSE .

    PRINT           reduce using rule 46 (printBody -> FALSE .)
    RETURN          reduce using rule 46 (printBody -> FALSE .)
    PUTS            reduce using rule 46 (printBody -> FALSE .)
    ID              reduce using rule 46 (printBody -> FALSE .)
    IF              reduce using rule 46 (printBody -> FALSE .)
    WHILE           reduce using rule 46 (printBody -> FALSE .)
    $end            reduce using rule 46 (printBody -> FALSE .)
    RBRACE          reduce using rule 46 (printBody -> FALSE .)
    END             reduce using rule 46 (printBody -> FALSE .)
    ELSE            reduce using rule 46 (printBody -> FALSE .)
    ELSIF           reduce using rule 46 (printBody -> FALSE .)


state 49

    (47) printBody -> dataType .

    PRINT           reduce using rule 47 (printBody -> dataType .)
    RETURN          reduce using rule 47 (printBody -> dataType .)
    PUTS            reduce using rule 47 (printBody -> dataType .)
    ID              reduce using rule 47 (printBody -> dataType .)
    IF              reduce using rule 47 (printBody -> dataType .)
    WHILE           reduce using rule 47 (printBody -> dataType .)
    $end            reduce using rule 47 (printBody -> dataType .)
    RBRACE          reduce using rule 47 (printBody -> dataType .)
    END             reduce using rule 47 (printBody -> dataType .)
    ELSE            reduce using rule 47 (printBody -> dataType .)
    ELSIF           reduce using rule 47 (printBody -> dataType .)


state 50

    (48) printBody -> condition .

    PRINT           reduce using rule 48 (printBody -> condition .)
    RETURN          reduce using rule 48 (printBody -> condition .)
    PUTS            reduce using rule 48 (printBody -> condition .)
    ID              reduce using rule 48 (printBody -> condition .)
    IF              reduce using rule 48 (printBody -> condition .)
    WHILE           reduce using rule 48 (printBody -> condition .)
    $end            reduce using rule 48 (printBody -> condition .)
    RBRACE          reduce using rule 48 (printBody -> condition .)
    END             reduce using rule 48 (printBody -> condition .)
    ELSE            reduce using rule 48 (printBody -> condition .)
    ELSIF           reduce using rule 48 (printBody -> condition .)


state 51

    (49) printBody -> method .

    PRINT           reduce using rule 49 (printBody -> method .)
    RETURN          reduce using rule 49 (printBody -> method .)
    PUTS            reduce using rule 49 (printBody -> method .)
    ID              reduce using rule 49 (printBody -> method .)
    IF              reduce using rule 49 (printBody -> method .)
    WHILE           reduce using rule 49 (printBody -> method .)
    $end            reduce using rule 49 (printBody -> method .)
    RBRACE          reduce using rule 49 (printBody -> method .)
    END             reduce using rule 49 (printBody -> method .)
    ELSE            reduce using rule 49 (printBody -> method .)
    ELSIF           reduce using rule 49 (printBody -> method .)


state 52

    (50) printBody -> functionCall .

    PRINT           reduce using rule 50 (printBody -> functionCall .)
    RETURN          reduce using rule 50 (printBody -> functionCall .)
    PUTS            reduce using rule 50 (printBody -> functionCall .)
    ID              reduce using rule 50 (printBody -> functionCall .)
    IF              reduce using rule 50 (printBody -> functionCall .)
    WHILE           reduce using rule 50 (printBody -> functionCall .)
    $end            reduce using rule 50 (printBody -> functionCall .)
    RBRACE          reduce using rule 50 (printBody -> functionCall .)
    END             reduce using rule 50 (printBody -> functionCall .)
    ELSE            reduce using rule 50 (printBody -> functionCall .)
    ELSIF           reduce using rule 50 (printBody -> functionCall .)


state 53

    (123) dataType -> STRING .

    PRINT           reduce using rule 123 (dataType -> STRING .)
    RETURN          reduce using rule 123 (dataType -> STRING .)
    PUTS            reduce using rule 123 (dataType -> STRING .)
    ID              reduce using rule 123 (dataType -> STRING .)
    IF              reduce using rule 123 (dataType -> STRING .)
    WHILE           reduce using rule 123 (dataType -> STRING .)
    $end            reduce using rule 123 (dataType -> STRING .)
    RBRACE          reduce using rule 123 (dataType -> STRING .)
    END             reduce using rule 123 (dataType -> STRING .)
    ELSE            reduce using rule 123 (dataType -> STRING .)
    ELSIF           reduce using rule 123 (dataType -> STRING .)


state 54

    (124) dataType -> number .
    (106) conditionValue -> number .

    PRINT           reduce using rule 124 (dataType -> number .)
    RETURN          reduce using rule 124 (dataType -> number .)
    PUTS            reduce using rule 124 (dataType -> number .)
    ID              reduce using rule 124 (dataType -> number .)
    IF              reduce using rule 124 (dataType -> number .)
    WHILE           reduce using rule 124 (dataType -> number .)
    $end            reduce using rule 124 (dataType -> number .)
    RBRACE          reduce using rule 124 (dataType -> number .)
    END             reduce using rule 124 (dataType -> number .)
    ELSE            reduce using rule 124 (dataType -> number .)
    ELSIF           reduce using rule 124 (dataType -> number .)
    GREATERTHAN     reduce using rule 106 (conditionValue -> number .)
    LESSTHAN        reduce using rule 106 (conditionValue -> number .)
    EQUALS          reduce using rule 106 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> number .)


state 55

    (38) bodyLine -> RETURN arguments .

    PRINT           reduce using rule 38 (bodyLine -> RETURN arguments .)
    RETURN          reduce using rule 38 (bodyLine -> RETURN arguments .)
    PUTS            reduce using rule 38 (bodyLine -> RETURN arguments .)
    ID              reduce using rule 38 (bodyLine -> RETURN arguments .)
    IF              reduce using rule 38 (bodyLine -> RETURN arguments .)
    WHILE           reduce using rule 38 (bodyLine -> RETURN arguments .)
    $end            reduce using rule 38 (bodyLine -> RETURN arguments .)
    RBRACE          reduce using rule 38 (bodyLine -> RETURN arguments .)
    END             reduce using rule 38 (bodyLine -> RETURN arguments .)
    ELSE            reduce using rule 38 (bodyLine -> RETURN arguments .)
    ELSIF           reduce using rule 38 (bodyLine -> RETURN arguments .)


state 56

    (56) arguments -> argument .
    (57) arguments -> argument . COMMA arguments

    PRINT           reduce using rule 56 (arguments -> argument .)
    RETURN          reduce using rule 56 (arguments -> argument .)
    PUTS            reduce using rule 56 (arguments -> argument .)
    ID              reduce using rule 56 (arguments -> argument .)
    IF              reduce using rule 56 (arguments -> argument .)
    WHILE           reduce using rule 56 (arguments -> argument .)
    $end            reduce using rule 56 (arguments -> argument .)
    RBRACE          reduce using rule 56 (arguments -> argument .)
    END             reduce using rule 56 (arguments -> argument .)
    ELSE            reduce using rule 56 (arguments -> argument .)
    ELSIF           reduce using rule 56 (arguments -> argument .)
    RPAREN          reduce using rule 56 (arguments -> argument .)
    COMMA           shift and go to state 109


state 57

    (51) argument -> ID .
    (90) attribute -> ID . DOT ID
    (111) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    COMMA           reduce using rule 51 (argument -> ID .)
    PRINT           reduce using rule 51 (argument -> ID .)
    RETURN          reduce using rule 51 (argument -> ID .)
    PUTS            reduce using rule 51 (argument -> ID .)
    ID              reduce using rule 51 (argument -> ID .)
    IF              reduce using rule 51 (argument -> ID .)
    WHILE           reduce using rule 51 (argument -> ID .)
    $end            reduce using rule 51 (argument -> ID .)
    RBRACE          reduce using rule 51 (argument -> ID .)
    END             reduce using rule 51 (argument -> ID .)
    ELSE            reduce using rule 51 (argument -> ID .)
    ELSIF           reduce using rule 51 (argument -> ID .)
    RPAREN          reduce using rule 51 (argument -> ID .)
    DOT             shift and go to state 106
    OPENBRACKET     shift and go to state 105


state 58

    (52) argument -> number .

    COMMA           reduce using rule 52 (argument -> number .)
    PRINT           reduce using rule 52 (argument -> number .)
    RETURN          reduce using rule 52 (argument -> number .)
    PUTS            reduce using rule 52 (argument -> number .)
    ID              reduce using rule 52 (argument -> number .)
    IF              reduce using rule 52 (argument -> number .)
    WHILE           reduce using rule 52 (argument -> number .)
    $end            reduce using rule 52 (argument -> number .)
    RBRACE          reduce using rule 52 (argument -> number .)
    END             reduce using rule 52 (argument -> number .)
    ELSE            reduce using rule 52 (argument -> number .)
    ELSIF           reduce using rule 52 (argument -> number .)
    RPAREN          reduce using rule 52 (argument -> number .)


state 59

    (53) argument -> attribute .

    COMMA           reduce using rule 53 (argument -> attribute .)
    PRINT           reduce using rule 53 (argument -> attribute .)
    RETURN          reduce using rule 53 (argument -> attribute .)
    PUTS            reduce using rule 53 (argument -> attribute .)
    ID              reduce using rule 53 (argument -> attribute .)
    IF              reduce using rule 53 (argument -> attribute .)
    WHILE           reduce using rule 53 (argument -> attribute .)
    $end            reduce using rule 53 (argument -> attribute .)
    RBRACE          reduce using rule 53 (argument -> attribute .)
    END             reduce using rule 53 (argument -> attribute .)
    ELSE            reduce using rule 53 (argument -> attribute .)
    ELSIF           reduce using rule 53 (argument -> attribute .)
    RPAREN          reduce using rule 53 (argument -> attribute .)


state 60

    (54) argument -> indexation .

    COMMA           reduce using rule 54 (argument -> indexation .)
    PRINT           reduce using rule 54 (argument -> indexation .)
    RETURN          reduce using rule 54 (argument -> indexation .)
    PUTS            reduce using rule 54 (argument -> indexation .)
    ID              reduce using rule 54 (argument -> indexation .)
    IF              reduce using rule 54 (argument -> indexation .)
    WHILE           reduce using rule 54 (argument -> indexation .)
    $end            reduce using rule 54 (argument -> indexation .)
    RBRACE          reduce using rule 54 (argument -> indexation .)
    END             reduce using rule 54 (argument -> indexation .)
    ELSE            reduce using rule 54 (argument -> indexation .)
    ELSIF           reduce using rule 54 (argument -> indexation .)
    RPAREN          reduce using rule 54 (argument -> indexation .)


state 61

    (55) argument -> STRING .

    COMMA           reduce using rule 55 (argument -> STRING .)
    PRINT           reduce using rule 55 (argument -> STRING .)
    RETURN          reduce using rule 55 (argument -> STRING .)
    PUTS            reduce using rule 55 (argument -> STRING .)
    ID              reduce using rule 55 (argument -> STRING .)
    IF              reduce using rule 55 (argument -> STRING .)
    WHILE           reduce using rule 55 (argument -> STRING .)
    $end            reduce using rule 55 (argument -> STRING .)
    RBRACE          reduce using rule 55 (argument -> STRING .)
    END             reduce using rule 55 (argument -> STRING .)
    ELSE            reduce using rule 55 (argument -> STRING .)
    ELSIF           reduce using rule 55 (argument -> STRING .)
    RPAREN          reduce using rule 55 (argument -> STRING .)


state 62

    (39) bodyLine -> PUTS printBody .

    PRINT           reduce using rule 39 (bodyLine -> PUTS printBody .)
    RETURN          reduce using rule 39 (bodyLine -> PUTS printBody .)
    PUTS            reduce using rule 39 (bodyLine -> PUTS printBody .)
    ID              reduce using rule 39 (bodyLine -> PUTS printBody .)
    IF              reduce using rule 39 (bodyLine -> PUTS printBody .)
    WHILE           reduce using rule 39 (bodyLine -> PUTS printBody .)
    $end            reduce using rule 39 (bodyLine -> PUTS printBody .)
    RBRACE          reduce using rule 39 (bodyLine -> PUTS printBody .)
    END             reduce using rule 39 (bodyLine -> PUTS printBody .)
    ELSE            reduce using rule 39 (bodyLine -> PUTS printBody .)
    ELSIF           reduce using rule 39 (bodyLine -> PUTS printBody .)


state 63

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (62) parameters -> . ID
    (63) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 112
    ID              shift and go to state 110

    parameters                     shift and go to state 111

state 64

    (22) assignmentRule -> ID ASSIGNMENT ID .
    (111) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> ID . DOT ID
    (105) conditionValue -> ID .
    (91) operationValue -> ID .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    RETURN          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    PUTS            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    RBRACE          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT ID .)
    OPENBRACKET     shift and go to state 105
    DOT             shift and go to state 106
    GREATERTHAN     reduce using rule 105 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 105 (conditionValue -> ID .)
    EQUALS          reduce using rule 105 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> ID .)
    PLUS            reduce using rule 91 (operationValue -> ID .)
    MINUS           reduce using rule 91 (operationValue -> ID .)
    POWER           reduce using rule 91 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> ID .)
    DIVISION        reduce using rule 91 (operationValue -> ID .)


state 65

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA . LBRACE instructionBody RBRACE

    LBRACE          shift and go to state 113


state 66

    (75) creationHashmap -> LBRACE . pairs RBRACE
    (76) creationHashmap -> LBRACE . RBRACE
    (78) pairs -> . pair
    (79) pairs -> . pair COMMA pairs
    (77) pair -> . STRING COLON value

    RBRACE          shift and go to state 115
    STRING          shift and go to state 117

    pairs                          shift and go to state 114
    pair                           shift and go to state 116

state 67

    (21) assignmentRule -> ID ASSIGNMENT number .
    (106) conditionValue -> number .
    (92) operationValue -> number .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    RETURN          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    PUTS            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    RBRACE          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 106 (conditionValue -> number .)
    LESSTHAN        reduce using rule 106 (conditionValue -> number .)
    EQUALS          reduce using rule 106 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> number .)
    PLUS            reduce using rule 92 (operationValue -> number .)
    MINUS           reduce using rule 92 (operationValue -> number .)
    POWER           reduce using rule 92 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> number .)
    DIVISION        reduce using rule 92 (operationValue -> number .)


state 68

    (23) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    RETURN          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    PUTS            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    RBRACE          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT condition .)


state 69

    (24) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RETURN          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    PUTS            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RBRACE          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 70

    (25) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RETURN          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    PUTS            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RBRACE          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 71

    (26) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RETURN          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    PUTS            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RBRACE          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 72

    (27) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    RETURN          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    PUTS            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    RBRACE          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT operations .)


state 73

    (28) assignmentRule -> ID ASSIGNMENT array .

    PRINT           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    RETURN          reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    PUTS            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    ID              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    IF              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    WHILE           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    $end            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    RBRACE          reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    END             reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    ELSE            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)
    ELSIF           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT array .)


state 74

    (29) assignmentRule -> ID ASSIGNMENT indexation .
    (107) conditionValue -> indexation .
    (94) operationValue -> indexation .

    PRINT           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    RETURN          reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    PUTS            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    ID              reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    IF              reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    WHILE           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    $end            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    RBRACE          reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    END             reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSE            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSIF           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT indexation .)
    GREATERTHAN     reduce using rule 107 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 107 (conditionValue -> indexation .)
    EQUALS          reduce using rule 107 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 107 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 107 (conditionValue -> indexation .)
    PLUS            reduce using rule 94 (operationValue -> indexation .)
    MINUS           reduce using rule 94 (operationValue -> indexation .)
    POWER           reduce using rule 94 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 94 (operationValue -> indexation .)
    DIVISION        reduce using rule 94 (operationValue -> indexation .)


state 75

    (30) assignmentRule -> ID ASSIGNMENT attribute .
    (108) conditionValue -> attribute .
    (93) operationValue -> attribute .

    PRINT           reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    RETURN          reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    PUTS            reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    ID              reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    IF              reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    WHILE           reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    $end            reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    RBRACE          reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    END             reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSE            reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSIF           reduce using rule 30 (assignmentRule -> ID ASSIGNMENT attribute .)
    GREATERTHAN     reduce using rule 108 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 108 (conditionValue -> attribute .)
    EQUALS          reduce using rule 108 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 108 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 108 (conditionValue -> attribute .)
    PLUS            reduce using rule 93 (operationValue -> attribute .)
    MINUS           reduce using rule 93 (operationValue -> attribute .)
    POWER           reduce using rule 93 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 93 (operationValue -> attribute .)
    DIVISION        reduce using rule 93 (operationValue -> attribute .)


state 76

    (31) assignmentRule -> ID ASSIGNMENT input .

    PRINT           reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    RETURN          reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    PUTS            reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    ID              reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    IF              reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    WHILE           reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    $end            reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    RBRACE          reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    END             reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    ELSE            reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)
    ELSIF           reduce using rule 31 (assignmentRule -> ID ASSIGNMENT input .)


state 77

    (71) creationTDA -> creationStack .

    PRINT           reduce using rule 71 (creationTDA -> creationStack .)
    RETURN          reduce using rule 71 (creationTDA -> creationStack .)
    PUTS            reduce using rule 71 (creationTDA -> creationStack .)
    ID              reduce using rule 71 (creationTDA -> creationStack .)
    IF              reduce using rule 71 (creationTDA -> creationStack .)
    WHILE           reduce using rule 71 (creationTDA -> creationStack .)
    $end            reduce using rule 71 (creationTDA -> creationStack .)
    RBRACE          reduce using rule 71 (creationTDA -> creationStack .)
    END             reduce using rule 71 (creationTDA -> creationStack .)
    ELSE            reduce using rule 71 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 71 (creationTDA -> creationStack .)


state 78

    (72) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 72 (creationTDA -> creationLinkedList .)
    RETURN          reduce using rule 72 (creationTDA -> creationLinkedList .)
    PUTS            reduce using rule 72 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 72 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 72 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 72 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 72 (creationTDA -> creationLinkedList .)
    RBRACE          reduce using rule 72 (creationTDA -> creationLinkedList .)
    END             reduce using rule 72 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 72 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 72 (creationTDA -> creationLinkedList .)


state 79

    (73) creationTDA -> creationHashmap .

    PRINT           reduce using rule 73 (creationTDA -> creationHashmap .)
    RETURN          reduce using rule 73 (creationTDA -> creationHashmap .)
    PUTS            reduce using rule 73 (creationTDA -> creationHashmap .)
    ID              reduce using rule 73 (creationTDA -> creationHashmap .)
    IF              reduce using rule 73 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 73 (creationTDA -> creationHashmap .)
    $end            reduce using rule 73 (creationTDA -> creationHashmap .)
    RBRACE          reduce using rule 73 (creationTDA -> creationHashmap .)
    END             reduce using rule 73 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 73 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 73 (creationTDA -> creationHashmap .)


state 80

    (97) operations -> operation .
    (98) operations -> operation . arithmeticOperator operations
    (99) operations -> operation . arithmeticOperator operationValue
    (85) arithmeticOperator -> . PLUS
    (86) arithmeticOperator -> . MINUS
    (87) arithmeticOperator -> . POWER
    (88) arithmeticOperator -> . MULTIPLICATION
    (89) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 97 (operations -> operation .)
    RETURN          reduce using rule 97 (operations -> operation .)
    PUTS            reduce using rule 97 (operations -> operation .)
    ID              reduce using rule 97 (operations -> operation .)
    IF              reduce using rule 97 (operations -> operation .)
    WHILE           reduce using rule 97 (operations -> operation .)
    $end            reduce using rule 97 (operations -> operation .)
    RBRACE          reduce using rule 97 (operations -> operation .)
    END             reduce using rule 97 (operations -> operation .)
    ELSE            reduce using rule 97 (operations -> operation .)
    ELSIF           reduce using rule 97 (operations -> operation .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    POWER           shift and go to state 121
    MULTIPLICATION  shift and go to state 122
    DIVISION        shift and go to state 123

    arithmeticOperator             shift and go to state 118

state 81

    (100) operations -> operationValue . arithmeticOperator operation
    (95) operation -> operationValue . arithmeticOperator operationValue
    (85) arithmeticOperator -> . PLUS
    (86) arithmeticOperator -> . MINUS
    (87) arithmeticOperator -> . POWER
    (88) arithmeticOperator -> . MULTIPLICATION
    (89) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    POWER           shift and go to state 121
    MULTIPLICATION  shift and go to state 122
    DIVISION        shift and go to state 123

    arithmeticOperator             shift and go to state 124

state 82

    (101) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (102) array -> OPENBRACKET . CLOSEDBRACKET
    (69) creationStack -> OPENBRACKET . CLOSEDBRACKET
    (103) element_list -> . conditionValue
    (104) element_list -> . element_list COMMA conditionValue
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    CLOSEDBRACKET   shift and go to state 126
    ID              shift and go to state 38
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    element_list                   shift and go to state 125
    conditionValue                 shift and go to state 127
    number                         shift and go to state 39
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 83

    (59) input -> GETS . DOT CHOMP DOT TO_F
    (60) input -> GETS . DOT CHOMP DOT TO_I
    (61) input -> GETS . DOT CHOMP

    DOT             shift and go to state 128


state 84

    (68) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 129


state 85

    (70) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 130


state 86

    (74) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 131


state 87

    (96) operation -> LPAREN . operationValue arithmeticOperator operationValue RPAREN
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 133
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    operationValue                 shift and go to state 132
    number                         shift and go to state 134
    attribute                      shift and go to state 135
    indexation                     shift and go to state 136

state 88

    (64) functionCall -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 137


state 89

    (65) functionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 65 (functionCall -> ID LPAREN RPAREN .)


state 90

    (109) arrayConcat -> ID ARRAYAPPEND ID .

    PRINT           reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    RETURN          reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    PUTS            reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    ID              reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    IF              reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    WHILE           reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    $end            reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    RBRACE          reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    END             reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSE            reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSIF           reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND ID .)


state 91

    (110) arrayConcat -> ID ARRAYAPPEND number .

    PRINT           reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    RETURN          reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    PUTS            reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    ID              reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    IF              reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    WHILE           reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    $end            reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    RBRACE          reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    END             reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSE            reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSIF           reduce using rule 110 (arrayConcat -> ID ARRAYAPPEND number .)


state 92

    (64) functionCall -> ID . LPAREN arguments RPAREN
    (65) functionCall -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 24


state 93

    (58) method -> ID DOT functionCall .

    PRINT           reduce using rule 58 (method -> ID DOT functionCall .)
    RETURN          reduce using rule 58 (method -> ID DOT functionCall .)
    PUTS            reduce using rule 58 (method -> ID DOT functionCall .)
    ID              reduce using rule 58 (method -> ID DOT functionCall .)
    IF              reduce using rule 58 (method -> ID DOT functionCall .)
    WHILE           reduce using rule 58 (method -> ID DOT functionCall .)
    $end            reduce using rule 58 (method -> ID DOT functionCall .)
    RBRACE          reduce using rule 58 (method -> ID DOT functionCall .)
    END             reduce using rule 58 (method -> ID DOT functionCall .)
    ELSE            reduce using rule 58 (method -> ID DOT functionCall .)
    ELSIF           reduce using rule 58 (method -> ID DOT functionCall .)


state 94

    (119) unariOperator -> ID ASSIGNDECREMENT number .

    PRINT           reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    RETURN          reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    PUTS            reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    ID              reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    IF              reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    WHILE           reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    $end            reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    RBRACE          reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    END             reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSE            reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSIF           reduce using rule 119 (unariOperator -> ID ASSIGNDECREMENT number .)


state 95

    (120) unariOperator -> ID ASSIGNINCREMENT number .

    PRINT           reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    RETURN          reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    PUTS            reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    ID              reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    IF              reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    WHILE           reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    $end            reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    RBRACE          reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    END             reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSE            reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSIF           reduce using rule 120 (unariOperator -> ID ASSIGNINCREMENT number .)


state 96

    (21) assignmentRule -> ID ASSIGNMENT . number
    (22) assignmentRule -> ID ASSIGNMENT . ID
    (23) assignmentRule -> ID ASSIGNMENT . condition
    (24) assignmentRule -> ID ASSIGNMENT . TRUE
    (25) assignmentRule -> ID ASSIGNMENT . FALSE
    (26) assignmentRule -> ID ASSIGNMENT . creationTDA
    (27) assignmentRule -> ID ASSIGNMENT . operations
    (28) assignmentRule -> ID ASSIGNMENT . array
    (29) assignmentRule -> ID ASSIGNMENT . indexation
    (30) assignmentRule -> ID ASSIGNMENT . attribute
    (31) assignmentRule -> ID ASSIGNMENT . input
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (113) condition -> . conditionValue comparator conditionValue
    (71) creationTDA -> . creationStack
    (72) creationTDA -> . creationLinkedList
    (73) creationTDA -> . creationHashmap
    (97) operations -> . operation
    (98) operations -> . operation arithmeticOperator operations
    (99) operations -> . operation arithmeticOperator operationValue
    (100) operations -> . operationValue arithmeticOperator operation
    (101) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (102) array -> . OPENBRACKET CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID
    (59) input -> . GETS DOT CHOMP DOT TO_F
    (60) input -> . GETS DOT CHOMP DOT TO_I
    (61) input -> . GETS DOT CHOMP
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (68) creationStack -> . STACK DOT NEW
    (69) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (70) creationLinkedList -> . LINKEDLIST DOT NEW
    (74) creationHashmap -> . HASH DOT NEW
    (75) creationHashmap -> . LBRACE pairs RBRACE
    (76) creationHashmap -> . LBRACE RBRACE
    (95) operation -> . operationValue arithmeticOperator operationValue
    (96) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation

    ID              shift and go to state 64
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43
    OPENBRACKET     shift and go to state 82
    GETS            shift and go to state 83
    STACK           shift and go to state 84
    LINKEDLIST      shift and go to state 85
    HASH            shift and go to state 86
    LBRACE          shift and go to state 66
    LPAREN          shift and go to state 87

    number                         shift and go to state 67
    condition                      shift and go to state 68
    creationTDA                    shift and go to state 71
    operations                     shift and go to state 72
    array                          shift and go to state 73
    indexation                     shift and go to state 74
    attribute                      shift and go to state 75
    input                          shift and go to state 76
    conditionValue                 shift and go to state 37
    creationStack                  shift and go to state 77
    creationLinkedList             shift and go to state 78
    creationHashmap                shift and go to state 79
    operation                      shift and go to state 80
    operationValue                 shift and go to state 81

state 97

    (5) lambda_expression -> LAMBDA LBRACE instructionBody . RBRACE

    RBRACE          shift and go to state 138


state 98

    (8) conditional -> IF condition instructionBody . END
    (9) conditional -> IF condition instructionBody . conditionalElsif END
    (10) conditional -> IF condition instructionBody . ELSE instructionBody END
    (11) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (15) conditionalElsif -> . elsif
    (16) conditionalElsif -> . elsif conditionalElsif
    (12) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 139
    ELSE            shift and go to state 141
    ELSIF           shift and go to state 143

    conditionalElsif               shift and go to state 140
    elsif                          shift and go to state 142

state 99

    (113) condition -> conditionValue comparator . conditionValue
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 38
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    conditionValue                 shift and go to state 144
    number                         shift and go to state 39
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 100

    (114) comparator -> GREATERTHAN .

    ID              reduce using rule 114 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 114 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 114 (comparator -> GREATERTHAN .)


state 101

    (115) comparator -> LESSTHAN .

    ID              reduce using rule 115 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 115 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 115 (comparator -> LESSTHAN .)


state 102

    (116) comparator -> EQUALS .

    ID              reduce using rule 116 (comparator -> EQUALS .)
    FLOAT           reduce using rule 116 (comparator -> EQUALS .)
    INTEGER         reduce using rule 116 (comparator -> EQUALS .)


state 103

    (117) comparator -> GREATEROREQUALS .

    ID              reduce using rule 117 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 117 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 117 (comparator -> GREATEROREQUALS .)


state 104

    (118) comparator -> LESSOREQUALS .

    ID              reduce using rule 118 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 118 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 118 (comparator -> LESSOREQUALS .)


state 105

    (111) indexation -> ID OPENBRACKET . element_list CLOSEDBRACKET
    (112) indexation -> ID OPENBRACKET . operation CLOSEDBRACKET
    (103) element_list -> . conditionValue
    (104) element_list -> . element_list COMMA conditionValue
    (95) operation -> . operationValue arithmeticOperator operationValue
    (96) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    LPAREN          shift and go to state 87
    ID              shift and go to state 145
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    element_list                   shift and go to state 146
    operation                      shift and go to state 147
    conditionValue                 shift and go to state 127
    operationValue                 shift and go to state 148
    number                         shift and go to state 149
    indexation                     shift and go to state 150
    attribute                      shift and go to state 151

state 106

    (90) attribute -> ID DOT . ID

    ID              shift and go to state 152


state 107

    (18) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 153


state 108

    (58) method -> ID DOT . functionCall
    (90) attribute -> ID DOT . ID
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 154

    functionCall                   shift and go to state 93

state 109

    (57) arguments -> argument COMMA . arguments
    (56) arguments -> . argument
    (57) arguments -> . argument COMMA arguments
    (51) argument -> . ID
    (52) argument -> . number
    (53) argument -> . attribute
    (54) argument -> . indexation
    (55) argument -> . STRING
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 57
    STRING          shift and go to state 61
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    argument                       shift and go to state 56
    arguments                      shift and go to state 155
    number                         shift and go to state 58
    attribute                      shift and go to state 59
    indexation                     shift and go to state 60

state 110

    (62) parameters -> ID .
    (63) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 62 (parameters -> ID .)
    COMMA           shift and go to state 156


state 111

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 157


state 112

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 158


state 113

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE . instructionBody RBRACE
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 159
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 114

    (75) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 160


state 115

    (76) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    RETURN          reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    PUTS            reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    RBRACE          reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 76 (creationHashmap -> LBRACE RBRACE .)


state 116

    (78) pairs -> pair .
    (79) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 78 (pairs -> pair .)
    COMMA           shift and go to state 161


state 117

    (77) pair -> STRING . COLON value

    COLON           shift and go to state 162


state 118

    (98) operations -> operation arithmeticOperator . operations
    (99) operations -> operation arithmeticOperator . operationValue
    (97) operations -> . operation
    (98) operations -> . operation arithmeticOperator operations
    (99) operations -> . operation arithmeticOperator operationValue
    (100) operations -> . operationValue arithmeticOperator operation
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation
    (95) operation -> . operationValue arithmeticOperator operationValue
    (96) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 133
    LPAREN          shift and go to state 87
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    operation                      shift and go to state 80
    operations                     shift and go to state 163
    operationValue                 shift and go to state 164
    number                         shift and go to state 134
    attribute                      shift and go to state 135
    indexation                     shift and go to state 136

state 119

    (85) arithmeticOperator -> PLUS .

    ID              reduce using rule 85 (arithmeticOperator -> PLUS .)
    LPAREN          reduce using rule 85 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 85 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 85 (arithmeticOperator -> PLUS .)


state 120

    (86) arithmeticOperator -> MINUS .

    ID              reduce using rule 86 (arithmeticOperator -> MINUS .)
    LPAREN          reduce using rule 86 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 86 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 86 (arithmeticOperator -> MINUS .)


state 121

    (87) arithmeticOperator -> POWER .

    ID              reduce using rule 87 (arithmeticOperator -> POWER .)
    LPAREN          reduce using rule 87 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 87 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 87 (arithmeticOperator -> POWER .)


state 122

    (88) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 88 (arithmeticOperator -> MULTIPLICATION .)
    LPAREN          reduce using rule 88 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 88 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 88 (arithmeticOperator -> MULTIPLICATION .)


state 123

    (89) arithmeticOperator -> DIVISION .

    ID              reduce using rule 89 (arithmeticOperator -> DIVISION .)
    LPAREN          reduce using rule 89 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 89 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 89 (arithmeticOperator -> DIVISION .)


state 124

    (100) operations -> operationValue arithmeticOperator . operation
    (95) operation -> operationValue arithmeticOperator . operationValue
    (95) operation -> . operationValue arithmeticOperator operationValue
    (96) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    LPAREN          shift and go to state 87
    ID              shift and go to state 133
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    operationValue                 shift and go to state 165
    operation                      shift and go to state 166
    number                         shift and go to state 134
    attribute                      shift and go to state 135
    indexation                     shift and go to state 136

state 125

    (101) array -> OPENBRACKET element_list . CLOSEDBRACKET
    (104) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 167
    COMMA           shift and go to state 168


state 126

    (102) array -> OPENBRACKET CLOSEDBRACKET .
    (69) creationStack -> OPENBRACKET CLOSEDBRACKET .

  ! reduce/reduce conflict for PRINT resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for $end resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSIF resolved using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PRINT           reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RETURN          reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PUTS            reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RBRACE          reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 69 (creationStack -> OPENBRACKET CLOSEDBRACKET .)

  ! PRINT           [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RETURN          [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! PUTS            [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ID              [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! IF              [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! WHILE           [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! $end            [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RBRACE          [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! END             [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSE            [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSIF           [ reduce using rule 102 (array -> OPENBRACKET CLOSEDBRACKET .) ]


state 127

    (103) element_list -> conditionValue .

    CLOSEDBRACKET   reduce using rule 103 (element_list -> conditionValue .)
    COMMA           reduce using rule 103 (element_list -> conditionValue .)


state 128

    (59) input -> GETS DOT . CHOMP DOT TO_F
    (60) input -> GETS DOT . CHOMP DOT TO_I
    (61) input -> GETS DOT . CHOMP

    CHOMP           shift and go to state 169


state 129

    (68) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 170


state 130

    (70) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 171


state 131

    (74) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 172


state 132

    (96) operation -> LPAREN operationValue . arithmeticOperator operationValue RPAREN
    (85) arithmeticOperator -> . PLUS
    (86) arithmeticOperator -> . MINUS
    (87) arithmeticOperator -> . POWER
    (88) arithmeticOperator -> . MULTIPLICATION
    (89) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    POWER           shift and go to state 121
    MULTIPLICATION  shift and go to state 122
    DIVISION        shift and go to state 123

    arithmeticOperator             shift and go to state 173

state 133

    (91) operationValue -> ID .
    (90) attribute -> ID . DOT ID
    (111) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    PLUS            reduce using rule 91 (operationValue -> ID .)
    MINUS           reduce using rule 91 (operationValue -> ID .)
    POWER           reduce using rule 91 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> ID .)
    DIVISION        reduce using rule 91 (operationValue -> ID .)
    PRINT           reduce using rule 91 (operationValue -> ID .)
    RETURN          reduce using rule 91 (operationValue -> ID .)
    PUTS            reduce using rule 91 (operationValue -> ID .)
    ID              reduce using rule 91 (operationValue -> ID .)
    IF              reduce using rule 91 (operationValue -> ID .)
    WHILE           reduce using rule 91 (operationValue -> ID .)
    $end            reduce using rule 91 (operationValue -> ID .)
    RBRACE          reduce using rule 91 (operationValue -> ID .)
    END             reduce using rule 91 (operationValue -> ID .)
    ELSE            reduce using rule 91 (operationValue -> ID .)
    ELSIF           reduce using rule 91 (operationValue -> ID .)
    RPAREN          reduce using rule 91 (operationValue -> ID .)
    CLOSEDBRACKET   reduce using rule 91 (operationValue -> ID .)
    DOT             shift and go to state 106
    OPENBRACKET     shift and go to state 105


state 134

    (92) operationValue -> number .

    PLUS            reduce using rule 92 (operationValue -> number .)
    MINUS           reduce using rule 92 (operationValue -> number .)
    POWER           reduce using rule 92 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> number .)
    DIVISION        reduce using rule 92 (operationValue -> number .)
    PRINT           reduce using rule 92 (operationValue -> number .)
    RETURN          reduce using rule 92 (operationValue -> number .)
    PUTS            reduce using rule 92 (operationValue -> number .)
    ID              reduce using rule 92 (operationValue -> number .)
    IF              reduce using rule 92 (operationValue -> number .)
    WHILE           reduce using rule 92 (operationValue -> number .)
    $end            reduce using rule 92 (operationValue -> number .)
    RBRACE          reduce using rule 92 (operationValue -> number .)
    END             reduce using rule 92 (operationValue -> number .)
    ELSE            reduce using rule 92 (operationValue -> number .)
    ELSIF           reduce using rule 92 (operationValue -> number .)
    RPAREN          reduce using rule 92 (operationValue -> number .)
    CLOSEDBRACKET   reduce using rule 92 (operationValue -> number .)


state 135

    (93) operationValue -> attribute .

    PLUS            reduce using rule 93 (operationValue -> attribute .)
    MINUS           reduce using rule 93 (operationValue -> attribute .)
    POWER           reduce using rule 93 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 93 (operationValue -> attribute .)
    DIVISION        reduce using rule 93 (operationValue -> attribute .)
    PRINT           reduce using rule 93 (operationValue -> attribute .)
    RETURN          reduce using rule 93 (operationValue -> attribute .)
    PUTS            reduce using rule 93 (operationValue -> attribute .)
    ID              reduce using rule 93 (operationValue -> attribute .)
    IF              reduce using rule 93 (operationValue -> attribute .)
    WHILE           reduce using rule 93 (operationValue -> attribute .)
    $end            reduce using rule 93 (operationValue -> attribute .)
    RBRACE          reduce using rule 93 (operationValue -> attribute .)
    END             reduce using rule 93 (operationValue -> attribute .)
    ELSE            reduce using rule 93 (operationValue -> attribute .)
    ELSIF           reduce using rule 93 (operationValue -> attribute .)
    RPAREN          reduce using rule 93 (operationValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 93 (operationValue -> attribute .)


state 136

    (94) operationValue -> indexation .

    PLUS            reduce using rule 94 (operationValue -> indexation .)
    MINUS           reduce using rule 94 (operationValue -> indexation .)
    POWER           reduce using rule 94 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 94 (operationValue -> indexation .)
    DIVISION        reduce using rule 94 (operationValue -> indexation .)
    PRINT           reduce using rule 94 (operationValue -> indexation .)
    RETURN          reduce using rule 94 (operationValue -> indexation .)
    PUTS            reduce using rule 94 (operationValue -> indexation .)
    ID              reduce using rule 94 (operationValue -> indexation .)
    IF              reduce using rule 94 (operationValue -> indexation .)
    WHILE           reduce using rule 94 (operationValue -> indexation .)
    $end            reduce using rule 94 (operationValue -> indexation .)
    RBRACE          reduce using rule 94 (operationValue -> indexation .)
    END             reduce using rule 94 (operationValue -> indexation .)
    ELSE            reduce using rule 94 (operationValue -> indexation .)
    ELSIF           reduce using rule 94 (operationValue -> indexation .)
    RPAREN          reduce using rule 94 (operationValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 94 (operationValue -> indexation .)


state 137

    (64) functionCall -> ID LPAREN arguments RPAREN .

    PRINT           reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    PUTS            reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    ID              reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    IF              reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    END             reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSE            reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSIF           reduce using rule 64 (functionCall -> ID LPAREN arguments RPAREN .)


state 138

    (5) lambda_expression -> LAMBDA LBRACE instructionBody RBRACE .

    $end            reduce using rule 5 (lambda_expression -> LAMBDA LBRACE instructionBody RBRACE .)


state 139

    (8) conditional -> IF condition instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody END .)
    RETURN          reduce using rule 8 (conditional -> IF condition instructionBody END .)
    PUTS            reduce using rule 8 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody END .)
    RBRACE          reduce using rule 8 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody END .)


state 140

    (9) conditional -> IF condition instructionBody conditionalElsif . END
    (11) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 174
    ELSE            shift and go to state 175


state 141

    (10) conditional -> IF condition instructionBody ELSE . instructionBody END
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 176
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 142

    (15) conditionalElsif -> elsif .
    (16) conditionalElsif -> elsif . conditionalElsif
    (15) conditionalElsif -> . elsif
    (16) conditionalElsif -> . elsif conditionalElsif
    (12) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 15 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 15 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 143

    elsif                          shift and go to state 142
    conditionalElsif               shift and go to state 177

state 143

    (12) elsif -> ELSIF . condition instructionBody
    (113) condition -> . conditionValue comparator conditionValue
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 38
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    condition                      shift and go to state 178
    conditionValue                 shift and go to state 37
    number                         shift and go to state 39
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 144

    (113) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    RETURN          reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    PUTS            reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    RBRACE          reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 113 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 113 (condition -> conditionValue comparator conditionValue .)


state 145

    (105) conditionValue -> ID .
    (91) operationValue -> ID .
    (111) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> ID . DOT ID

    CLOSEDBRACKET   reduce using rule 105 (conditionValue -> ID .)
    COMMA           reduce using rule 105 (conditionValue -> ID .)
    PLUS            reduce using rule 91 (operationValue -> ID .)
    MINUS           reduce using rule 91 (operationValue -> ID .)
    POWER           reduce using rule 91 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> ID .)
    DIVISION        reduce using rule 91 (operationValue -> ID .)
    OPENBRACKET     shift and go to state 105
    DOT             shift and go to state 106


state 146

    (111) indexation -> ID OPENBRACKET element_list . CLOSEDBRACKET
    (104) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 179
    COMMA           shift and go to state 168


state 147

    (112) indexation -> ID OPENBRACKET operation . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 180


state 148

    (95) operation -> operationValue . arithmeticOperator operationValue
    (85) arithmeticOperator -> . PLUS
    (86) arithmeticOperator -> . MINUS
    (87) arithmeticOperator -> . POWER
    (88) arithmeticOperator -> . MULTIPLICATION
    (89) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    POWER           shift and go to state 121
    MULTIPLICATION  shift and go to state 122
    DIVISION        shift and go to state 123

    arithmeticOperator             shift and go to state 181

state 149

    (106) conditionValue -> number .
    (92) operationValue -> number .

    CLOSEDBRACKET   reduce using rule 106 (conditionValue -> number .)
    COMMA           reduce using rule 106 (conditionValue -> number .)
    PLUS            reduce using rule 92 (operationValue -> number .)
    MINUS           reduce using rule 92 (operationValue -> number .)
    POWER           reduce using rule 92 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> number .)
    DIVISION        reduce using rule 92 (operationValue -> number .)


state 150

    (107) conditionValue -> indexation .
    (94) operationValue -> indexation .

    CLOSEDBRACKET   reduce using rule 107 (conditionValue -> indexation .)
    COMMA           reduce using rule 107 (conditionValue -> indexation .)
    PLUS            reduce using rule 94 (operationValue -> indexation .)
    MINUS           reduce using rule 94 (operationValue -> indexation .)
    POWER           reduce using rule 94 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 94 (operationValue -> indexation .)
    DIVISION        reduce using rule 94 (operationValue -> indexation .)


state 151

    (108) conditionValue -> attribute .
    (93) operationValue -> attribute .

    CLOSEDBRACKET   reduce using rule 108 (conditionValue -> attribute .)
    COMMA           reduce using rule 108 (conditionValue -> attribute .)
    PLUS            reduce using rule 93 (operationValue -> attribute .)
    MINUS           reduce using rule 93 (operationValue -> attribute .)
    POWER           reduce using rule 93 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 93 (operationValue -> attribute .)
    DIVISION        reduce using rule 93 (operationValue -> attribute .)


state 152

    (90) attribute -> ID DOT ID .

    GREATERTHAN     reduce using rule 90 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 90 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 90 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 90 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 90 (attribute -> ID DOT ID .)
    COMMA           reduce using rule 90 (attribute -> ID DOT ID .)
    PRINT           reduce using rule 90 (attribute -> ID DOT ID .)
    RETURN          reduce using rule 90 (attribute -> ID DOT ID .)
    PUTS            reduce using rule 90 (attribute -> ID DOT ID .)
    ID              reduce using rule 90 (attribute -> ID DOT ID .)
    IF              reduce using rule 90 (attribute -> ID DOT ID .)
    WHILE           reduce using rule 90 (attribute -> ID DOT ID .)
    $end            reduce using rule 90 (attribute -> ID DOT ID .)
    RBRACE          reduce using rule 90 (attribute -> ID DOT ID .)
    END             reduce using rule 90 (attribute -> ID DOT ID .)
    ELSE            reduce using rule 90 (attribute -> ID DOT ID .)
    ELSIF           reduce using rule 90 (attribute -> ID DOT ID .)
    PLUS            reduce using rule 90 (attribute -> ID DOT ID .)
    MINUS           reduce using rule 90 (attribute -> ID DOT ID .)
    POWER           reduce using rule 90 (attribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 90 (attribute -> ID DOT ID .)
    DIVISION        reduce using rule 90 (attribute -> ID DOT ID .)
    RPAREN          reduce using rule 90 (attribute -> ID DOT ID .)
    CLOSEDBRACKET   reduce using rule 90 (attribute -> ID DOT ID .)


state 153

    (18) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    RETURN          reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    PUTS            reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    RBRACE          reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 18 (whileLoop -> WHILE condition instructionBody END .)


state 154

    (90) attribute -> ID DOT ID .
    (64) functionCall -> ID . LPAREN arguments RPAREN
    (65) functionCall -> ID . LPAREN RPAREN

    GREATERTHAN     reduce using rule 90 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 90 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 90 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 90 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 90 (attribute -> ID DOT ID .)
    LPAREN          shift and go to state 24


state 155

    (57) arguments -> argument COMMA arguments .

    PRINT           reduce using rule 57 (arguments -> argument COMMA arguments .)
    RETURN          reduce using rule 57 (arguments -> argument COMMA arguments .)
    PUTS            reduce using rule 57 (arguments -> argument COMMA arguments .)
    ID              reduce using rule 57 (arguments -> argument COMMA arguments .)
    IF              reduce using rule 57 (arguments -> argument COMMA arguments .)
    WHILE           reduce using rule 57 (arguments -> argument COMMA arguments .)
    $end            reduce using rule 57 (arguments -> argument COMMA arguments .)
    RBRACE          reduce using rule 57 (arguments -> argument COMMA arguments .)
    END             reduce using rule 57 (arguments -> argument COMMA arguments .)
    ELSE            reduce using rule 57 (arguments -> argument COMMA arguments .)
    ELSIF           reduce using rule 57 (arguments -> argument COMMA arguments .)
    RPAREN          reduce using rule 57 (arguments -> argument COMMA arguments .)


state 156

    (63) parameters -> ID COMMA . parameters
    (62) parameters -> . ID
    (63) parameters -> . ID COMMA parameters

    ID              shift and go to state 110

    parameters                     shift and go to state 182

state 157

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 183
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 158

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 159

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody . RBRACE

    RBRACE          shift and go to state 184


state 160

    (75) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    RETURN          reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    PUTS            reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 75 (creationHashmap -> LBRACE pairs RBRACE .)


state 161

    (79) pairs -> pair COMMA . pairs
    (78) pairs -> . pair
    (79) pairs -> . pair COMMA pairs
    (77) pair -> . STRING COLON value

    STRING          shift and go to state 117

    pair                           shift and go to state 116
    pairs                          shift and go to state 185

state 162

    (77) pair -> STRING COLON . value
    (80) value -> . ID
    (81) value -> . STRING
    (82) value -> . number
    (83) value -> . LBRACE pairs RBRACE
    (84) value -> . LBRACE RBRACE
    (121) number -> . FLOAT
    (122) number -> . INTEGER

    ID              shift and go to state 188
    STRING          shift and go to state 186
    LBRACE          shift and go to state 190
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    value                          shift and go to state 187
    number                         shift and go to state 189

state 163

    (98) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    RETURN          reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    PUTS            reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    RBRACE          reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 98 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 98 (operations -> operation arithmeticOperator operations .)


state 164

    (99) operations -> operation arithmeticOperator operationValue .
    (100) operations -> operationValue . arithmeticOperator operation
    (95) operation -> operationValue . arithmeticOperator operationValue
    (85) arithmeticOperator -> . PLUS
    (86) arithmeticOperator -> . MINUS
    (87) arithmeticOperator -> . POWER
    (88) arithmeticOperator -> . MULTIPLICATION
    (89) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    RETURN          reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    PUTS            reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    ID              reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    IF              reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    WHILE           reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    $end            reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    RBRACE          reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    END             reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    ELSE            reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    ELSIF           reduce using rule 99 (operations -> operation arithmeticOperator operationValue .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    POWER           shift and go to state 121
    MULTIPLICATION  shift and go to state 122
    DIVISION        shift and go to state 123

    arithmeticOperator             shift and go to state 124

state 165

    (95) operation -> operationValue arithmeticOperator operationValue .
    (95) operation -> operationValue . arithmeticOperator operationValue
    (85) arithmeticOperator -> . PLUS
    (86) arithmeticOperator -> . MINUS
    (87) arithmeticOperator -> . POWER
    (88) arithmeticOperator -> . MULTIPLICATION
    (89) arithmeticOperator -> . DIVISION

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    PRINT           reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    RBRACE          reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    POWER           shift and go to state 121
    MULTIPLICATION  shift and go to state 122
    DIVISION        shift and go to state 123

  ! PLUS            [ reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MINUS           [ reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! POWER           [ reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MULTIPLICATION  [ reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! DIVISION        [ reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .) ]

    arithmeticOperator             shift and go to state 181

state 166

    (100) operations -> operationValue arithmeticOperator operation .

    PRINT           reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    RETURN          reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    PUTS            reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    ID              reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    IF              reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    WHILE           reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    $end            reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    RBRACE          reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    END             reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    ELSE            reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)
    ELSIF           reduce using rule 100 (operations -> operationValue arithmeticOperator operation .)


state 167

    (101) array -> OPENBRACKET element_list CLOSEDBRACKET .

    PRINT           reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RBRACE          reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 101 (array -> OPENBRACKET element_list CLOSEDBRACKET .)


state 168

    (104) element_list -> element_list COMMA . conditionValue
    (105) conditionValue -> . ID
    (106) conditionValue -> . number
    (107) conditionValue -> . indexation
    (108) conditionValue -> . attribute
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (90) attribute -> . ID DOT ID

    ID              shift and go to state 38
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    conditionValue                 shift and go to state 191
    number                         shift and go to state 39
    indexation                     shift and go to state 40
    attribute                      shift and go to state 41

state 169

    (59) input -> GETS DOT CHOMP . DOT TO_F
    (60) input -> GETS DOT CHOMP . DOT TO_I
    (61) input -> GETS DOT CHOMP .

    DOT             shift and go to state 192
    PRINT           reduce using rule 61 (input -> GETS DOT CHOMP .)
    RETURN          reduce using rule 61 (input -> GETS DOT CHOMP .)
    PUTS            reduce using rule 61 (input -> GETS DOT CHOMP .)
    ID              reduce using rule 61 (input -> GETS DOT CHOMP .)
    IF              reduce using rule 61 (input -> GETS DOT CHOMP .)
    WHILE           reduce using rule 61 (input -> GETS DOT CHOMP .)
    $end            reduce using rule 61 (input -> GETS DOT CHOMP .)
    RBRACE          reduce using rule 61 (input -> GETS DOT CHOMP .)
    END             reduce using rule 61 (input -> GETS DOT CHOMP .)
    ELSE            reduce using rule 61 (input -> GETS DOT CHOMP .)
    ELSIF           reduce using rule 61 (input -> GETS DOT CHOMP .)


state 170

    (68) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 68 (creationStack -> STACK DOT NEW .)
    RETURN          reduce using rule 68 (creationStack -> STACK DOT NEW .)
    PUTS            reduce using rule 68 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 68 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 68 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 68 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 68 (creationStack -> STACK DOT NEW .)
    RBRACE          reduce using rule 68 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 68 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 68 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 68 (creationStack -> STACK DOT NEW .)


state 171

    (70) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RETURN          reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    PUTS            reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RBRACE          reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 70 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 172

    (74) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    RETURN          reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    PUTS            reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    RBRACE          reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 74 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 74 (creationHashmap -> HASH DOT NEW .)


state 173

    (96) operation -> LPAREN operationValue arithmeticOperator . operationValue RPAREN
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 133
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    operationValue                 shift and go to state 193
    number                         shift and go to state 134
    attribute                      shift and go to state 135
    indexation                     shift and go to state 136

state 174

    (9) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    RETURN          reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    PUTS            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    RBRACE          reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)


state 175

    (11) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 194
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 176

    (10) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 195


state 177

    (16) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 16 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 16 (conditionalElsif -> elsif conditionalElsif .)


state 178

    (12) elsif -> ELSIF condition . instructionBody
    (42) instructionBody -> . bodyLine
    (43) instructionBody -> . bodyLine instructionBody
    (32) bodyLine -> . assignmentRule
    (33) bodyLine -> . PRINT printBody
    (34) bodyLine -> . nestedConditional
    (35) bodyLine -> . nestedWhile
    (36) bodyLine -> . functionCall
    (37) bodyLine -> . arrayConcat
    (38) bodyLine -> . RETURN arguments
    (39) bodyLine -> . PUTS printBody
    (40) bodyLine -> . method
    (41) bodyLine -> . unariOperator
    (21) assignmentRule -> . ID ASSIGNMENT number
    (22) assignmentRule -> . ID ASSIGNMENT ID
    (23) assignmentRule -> . ID ASSIGNMENT condition
    (24) assignmentRule -> . ID ASSIGNMENT TRUE
    (25) assignmentRule -> . ID ASSIGNMENT FALSE
    (26) assignmentRule -> . ID ASSIGNMENT creationTDA
    (27) assignmentRule -> . ID ASSIGNMENT operations
    (28) assignmentRule -> . ID ASSIGNMENT array
    (29) assignmentRule -> . ID ASSIGNMENT indexation
    (30) assignmentRule -> . ID ASSIGNMENT attribute
    (31) assignmentRule -> . ID ASSIGNMENT input
    (13) nestedConditional -> . conditional
    (14) nestedConditional -> . conditional nestedConditional
    (19) nestedWhile -> . whileLoop
    (20) nestedWhile -> . whileLoop nestedWhile
    (64) functionCall -> . ID LPAREN arguments RPAREN
    (65) functionCall -> . ID LPAREN RPAREN
    (109) arrayConcat -> . ID ARRAYAPPEND ID
    (110) arrayConcat -> . ID ARRAYAPPEND number
    (58) method -> . ID DOT functionCall
    (119) unariOperator -> . ID ASSIGNDECREMENT number
    (120) unariOperator -> . ID ASSIGNINCREMENT number
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (18) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 13
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 34
    IF              shift and go to state 10
    WHILE           shift and go to state 11

    instructionBody                shift and go to state 196
    bodyLine                       shift and go to state 8
    assignmentRule                 shift and go to state 12
    nestedConditional              shift and go to state 14
    nestedWhile                    shift and go to state 15
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    conditional                    shift and go to state 29
    whileLoop                      shift and go to state 31

state 179

    (111) indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    EQUALS          reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    COMMA           reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PRINT           reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RBRACE          reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PLUS            reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MINUS           reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    POWER           reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    DIVISION        reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RPAREN          reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 111 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)


state 180

    (112) indexation -> ID OPENBRACKET operation CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    EQUALS          reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    COMMA           reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PRINT           reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RETURN          reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PUTS            reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ID              reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    IF              reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    WHILE           reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    $end            reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RBRACE          reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    END             reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSE            reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSIF           reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PLUS            reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MINUS           reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    POWER           reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    DIVISION        reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RPAREN          reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 112 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)


state 181

    (95) operation -> operationValue arithmeticOperator . operationValue
    (91) operationValue -> . ID
    (92) operationValue -> . number
    (93) operationValue -> . attribute
    (94) operationValue -> . indexation
    (121) number -> . FLOAT
    (122) number -> . INTEGER
    (90) attribute -> . ID DOT ID
    (111) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (112) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 133
    FLOAT           shift and go to state 42
    INTEGER         shift and go to state 43

    operationValue                 shift and go to state 197
    number                         shift and go to state 134
    attribute                      shift and go to state 135
    indexation                     shift and go to state 136

state 182

    (63) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 63 (parameters -> ID COMMA parameters .)


state 183

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 198


state 184

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE .

    $end            reduce using rule 6 (lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE .)


state 185

    (79) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 79 (pairs -> pair COMMA pairs .)


state 186

    (81) value -> STRING .

    COMMA           reduce using rule 81 (value -> STRING .)
    RBRACE          reduce using rule 81 (value -> STRING .)


state 187

    (77) pair -> STRING COLON value .

    COMMA           reduce using rule 77 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 77 (pair -> STRING COLON value .)


state 188

    (80) value -> ID .

    COMMA           reduce using rule 80 (value -> ID .)
    RBRACE          reduce using rule 80 (value -> ID .)


state 189

    (82) value -> number .

    COMMA           reduce using rule 82 (value -> number .)
    RBRACE          reduce using rule 82 (value -> number .)


state 190

    (83) value -> LBRACE . pairs RBRACE
    (84) value -> LBRACE . RBRACE
    (78) pairs -> . pair
    (79) pairs -> . pair COMMA pairs
    (77) pair -> . STRING COLON value

    RBRACE          shift and go to state 200
    STRING          shift and go to state 117

    pairs                          shift and go to state 199
    pair                           shift and go to state 116

state 191

    (104) element_list -> element_list COMMA conditionValue .

    CLOSEDBRACKET   reduce using rule 104 (element_list -> element_list COMMA conditionValue .)
    COMMA           reduce using rule 104 (element_list -> element_list COMMA conditionValue .)


state 192

    (59) input -> GETS DOT CHOMP DOT . TO_F
    (60) input -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 201
    TO_I            shift and go to state 202


state 193

    (96) operation -> LPAREN operationValue arithmeticOperator operationValue . RPAREN

    RPAREN          shift and go to state 203


state 194

    (11) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 204


state 195

    (10) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RETURN          reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PUTS            reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RBRACE          reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 196

    (12) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 12 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 12 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 12 (elsif -> ELSIF condition instructionBody .)


state 197

    (95) operation -> operationValue arithmeticOperator operationValue .

    CLOSEDBRACKET   reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    RBRACE          reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 95 (operation -> operationValue arithmeticOperator operationValue .)


state 198

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 199

    (83) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 205


state 200

    (84) value -> LBRACE RBRACE .

    COMMA           reduce using rule 84 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 84 (value -> LBRACE RBRACE .)


state 201

    (59) input -> GETS DOT CHOMP DOT TO_F .

    PRINT           reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    RETURN          reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    PUTS            reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    ID              reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    IF              reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    WHILE           reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    $end            reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    RBRACE          reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSIF           reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_F .)


state 202

    (60) input -> GETS DOT CHOMP DOT TO_I .

    PRINT           reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    RETURN          reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    PUTS            reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    ID              reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    IF              reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    WHILE           reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    $end            reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    RBRACE          reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSIF           reduce using rule 60 (input -> GETS DOT CHOMP DOT TO_I .)


state 203

    (96) operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .

    PLUS            reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MINUS           reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    POWER           reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MULTIPLICATION  reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    DIVISION        reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PRINT           reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RETURN          reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PUTS            reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ID              reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    IF              reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    WHILE           reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    $end            reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RBRACE          reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    END             reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSE            reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSIF           reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    CLOSEDBRACKET   reduce using rule 96 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)


state 204

    (11) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RETURN          reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PUTS            reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RBRACE          reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 205

    (83) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 83 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 83 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 6 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for IF in state 29 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for POWER in state 165 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 165 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 165 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 7
WARNING: reduce/reduce conflict in state 126 resolved using rule (creationStack -> OPENBRACKET CLOSEDBRACKET)
WARNING: rejected rule (array -> OPENBRACKET CLOSEDBRACKET) in state 126
WARNING: Rule (array -> OPENBRACKET CLOSEDBRACKET) is never reduced
