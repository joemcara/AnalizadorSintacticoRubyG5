Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    FOR
    GETS
    IN
    PUTS
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    assignmentRule -> ID ASSIGNMENT operations
Rule 25    bodyLine -> assignmentRule
Rule 26    bodyLine -> PRINT printBody
Rule 27    bodyLine -> nestedConditional
Rule 28    bodyLine -> nestedWhile
Rule 29    bodyLine -> funcionCall
Rule 30    instructionBody -> bodyLine
Rule 31    instructionBody -> bodyLine instructionBody
Rule 32    printBody -> ID
Rule 33    printBody -> TRUE
Rule 34    printBody -> FALSE
Rule 35    printBody -> dataType
Rule 36    printBody -> condition
Rule 37    parameters -> ID
Rule 38    parameters -> ID COMMA parameters
Rule 39    funcionCall -> ID LPAREN parameters RPAREN
Rule 40    funcionCall -> ID LPAREN RPAREN
Rule 41    creationStack -> STACK DOT NEW
Rule 42    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 43    creationNode -> NODE DOT NEW LPAREN RPAREN
Rule 44    creationNode -> NODE DOT NEW LPAREN ID RPAREN
Rule 45    creationLinkedList -> LINKEDLIST DOT NEW
Rule 46    creationTDA -> creationStack
Rule 47    creationTDA -> creationLinkedList
Rule 48    creationTDA -> creationHashmap
Rule 49    creationHashmap -> HASH DOT NEW
Rule 50    creationHashmap -> LBRACE pairs RBRACE
Rule 51    creationHashmap -> LBRACE RBRACE
Rule 52    pair -> STRING COLON value
Rule 53    pairs -> pair
Rule 54    pairs -> pair COMMA pairs
Rule 55    value -> ID
Rule 56    value -> STRING
Rule 57    value -> number
Rule 58    value -> LBRACE pairs RBRACE
Rule 59    value -> LBRACE RBRACE
Rule 60    arithmeticOperator -> PLUS
Rule 61    arithmeticOperator -> MINUS
Rule 62    arithmeticOperator -> POWER
Rule 63    arithmeticOperator -> MULTIPLICATION
Rule 64    arithmeticOperator -> DIVISION
Rule 65    operation -> number arithmeticOperator number
Rule 66    operations -> operation
Rule 67    operations -> operation arithmeticOperator number
Rule 68    conditionValue -> ID
Rule 69    conditionValue -> number
Rule 70    condition -> conditionValue comparator conditionValue
Rule 71    comparator -> GREATERTHAN
Rule 72    comparator -> LESSTHAN
Rule 73    comparator -> EQUALS
Rule 74    comparator -> GREATEROREQUALS
Rule 75    comparator -> LESSOREQUALS
Rule 76    number -> FLOAT
Rule 77    number -> INTEGER
Rule 78    dataType -> STRING
Rule 79    dataType -> number

Terminals, with rules where they appear

AND                  : 
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22 23 24
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 42
COLON                : 52
COMMA                : 38 54
DEF                  : 2 3
DIVISION             : 64
DOT                  : 41 43 44 45 49
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 73
FALSE                : 22 34
FLOAT                : 76
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 74
GREATERTHAN          : 71
HASH                 : 49
ID                   : 2 3 18 19 19 20 21 22 23 24 32 37 38 39 40 44 55 68
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 77
LBRACE               : 50 51 58 59
LESSOREQUALS         : 75
LESSTHAN             : 72
LINKEDLIST           : 45
LPAREN               : 2 3 39 40 43 44
MINUS                : 61
MULTIPLICATION       : 63
NEW                  : 41 43 44 45 49
NODE                 : 43 44
OPENBRACKET          : 42
PLUS                 : 60
POWER                : 62
PRINT                : 26
PUTS                 : 
RBRACE               : 50 51 58 59
RPAREN               : 2 3 39 40 43 44
STACK                : 41
STRING               : 52 56 78
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 33
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

arithmeticOperator   : 65 67
assignmentRule       : 25
bodyLine             : 30 31
comparator           : 70
condition            : 5 6 7 8 9 15 20 36
conditionValue       : 70 70
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationHashmap      : 48
creationLinkedList   : 47
creationNode         : 
creationStack        : 46
creationTDA          : 23
dataType             : 35
elsif                : 12 13
funcionCall          : 29
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 31
nestedConditional    : 11 27
nestedWhile          : 17 28
number               : 18 57 65 65 67 69 79
operation            : 66 67
operations           : 24
pair                 : 53 54
pairs                : 50 54 58
parameters           : 2 38 39
printBody            : 26
value                : 52
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 15


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (24) assignmentRule -> ID . ASSIGNMENT operations
    (39) funcionCall -> ID . LPAREN parameters RPAREN
    (40) funcionCall -> ID . LPAREN RPAREN

    ASSIGNMENT      shift and go to state 16
    LPAREN          shift and go to state 17


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 7

    (30) instructionBody -> bodyLine .
    (31) instructionBody -> bodyLine . instructionBody
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 30 (instructionBody -> bodyLine .)
    END             reduce using rule 30 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 30 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 30 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 22
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (70) condition -> . conditionValue comparator conditionValue
    (68) conditionValue -> . ID
    (69) conditionValue -> . number
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 23
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (70) condition -> . conditionValue comparator conditionValue
    (68) conditionValue -> . ID
    (69) conditionValue -> . number
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 29
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 10

    (25) bodyLine -> assignmentRule .

    PRINT           reduce using rule 25 (bodyLine -> assignmentRule .)
    ID              reduce using rule 25 (bodyLine -> assignmentRule .)
    IF              reduce using rule 25 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 25 (bodyLine -> assignmentRule .)
    $end            reduce using rule 25 (bodyLine -> assignmentRule .)
    END             reduce using rule 25 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 25 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 25 (bodyLine -> assignmentRule .)


state 11

    (26) bodyLine -> PRINT . printBody
    (32) printBody -> . ID
    (33) printBody -> . TRUE
    (34) printBody -> . FALSE
    (35) printBody -> . dataType
    (36) printBody -> . condition
    (78) dataType -> . STRING
    (79) dataType -> . number
    (70) condition -> . conditionValue comparator conditionValue
    (76) number -> . FLOAT
    (77) number -> . INTEGER
    (68) conditionValue -> . ID
    (69) conditionValue -> . number

    ID              shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    STRING          shift and go to state 36
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    printBody                      shift and go to state 30
    dataType                       shift and go to state 34
    condition                      shift and go to state 35
    number                         shift and go to state 37
    conditionValue                 shift and go to state 24

state 12

    (27) bodyLine -> nestedConditional .

    PRINT           reduce using rule 27 (bodyLine -> nestedConditional .)
    ID              reduce using rule 27 (bodyLine -> nestedConditional .)
    IF              reduce using rule 27 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 27 (bodyLine -> nestedConditional .)
    $end            reduce using rule 27 (bodyLine -> nestedConditional .)
    END             reduce using rule 27 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 27 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 27 (bodyLine -> nestedConditional .)


state 13

    (28) bodyLine -> nestedWhile .

    PRINT           reduce using rule 28 (bodyLine -> nestedWhile .)
    ID              reduce using rule 28 (bodyLine -> nestedWhile .)
    IF              reduce using rule 28 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 28 (bodyLine -> nestedWhile .)
    $end            reduce using rule 28 (bodyLine -> nestedWhile .)
    END             reduce using rule 28 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 28 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 28 (bodyLine -> nestedWhile .)


state 14

    (29) bodyLine -> funcionCall .

    PRINT           reduce using rule 29 (bodyLine -> funcionCall .)
    ID              reduce using rule 29 (bodyLine -> funcionCall .)
    IF              reduce using rule 29 (bodyLine -> funcionCall .)
    WHILE           reduce using rule 29 (bodyLine -> funcionCall .)
    $end            reduce using rule 29 (bodyLine -> funcionCall .)
    END             reduce using rule 29 (bodyLine -> funcionCall .)
    ELSE            reduce using rule 29 (bodyLine -> funcionCall .)
    ELSIF           reduce using rule 29 (bodyLine -> funcionCall .)


state 15

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 38


state 16

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (24) assignmentRule -> ID ASSIGNMENT . operations
    (76) number -> . FLOAT
    (77) number -> . INTEGER
    (70) condition -> . conditionValue comparator conditionValue
    (46) creationTDA -> . creationStack
    (47) creationTDA -> . creationLinkedList
    (48) creationTDA -> . creationHashmap
    (66) operations -> . operation
    (67) operations -> . operation arithmeticOperator number
    (68) conditionValue -> . ID
    (69) conditionValue -> . number
    (41) creationStack -> . STACK DOT NEW
    (42) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (45) creationLinkedList -> . LINKEDLIST DOT NEW
    (49) creationHashmap -> . HASH DOT NEW
    (50) creationHashmap -> . LBRACE pairs RBRACE
    (51) creationHashmap -> . LBRACE RBRACE
    (65) operation -> . number arithmeticOperator number

    ID              shift and go to state 39
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    STACK           shift and go to state 50
    OPENBRACKET     shift and go to state 51
    LINKEDLIST      shift and go to state 52
    HASH            shift and go to state 53
    LBRACE          shift and go to state 54

    number                         shift and go to state 40
    condition                      shift and go to state 41
    creationTDA                    shift and go to state 44
    operations                     shift and go to state 45
    conditionValue                 shift and go to state 24
    creationStack                  shift and go to state 46
    creationLinkedList             shift and go to state 47
    creationHashmap                shift and go to state 48
    operation                      shift and go to state 49

state 17

    (39) funcionCall -> ID LPAREN . parameters RPAREN
    (40) funcionCall -> ID LPAREN . RPAREN
    (37) parameters -> . ID
    (38) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 57
    ID              shift and go to state 55

    parameters                     shift and go to state 56

state 18

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 18
    nestedConditional              shift and go to state 19

state 19

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 20

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 20
    nestedWhile                    shift and go to state 21

state 21

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 22

    (31) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 31 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 31 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 31 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 31 (instructionBody -> bodyLine instructionBody .)


state 23

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 58
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 24

    (70) condition -> conditionValue . comparator conditionValue
    (71) comparator -> . GREATERTHAN
    (72) comparator -> . LESSTHAN
    (73) comparator -> . EQUALS
    (74) comparator -> . GREATEROREQUALS
    (75) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 60
    LESSTHAN        shift and go to state 61
    EQUALS          shift and go to state 62
    GREATEROREQUALS shift and go to state 63
    LESSOREQUALS    shift and go to state 64

    comparator                     shift and go to state 59

state 25

    (68) conditionValue -> ID .

    GREATERTHAN     reduce using rule 68 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 68 (conditionValue -> ID .)
    EQUALS          reduce using rule 68 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 68 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 68 (conditionValue -> ID .)
    PRINT           reduce using rule 68 (conditionValue -> ID .)
    ID              reduce using rule 68 (conditionValue -> ID .)
    IF              reduce using rule 68 (conditionValue -> ID .)
    WHILE           reduce using rule 68 (conditionValue -> ID .)
    $end            reduce using rule 68 (conditionValue -> ID .)
    END             reduce using rule 68 (conditionValue -> ID .)
    ELSE            reduce using rule 68 (conditionValue -> ID .)
    ELSIF           reduce using rule 68 (conditionValue -> ID .)


state 26

    (69) conditionValue -> number .

    GREATERTHAN     reduce using rule 69 (conditionValue -> number .)
    LESSTHAN        reduce using rule 69 (conditionValue -> number .)
    EQUALS          reduce using rule 69 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 69 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 69 (conditionValue -> number .)
    PRINT           reduce using rule 69 (conditionValue -> number .)
    ID              reduce using rule 69 (conditionValue -> number .)
    IF              reduce using rule 69 (conditionValue -> number .)
    WHILE           reduce using rule 69 (conditionValue -> number .)
    $end            reduce using rule 69 (conditionValue -> number .)
    END             reduce using rule 69 (conditionValue -> number .)
    ELSE            reduce using rule 69 (conditionValue -> number .)
    ELSIF           reduce using rule 69 (conditionValue -> number .)


state 27

    (76) number -> FLOAT .

    GREATERTHAN     reduce using rule 76 (number -> FLOAT .)
    LESSTHAN        reduce using rule 76 (number -> FLOAT .)
    EQUALS          reduce using rule 76 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 76 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 76 (number -> FLOAT .)
    PRINT           reduce using rule 76 (number -> FLOAT .)
    ID              reduce using rule 76 (number -> FLOAT .)
    IF              reduce using rule 76 (number -> FLOAT .)
    WHILE           reduce using rule 76 (number -> FLOAT .)
    $end            reduce using rule 76 (number -> FLOAT .)
    END             reduce using rule 76 (number -> FLOAT .)
    ELSE            reduce using rule 76 (number -> FLOAT .)
    ELSIF           reduce using rule 76 (number -> FLOAT .)
    PLUS            reduce using rule 76 (number -> FLOAT .)
    MINUS           reduce using rule 76 (number -> FLOAT .)
    POWER           reduce using rule 76 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 76 (number -> FLOAT .)
    DIVISION        reduce using rule 76 (number -> FLOAT .)
    COMMA           reduce using rule 76 (number -> FLOAT .)
    RBRACE          reduce using rule 76 (number -> FLOAT .)


state 28

    (77) number -> INTEGER .

    GREATERTHAN     reduce using rule 77 (number -> INTEGER .)
    LESSTHAN        reduce using rule 77 (number -> INTEGER .)
    EQUALS          reduce using rule 77 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 77 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 77 (number -> INTEGER .)
    PRINT           reduce using rule 77 (number -> INTEGER .)
    ID              reduce using rule 77 (number -> INTEGER .)
    IF              reduce using rule 77 (number -> INTEGER .)
    WHILE           reduce using rule 77 (number -> INTEGER .)
    $end            reduce using rule 77 (number -> INTEGER .)
    END             reduce using rule 77 (number -> INTEGER .)
    ELSE            reduce using rule 77 (number -> INTEGER .)
    ELSIF           reduce using rule 77 (number -> INTEGER .)
    PLUS            reduce using rule 77 (number -> INTEGER .)
    MINUS           reduce using rule 77 (number -> INTEGER .)
    POWER           reduce using rule 77 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 77 (number -> INTEGER .)
    DIVISION        reduce using rule 77 (number -> INTEGER .)
    COMMA           reduce using rule 77 (number -> INTEGER .)
    RBRACE          reduce using rule 77 (number -> INTEGER .)


state 29

    (15) whileLoop -> WHILE condition . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 65
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 30

    (26) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 26 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 26 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 26 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 26 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 26 (bodyLine -> PRINT printBody .)
    END             reduce using rule 26 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 26 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 26 (bodyLine -> PRINT printBody .)


state 31

    (32) printBody -> ID .
    (68) conditionValue -> ID .

    PRINT           reduce using rule 32 (printBody -> ID .)
    ID              reduce using rule 32 (printBody -> ID .)
    IF              reduce using rule 32 (printBody -> ID .)
    WHILE           reduce using rule 32 (printBody -> ID .)
    $end            reduce using rule 32 (printBody -> ID .)
    END             reduce using rule 32 (printBody -> ID .)
    ELSE            reduce using rule 32 (printBody -> ID .)
    ELSIF           reduce using rule 32 (printBody -> ID .)
    GREATERTHAN     reduce using rule 68 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 68 (conditionValue -> ID .)
    EQUALS          reduce using rule 68 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 68 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 68 (conditionValue -> ID .)


state 32

    (33) printBody -> TRUE .

    PRINT           reduce using rule 33 (printBody -> TRUE .)
    ID              reduce using rule 33 (printBody -> TRUE .)
    IF              reduce using rule 33 (printBody -> TRUE .)
    WHILE           reduce using rule 33 (printBody -> TRUE .)
    $end            reduce using rule 33 (printBody -> TRUE .)
    END             reduce using rule 33 (printBody -> TRUE .)
    ELSE            reduce using rule 33 (printBody -> TRUE .)
    ELSIF           reduce using rule 33 (printBody -> TRUE .)


state 33

    (34) printBody -> FALSE .

    PRINT           reduce using rule 34 (printBody -> FALSE .)
    ID              reduce using rule 34 (printBody -> FALSE .)
    IF              reduce using rule 34 (printBody -> FALSE .)
    WHILE           reduce using rule 34 (printBody -> FALSE .)
    $end            reduce using rule 34 (printBody -> FALSE .)
    END             reduce using rule 34 (printBody -> FALSE .)
    ELSE            reduce using rule 34 (printBody -> FALSE .)
    ELSIF           reduce using rule 34 (printBody -> FALSE .)


state 34

    (35) printBody -> dataType .

    PRINT           reduce using rule 35 (printBody -> dataType .)
    ID              reduce using rule 35 (printBody -> dataType .)
    IF              reduce using rule 35 (printBody -> dataType .)
    WHILE           reduce using rule 35 (printBody -> dataType .)
    $end            reduce using rule 35 (printBody -> dataType .)
    END             reduce using rule 35 (printBody -> dataType .)
    ELSE            reduce using rule 35 (printBody -> dataType .)
    ELSIF           reduce using rule 35 (printBody -> dataType .)


state 35

    (36) printBody -> condition .

    PRINT           reduce using rule 36 (printBody -> condition .)
    ID              reduce using rule 36 (printBody -> condition .)
    IF              reduce using rule 36 (printBody -> condition .)
    WHILE           reduce using rule 36 (printBody -> condition .)
    $end            reduce using rule 36 (printBody -> condition .)
    END             reduce using rule 36 (printBody -> condition .)
    ELSE            reduce using rule 36 (printBody -> condition .)
    ELSIF           reduce using rule 36 (printBody -> condition .)


state 36

    (78) dataType -> STRING .

    PRINT           reduce using rule 78 (dataType -> STRING .)
    ID              reduce using rule 78 (dataType -> STRING .)
    IF              reduce using rule 78 (dataType -> STRING .)
    WHILE           reduce using rule 78 (dataType -> STRING .)
    $end            reduce using rule 78 (dataType -> STRING .)
    END             reduce using rule 78 (dataType -> STRING .)
    ELSE            reduce using rule 78 (dataType -> STRING .)
    ELSIF           reduce using rule 78 (dataType -> STRING .)


state 37

    (79) dataType -> number .
    (69) conditionValue -> number .

    PRINT           reduce using rule 79 (dataType -> number .)
    ID              reduce using rule 79 (dataType -> number .)
    IF              reduce using rule 79 (dataType -> number .)
    WHILE           reduce using rule 79 (dataType -> number .)
    $end            reduce using rule 79 (dataType -> number .)
    END             reduce using rule 79 (dataType -> number .)
    ELSE            reduce using rule 79 (dataType -> number .)
    ELSIF           reduce using rule 79 (dataType -> number .)
    GREATERTHAN     reduce using rule 69 (conditionValue -> number .)
    LESSTHAN        reduce using rule 69 (conditionValue -> number .)
    EQUALS          reduce using rule 69 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 69 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 69 (conditionValue -> number .)


state 38

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (37) parameters -> . ID
    (38) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 67
    ID              shift and go to state 55

    parameters                     shift and go to state 66

state 39

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (68) conditionValue -> ID .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    GREATERTHAN     reduce using rule 68 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 68 (conditionValue -> ID .)
    EQUALS          reduce using rule 68 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 68 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 68 (conditionValue -> ID .)


state 40

    (18) assignmentRule -> ID ASSIGNMENT number .
    (69) conditionValue -> number .
    (65) operation -> number . arithmeticOperator number
    (60) arithmeticOperator -> . PLUS
    (61) arithmeticOperator -> . MINUS
    (62) arithmeticOperator -> . POWER
    (63) arithmeticOperator -> . MULTIPLICATION
    (64) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 69 (conditionValue -> number .)
    LESSTHAN        reduce using rule 69 (conditionValue -> number .)
    EQUALS          reduce using rule 69 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 69 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 69 (conditionValue -> number .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    POWER           shift and go to state 71
    MULTIPLICATION  shift and go to state 72
    DIVISION        shift and go to state 73

    arithmeticOperator             shift and go to state 68

state 41

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 42

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 43

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 44

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 45

    (24) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)


state 46

    (46) creationTDA -> creationStack .

    PRINT           reduce using rule 46 (creationTDA -> creationStack .)
    ID              reduce using rule 46 (creationTDA -> creationStack .)
    IF              reduce using rule 46 (creationTDA -> creationStack .)
    WHILE           reduce using rule 46 (creationTDA -> creationStack .)
    $end            reduce using rule 46 (creationTDA -> creationStack .)
    END             reduce using rule 46 (creationTDA -> creationStack .)
    ELSE            reduce using rule 46 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 46 (creationTDA -> creationStack .)


state 47

    (47) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 47 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 47 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 47 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 47 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 47 (creationTDA -> creationLinkedList .)
    END             reduce using rule 47 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 47 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 47 (creationTDA -> creationLinkedList .)


state 48

    (48) creationTDA -> creationHashmap .

    PRINT           reduce using rule 48 (creationTDA -> creationHashmap .)
    ID              reduce using rule 48 (creationTDA -> creationHashmap .)
    IF              reduce using rule 48 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 48 (creationTDA -> creationHashmap .)
    $end            reduce using rule 48 (creationTDA -> creationHashmap .)
    END             reduce using rule 48 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 48 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 48 (creationTDA -> creationHashmap .)


state 49

    (66) operations -> operation .
    (67) operations -> operation . arithmeticOperator number
    (60) arithmeticOperator -> . PLUS
    (61) arithmeticOperator -> . MINUS
    (62) arithmeticOperator -> . POWER
    (63) arithmeticOperator -> . MULTIPLICATION
    (64) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 66 (operations -> operation .)
    ID              reduce using rule 66 (operations -> operation .)
    IF              reduce using rule 66 (operations -> operation .)
    WHILE           reduce using rule 66 (operations -> operation .)
    $end            reduce using rule 66 (operations -> operation .)
    END             reduce using rule 66 (operations -> operation .)
    ELSE            reduce using rule 66 (operations -> operation .)
    ELSIF           reduce using rule 66 (operations -> operation .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 70
    POWER           shift and go to state 71
    MULTIPLICATION  shift and go to state 72
    DIVISION        shift and go to state 73

    arithmeticOperator             shift and go to state 74

state 50

    (41) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 75


state 51

    (42) creationStack -> OPENBRACKET . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 76


state 52

    (45) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 77


state 53

    (49) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 78


state 54

    (50) creationHashmap -> LBRACE . pairs RBRACE
    (51) creationHashmap -> LBRACE . RBRACE
    (53) pairs -> . pair
    (54) pairs -> . pair COMMA pairs
    (52) pair -> . STRING COLON value

    RBRACE          shift and go to state 80
    STRING          shift and go to state 82

    pairs                          shift and go to state 79
    pair                           shift and go to state 81

state 55

    (37) parameters -> ID .
    (38) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 37 (parameters -> ID .)
    COMMA           shift and go to state 83


state 56

    (39) funcionCall -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 84


state 57

    (40) funcionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 40 (funcionCall -> ID LPAREN RPAREN .)


state 58

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 85
    ELSE            shift and go to state 87
    ELSIF           shift and go to state 89

    conditionalElsif               shift and go to state 86
    elsif                          shift and go to state 88

state 59

    (70) condition -> conditionValue comparator . conditionValue
    (68) conditionValue -> . ID
    (69) conditionValue -> . number
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    conditionValue                 shift and go to state 90
    number                         shift and go to state 26

state 60

    (71) comparator -> GREATERTHAN .

    ID              reduce using rule 71 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 71 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 71 (comparator -> GREATERTHAN .)


state 61

    (72) comparator -> LESSTHAN .

    ID              reduce using rule 72 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 72 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 72 (comparator -> LESSTHAN .)


state 62

    (73) comparator -> EQUALS .

    ID              reduce using rule 73 (comparator -> EQUALS .)
    FLOAT           reduce using rule 73 (comparator -> EQUALS .)
    INTEGER         reduce using rule 73 (comparator -> EQUALS .)


state 63

    (74) comparator -> GREATEROREQUALS .

    ID              reduce using rule 74 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 74 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 74 (comparator -> GREATEROREQUALS .)


state 64

    (75) comparator -> LESSOREQUALS .

    ID              reduce using rule 75 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 75 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 75 (comparator -> LESSOREQUALS .)


state 65

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 91


state 66

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 92


state 67

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 93


state 68

    (65) operation -> number arithmeticOperator . number
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    number                         shift and go to state 94

state 69

    (60) arithmeticOperator -> PLUS .

    FLOAT           reduce using rule 60 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 60 (arithmeticOperator -> PLUS .)


state 70

    (61) arithmeticOperator -> MINUS .

    FLOAT           reduce using rule 61 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 61 (arithmeticOperator -> MINUS .)


state 71

    (62) arithmeticOperator -> POWER .

    FLOAT           reduce using rule 62 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 62 (arithmeticOperator -> POWER .)


state 72

    (63) arithmeticOperator -> MULTIPLICATION .

    FLOAT           reduce using rule 63 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 63 (arithmeticOperator -> MULTIPLICATION .)


state 73

    (64) arithmeticOperator -> DIVISION .

    FLOAT           reduce using rule 64 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 64 (arithmeticOperator -> DIVISION .)


state 74

    (67) operations -> operation arithmeticOperator . number
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    number                         shift and go to state 95

state 75

    (41) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 96


state 76

    (42) creationStack -> OPENBRACKET CLOSEDBRACKET .

    PRINT           reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 42 (creationStack -> OPENBRACKET CLOSEDBRACKET .)


state 77

    (45) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 97


state 78

    (49) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 98


state 79

    (50) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 99


state 80

    (51) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 51 (creationHashmap -> LBRACE RBRACE .)


state 81

    (53) pairs -> pair .
    (54) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 53 (pairs -> pair .)
    COMMA           shift and go to state 100


state 82

    (52) pair -> STRING . COLON value

    COLON           shift and go to state 101


state 83

    (38) parameters -> ID COMMA . parameters
    (37) parameters -> . ID
    (38) parameters -> . ID COMMA parameters

    ID              shift and go to state 55

    parameters                     shift and go to state 102

state 84

    (39) funcionCall -> ID LPAREN parameters RPAREN .

    PRINT           reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    WHILE           reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    $end            reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    END             reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSE            reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)
    ELSIF           reduce using rule 39 (funcionCall -> ID LPAREN parameters RPAREN .)


state 85

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 86

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 103
    ELSE            shift and go to state 104


state 87

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 105
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 88

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 89

    elsif                          shift and go to state 88
    conditionalElsif               shift and go to state 106

state 89

    (9) elsif -> ELSIF . condition instructionBody
    (70) condition -> . conditionValue comparator conditionValue
    (68) conditionValue -> . ID
    (69) conditionValue -> . number
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    ID              shift and go to state 25
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    condition                      shift and go to state 107
    conditionValue                 shift and go to state 24
    number                         shift and go to state 26

state 90

    (70) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 70 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 70 (condition -> conditionValue comparator conditionValue .)


state 91

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 92

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 108
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 93

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 94

    (65) operation -> number arithmeticOperator number .

    PLUS            reduce using rule 65 (operation -> number arithmeticOperator number .)
    MINUS           reduce using rule 65 (operation -> number arithmeticOperator number .)
    POWER           reduce using rule 65 (operation -> number arithmeticOperator number .)
    MULTIPLICATION  reduce using rule 65 (operation -> number arithmeticOperator number .)
    DIVISION        reduce using rule 65 (operation -> number arithmeticOperator number .)
    PRINT           reduce using rule 65 (operation -> number arithmeticOperator number .)
    ID              reduce using rule 65 (operation -> number arithmeticOperator number .)
    IF              reduce using rule 65 (operation -> number arithmeticOperator number .)
    WHILE           reduce using rule 65 (operation -> number arithmeticOperator number .)
    $end            reduce using rule 65 (operation -> number arithmeticOperator number .)
    END             reduce using rule 65 (operation -> number arithmeticOperator number .)
    ELSE            reduce using rule 65 (operation -> number arithmeticOperator number .)
    ELSIF           reduce using rule 65 (operation -> number arithmeticOperator number .)


state 95

    (67) operations -> operation arithmeticOperator number .

    PRINT           reduce using rule 67 (operations -> operation arithmeticOperator number .)
    ID              reduce using rule 67 (operations -> operation arithmeticOperator number .)
    IF              reduce using rule 67 (operations -> operation arithmeticOperator number .)
    WHILE           reduce using rule 67 (operations -> operation arithmeticOperator number .)
    $end            reduce using rule 67 (operations -> operation arithmeticOperator number .)
    END             reduce using rule 67 (operations -> operation arithmeticOperator number .)
    ELSE            reduce using rule 67 (operations -> operation arithmeticOperator number .)
    ELSIF           reduce using rule 67 (operations -> operation arithmeticOperator number .)


state 96

    (41) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 41 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 41 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 41 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 41 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 41 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 41 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 41 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 41 (creationStack -> STACK DOT NEW .)


state 97

    (45) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 45 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 98

    (49) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 49 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 49 (creationHashmap -> HASH DOT NEW .)


state 99

    (50) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 50 (creationHashmap -> LBRACE pairs RBRACE .)


state 100

    (54) pairs -> pair COMMA . pairs
    (53) pairs -> . pair
    (54) pairs -> . pair COMMA pairs
    (52) pair -> . STRING COLON value

    STRING          shift and go to state 82

    pair                           shift and go to state 81
    pairs                          shift and go to state 109

state 101

    (52) pair -> STRING COLON . value
    (55) value -> . ID
    (56) value -> . STRING
    (57) value -> . number
    (58) value -> . LBRACE pairs RBRACE
    (59) value -> . LBRACE RBRACE
    (76) number -> . FLOAT
    (77) number -> . INTEGER

    ID              shift and go to state 112
    STRING          shift and go to state 110
    LBRACE          shift and go to state 114
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28

    value                          shift and go to state 111
    number                         shift and go to state 113

state 102

    (38) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 38 (parameters -> ID COMMA parameters .)


state 103

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 104

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 115
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 105

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 116


state 106

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 107

    (9) elsif -> ELSIF condition . instructionBody
    (30) instructionBody -> . bodyLine
    (31) instructionBody -> . bodyLine instructionBody
    (25) bodyLine -> . assignmentRule
    (26) bodyLine -> . PRINT printBody
    (27) bodyLine -> . nestedConditional
    (28) bodyLine -> . nestedWhile
    (29) bodyLine -> . funcionCall
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (39) funcionCall -> . ID LPAREN parameters RPAREN
    (40) funcionCall -> . ID LPAREN RPAREN
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 117
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    funcionCall                    shift and go to state 14
    conditional                    shift and go to state 18
    whileLoop                      shift and go to state 20

state 108

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 118


state 109

    (54) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 54 (pairs -> pair COMMA pairs .)


state 110

    (56) value -> STRING .

    COMMA           reduce using rule 56 (value -> STRING .)
    RBRACE          reduce using rule 56 (value -> STRING .)


state 111

    (52) pair -> STRING COLON value .

    COMMA           reduce using rule 52 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 52 (pair -> STRING COLON value .)


state 112

    (55) value -> ID .

    COMMA           reduce using rule 55 (value -> ID .)
    RBRACE          reduce using rule 55 (value -> ID .)


state 113

    (57) value -> number .

    COMMA           reduce using rule 57 (value -> number .)
    RBRACE          reduce using rule 57 (value -> number .)


state 114

    (58) value -> LBRACE . pairs RBRACE
    (59) value -> LBRACE . RBRACE
    (53) pairs -> . pair
    (54) pairs -> . pair COMMA pairs
    (52) pair -> . STRING COLON value

    RBRACE          shift and go to state 120
    STRING          shift and go to state 82

    pairs                          shift and go to state 119
    pair                           shift and go to state 81

state 115

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 121


state 116

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 117

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 118

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 119

    (58) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 122


state 120

    (59) value -> LBRACE RBRACE .

    COMMA           reduce using rule 59 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 59 (value -> LBRACE RBRACE .)


state 121

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 122

    (58) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 58 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 58 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 18 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 20 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
