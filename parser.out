Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CASE
    CLASS
    NODE
    THEN
    YIELD

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> lambda_expression
Rule 5     lambda_expression -> LAMBDA LBRACE instructionBody RBRACE
Rule 6     lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE
Rule 7     instruction -> conditional
Rule 8     conditional -> IF condition instructionBody END
Rule 9     conditional -> IF condition instructionBody conditionalElsif END
Rule 10    conditional -> IF condition instructionBody ELSE instructionBody END
Rule 11    conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 12    elsif -> ELSIF condition instructionBody
Rule 13    conditionalElsif -> elsif
Rule 14    conditionalElsif -> elsif conditionalElsif
Rule 15    instruction -> whileLoop
Rule 16    whileLoop -> WHILE condition instructionBody END
Rule 17    instruction -> forLoop
Rule 18    forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END
Rule 19    assignmentRule -> ID ASSIGNMENT number
Rule 20    assignmentRule -> ID ASSIGNMENT ID
Rule 21    assignmentRule -> ID ASSIGNMENT condition
Rule 22    assignmentRule -> ID ASSIGNMENT TRUE
Rule 23    assignmentRule -> ID ASSIGNMENT FALSE
Rule 24    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 25    assignmentRule -> ID ASSIGNMENT operations
Rule 26    assignmentRule -> ID ASSIGNMENT array
Rule 27    assignmentRule -> ID ASSIGNMENT indexation
Rule 28    assignmentRule -> ID ASSIGNMENT attribute
Rule 29    assignmentRule -> ID ASSIGNMENT input
Rule 30    bodyLine -> assignmentRule
Rule 31    bodyLine -> PRINT printBody
Rule 32    bodyLine -> conditional
Rule 33    bodyLine -> whileLoop
Rule 34    bodyLine -> functionCall
Rule 35    bodyLine -> arrayConcat
Rule 36    bodyLine -> RETURN arguments
Rule 37    bodyLine -> PUTS printBody
Rule 38    bodyLine -> method
Rule 39    bodyLine -> unariOperator
Rule 40    bodyLine -> forLoop
Rule 41    instructionBody -> bodyLine
Rule 42    instructionBody -> bodyLine instructionBody
Rule 43    printBody -> ID
Rule 44    printBody -> TRUE
Rule 45    printBody -> FALSE
Rule 46    printBody -> dataType
Rule 47    printBody -> condition
Rule 48    printBody -> method
Rule 49    printBody -> functionCall
Rule 50    argument -> ID
Rule 51    argument -> number
Rule 52    argument -> attribute
Rule 53    argument -> indexation
Rule 54    argument -> STRING
Rule 55    arguments -> argument
Rule 56    arguments -> argument COMMA arguments
Rule 57    method -> ID DOT functionCall
Rule 58    input -> GETS DOT CHOMP DOT TO_F
Rule 59    input -> GETS DOT CHOMP DOT TO_I
Rule 60    input -> GETS DOT CHOMP
Rule 61    parameters -> ID
Rule 62    parameters -> ID COMMA parameters
Rule 63    functionCall -> ID LPAREN arguments RPAREN
Rule 64    functionCall -> ID LPAREN RPAREN
Rule 65    blockFunction -> LBRACE instructionBody RBRACE
Rule 66    blockFunction -> DO instructionBody END
Rule 67    creationStack -> STACK DOT NEW
Rule 68    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 69    creationLinkedList -> LINKEDLIST DOT NEW
Rule 70    creationTDA -> creationStack
Rule 71    creationTDA -> creationLinkedList
Rule 72    creationTDA -> creationHashmap
Rule 73    creationHashmap -> HASH DOT NEW
Rule 74    creationHashmap -> LBRACE pairs RBRACE
Rule 75    creationHashmap -> LBRACE RBRACE
Rule 76    pair -> STRING COLON value
Rule 77    pairs -> pair
Rule 78    pairs -> pair COMMA pairs
Rule 79    value -> ID
Rule 80    value -> STRING
Rule 81    value -> number
Rule 82    value -> LBRACE pairs RBRACE
Rule 83    value -> LBRACE RBRACE
Rule 84    arithmeticOperator -> PLUS
Rule 85    arithmeticOperator -> MINUS
Rule 86    arithmeticOperator -> POWER
Rule 87    arithmeticOperator -> MULTIPLICATION
Rule 88    arithmeticOperator -> DIVISION
Rule 89    attribute -> ID DOT ID
Rule 90    operationValue -> ID
Rule 91    operationValue -> number
Rule 92    operationValue -> attribute
Rule 93    operationValue -> indexation
Rule 94    operation -> operationValue arithmeticOperator operationValue
Rule 95    operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN
Rule 96    operations -> operation
Rule 97    operations -> operation arithmeticOperator operations
Rule 98    operations -> operation arithmeticOperator operationValue
Rule 99    operations -> operationValue arithmeticOperator operation
Rule 100   array -> OPENBRACKET element_list CLOSEDBRACKET
Rule 101   array -> OPENBRACKET CLOSEDBRACKET
Rule 102   element_list -> conditionValue
Rule 103   element_list -> element_list COMMA conditionValue
Rule 104   conditionValue -> ID
Rule 105   conditionValue -> number
Rule 106   conditionValue -> indexation
Rule 107   conditionValue -> attribute
Rule 108   arrayConcat -> ID ARRAYAPPEND ID
Rule 109   arrayConcat -> ID ARRAYAPPEND number
Rule 110   indexation -> ID OPENBRACKET element_list CLOSEDBRACKET
Rule 111   indexation -> ID OPENBRACKET operation CLOSEDBRACKET
Rule 112   condition -> conditionValue comparator conditionValue
Rule 113   comparator -> GREATERTHAN
Rule 114   comparator -> LESSTHAN
Rule 115   comparator -> EQUALS
Rule 116   comparator -> GREATEROREQUALS
Rule 117   comparator -> LESSOREQUALS
Rule 118   unariOperator -> ID ASSIGNDECREMENT number
Rule 119   unariOperator -> ID ASSIGNINCREMENT number
Rule 120   number -> FLOAT
Rule 121   number -> INTEGER
Rule 122   dataType -> STRING
Rule 123   dataType -> number

Terminals, with rules where they appear

AND                  : 
ARRAYAPPEND          : 108 109
ASSIGNDECREMENT      : 118
ASSIGNINCREMENT      : 119
ASSIGNMENT           : 6 19 20 21 22 23 24 25 26 27 28 29
BREAK                : 
CASE                 : 
CHOMP                : 58 59 60
CLASS                : 
CLOSEDBRACKET        : 68 100 101 110 111
COLON                : 76
COMMA                : 56 62 78 103
DEF                  : 2 3
DIVISION             : 88
DO                   : 66
DOT                  : 18 18 57 58 58 59 59 60 67 69 73 89
ELSE                 : 10 11
ELSIF                : 12
END                  : 2 3 8 9 10 11 16 18 66
EQUALS               : 115
FALSE                : 23 45
FLOAT                : 120
FOR                  : 18
GETS                 : 58 59 60
GREATEROREQUALS      : 116
GREATERTHAN          : 113
HASH                 : 73
ID                   : 2 3 6 18 19 20 20 21 22 23 24 25 26 27 28 29 43 50 57 61 62 63 64 79 89 89 90 104 108 108 109 110 111 118 119
IF                   : 8 9 10 11
IN                   : 18
INTEGER              : 18 18 121
LAMBDA               : 5 6
LBRACE               : 5 6 65 74 75 82 83
LESSOREQUALS         : 117
LESSTHAN             : 114
LINKEDLIST           : 69
LPAREN               : 2 3 18 63 64 95
MINUS                : 85
MULTIPLICATION       : 87
NEW                  : 67 69 73
NODE                 : 
OPENBRACKET          : 68 100 101 110 111
PLUS                 : 84
POWER                : 86
PRINT                : 31
PUTS                 : 37
RBRACE               : 5 6 65 74 75 82 83
RETURN               : 36
RPAREN               : 2 3 18 63 64 95
STACK                : 67
STRING               : 54 76 80 122
THEN                 : 
TO_F                 : 58
TO_I                 : 59
TRUE                 : 22 44
WHILE                : 16
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argument             : 55 56
arguments            : 36 56 63
arithmeticOperator   : 94 95 97 98 99
array                : 26
arrayConcat          : 35
assignmentRule       : 30
attribute            : 28 52 92 107
blockFunction        : 
bodyLine             : 41 42
comparator           : 112
condition            : 8 9 10 11 12 16 21 47
conditionValue       : 102 103 112 112
conditional          : 7 32
conditionalElsif     : 9 11 14
creationHashmap      : 72
creationLinkedList   : 71
creationStack        : 70
creationTDA          : 24
dataType             : 46
element_list         : 100 103 110
elsif                : 13 14
forLoop              : 17 40
functionCall         : 34 49 57
indexation           : 27 53 93 106
input                : 29
instruction          : 0
instructionBody      : 1 2 5 6 8 9 10 10 11 11 12 16 18 42 65 66
lambda_expression    : 4
method               : 38 48
number               : 19 51 81 91 105 109 118 119 123
operation            : 96 97 98 99 111
operationValue       : 94 94 95 95 98 99
operations           : 25 97
pair                 : 77 78
pairs                : 74 78 82
parameters           : 2 62
printBody            : 31 37
unariOperator        : 39
value                : 76
whileLoop            : 15 33

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . lambda_expression
    (7) instruction -> . conditional
    (15) instruction -> . whileLoop
    (17) instruction -> . forLoop
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (5) lambda_expression -> . LAMBDA LBRACE instructionBody RBRACE
    (6) lambda_expression -> . ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number

    DEF             shift and go to state 3
    LAMBDA          shift and go to state 10
    ID              shift and go to state 4
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    lambda_expression              shift and go to state 5
    conditional                    shift and go to state 6
    whileLoop                      shift and go to state 7
    forLoop                        shift and go to state 8
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 22


state 4

    (6) lambda_expression -> ID . ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE
    (19) assignmentRule -> ID . ASSIGNMENT number
    (20) assignmentRule -> ID . ASSIGNMENT ID
    (21) assignmentRule -> ID . ASSIGNMENT condition
    (22) assignmentRule -> ID . ASSIGNMENT TRUE
    (23) assignmentRule -> ID . ASSIGNMENT FALSE
    (24) assignmentRule -> ID . ASSIGNMENT creationTDA
    (25) assignmentRule -> ID . ASSIGNMENT operations
    (26) assignmentRule -> ID . ASSIGNMENT array
    (27) assignmentRule -> ID . ASSIGNMENT indexation
    (28) assignmentRule -> ID . ASSIGNMENT attribute
    (29) assignmentRule -> ID . ASSIGNMENT input
    (63) functionCall -> ID . LPAREN arguments RPAREN
    (64) functionCall -> ID . LPAREN RPAREN
    (108) arrayConcat -> ID . ARRAYAPPEND ID
    (109) arrayConcat -> ID . ARRAYAPPEND number
    (57) method -> ID . DOT functionCall
    (118) unariOperator -> ID . ASSIGNDECREMENT number
    (119) unariOperator -> ID . ASSIGNINCREMENT number

    ASSIGNMENT      shift and go to state 23
    LPAREN          shift and go to state 24
    ARRAYAPPEND     shift and go to state 25
    DOT             shift and go to state 26
    ASSIGNDECREMENT shift and go to state 27
    ASSIGNINCREMENT shift and go to state 28


state 5

    (4) instruction -> lambda_expression .

    $end            reduce using rule 4 (instruction -> lambda_expression .)


state 6

    (7) instruction -> conditional .
    (32) bodyLine -> conditional .

  ! reduce/reduce conflict for $end resolved using rule 7 (instruction -> conditional .)
    $end            reduce using rule 7 (instruction -> conditional .)
    PRINT           reduce using rule 32 (bodyLine -> conditional .)
    RETURN          reduce using rule 32 (bodyLine -> conditional .)
    PUTS            reduce using rule 32 (bodyLine -> conditional .)
    ID              reduce using rule 32 (bodyLine -> conditional .)
    IF              reduce using rule 32 (bodyLine -> conditional .)
    WHILE           reduce using rule 32 (bodyLine -> conditional .)
    FOR             reduce using rule 32 (bodyLine -> conditional .)

  ! $end            [ reduce using rule 32 (bodyLine -> conditional .) ]


state 7

    (15) instruction -> whileLoop .
    (33) bodyLine -> whileLoop .

  ! reduce/reduce conflict for $end resolved using rule 15 (instruction -> whileLoop .)
    $end            reduce using rule 15 (instruction -> whileLoop .)
    PRINT           reduce using rule 33 (bodyLine -> whileLoop .)
    RETURN          reduce using rule 33 (bodyLine -> whileLoop .)
    PUTS            reduce using rule 33 (bodyLine -> whileLoop .)
    ID              reduce using rule 33 (bodyLine -> whileLoop .)
    IF              reduce using rule 33 (bodyLine -> whileLoop .)
    WHILE           reduce using rule 33 (bodyLine -> whileLoop .)
    FOR             reduce using rule 33 (bodyLine -> whileLoop .)

  ! $end            [ reduce using rule 33 (bodyLine -> whileLoop .) ]


state 8

    (17) instruction -> forLoop .
    (40) bodyLine -> forLoop .

  ! reduce/reduce conflict for $end resolved using rule 17 (instruction -> forLoop .)
    $end            reduce using rule 17 (instruction -> forLoop .)
    PRINT           reduce using rule 40 (bodyLine -> forLoop .)
    RETURN          reduce using rule 40 (bodyLine -> forLoop .)
    PUTS            reduce using rule 40 (bodyLine -> forLoop .)
    ID              reduce using rule 40 (bodyLine -> forLoop .)
    IF              reduce using rule 40 (bodyLine -> forLoop .)
    WHILE           reduce using rule 40 (bodyLine -> forLoop .)
    FOR             reduce using rule 40 (bodyLine -> forLoop .)

  ! $end            [ reduce using rule 40 (bodyLine -> forLoop .) ]


state 9

    (41) instructionBody -> bodyLine .
    (42) instructionBody -> bodyLine . instructionBody
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    $end            reduce using rule 41 (instructionBody -> bodyLine .)
    RBRACE          reduce using rule 41 (instructionBody -> bodyLine .)
    END             reduce using rule 41 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 41 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 41 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    bodyLine                       shift and go to state 9
    instructionBody                shift and go to state 29
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 10

    (5) lambda_expression -> LAMBDA . LBRACE instructionBody RBRACE

    LBRACE          shift and go to state 34


state 11

    (8) conditional -> IF . condition instructionBody END
    (9) conditional -> IF . condition instructionBody conditionalElsif END
    (10) conditional -> IF . condition instructionBody ELSE instructionBody END
    (11) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (112) condition -> . conditionValue comparator conditionValue
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 37
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    condition                      shift and go to state 35
    conditionValue                 shift and go to state 36
    number                         shift and go to state 38
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 12

    (16) whileLoop -> WHILE . condition instructionBody END
    (112) condition -> . conditionValue comparator conditionValue
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 37
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    condition                      shift and go to state 43
    conditionValue                 shift and go to state 36
    number                         shift and go to state 38
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 13

    (18) forLoop -> FOR . ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    ID              shift and go to state 44


state 14

    (30) bodyLine -> assignmentRule .

    PRINT           reduce using rule 30 (bodyLine -> assignmentRule .)
    RETURN          reduce using rule 30 (bodyLine -> assignmentRule .)
    PUTS            reduce using rule 30 (bodyLine -> assignmentRule .)
    ID              reduce using rule 30 (bodyLine -> assignmentRule .)
    IF              reduce using rule 30 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 30 (bodyLine -> assignmentRule .)
    FOR             reduce using rule 30 (bodyLine -> assignmentRule .)
    $end            reduce using rule 30 (bodyLine -> assignmentRule .)
    RBRACE          reduce using rule 30 (bodyLine -> assignmentRule .)
    END             reduce using rule 30 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 30 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 30 (bodyLine -> assignmentRule .)


state 15

    (31) bodyLine -> PRINT . printBody
    (43) printBody -> . ID
    (44) printBody -> . TRUE
    (45) printBody -> . FALSE
    (46) printBody -> . dataType
    (47) printBody -> . condition
    (48) printBody -> . method
    (49) printBody -> . functionCall
    (122) dataType -> . STRING
    (123) dataType -> . number
    (112) condition -> . conditionValue comparator conditionValue
    (57) method -> . ID DOT functionCall
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    STRING          shift and go to state 53
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    printBody                      shift and go to state 45
    dataType                       shift and go to state 49
    condition                      shift and go to state 50
    method                         shift and go to state 51
    functionCall                   shift and go to state 52
    number                         shift and go to state 54
    conditionValue                 shift and go to state 36
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 16

    (34) bodyLine -> functionCall .

    PRINT           reduce using rule 34 (bodyLine -> functionCall .)
    RETURN          reduce using rule 34 (bodyLine -> functionCall .)
    PUTS            reduce using rule 34 (bodyLine -> functionCall .)
    ID              reduce using rule 34 (bodyLine -> functionCall .)
    IF              reduce using rule 34 (bodyLine -> functionCall .)
    WHILE           reduce using rule 34 (bodyLine -> functionCall .)
    FOR             reduce using rule 34 (bodyLine -> functionCall .)
    $end            reduce using rule 34 (bodyLine -> functionCall .)
    RBRACE          reduce using rule 34 (bodyLine -> functionCall .)
    END             reduce using rule 34 (bodyLine -> functionCall .)
    ELSE            reduce using rule 34 (bodyLine -> functionCall .)
    ELSIF           reduce using rule 34 (bodyLine -> functionCall .)


state 17

    (35) bodyLine -> arrayConcat .

    PRINT           reduce using rule 35 (bodyLine -> arrayConcat .)
    RETURN          reduce using rule 35 (bodyLine -> arrayConcat .)
    PUTS            reduce using rule 35 (bodyLine -> arrayConcat .)
    ID              reduce using rule 35 (bodyLine -> arrayConcat .)
    IF              reduce using rule 35 (bodyLine -> arrayConcat .)
    WHILE           reduce using rule 35 (bodyLine -> arrayConcat .)
    FOR             reduce using rule 35 (bodyLine -> arrayConcat .)
    $end            reduce using rule 35 (bodyLine -> arrayConcat .)
    RBRACE          reduce using rule 35 (bodyLine -> arrayConcat .)
    END             reduce using rule 35 (bodyLine -> arrayConcat .)
    ELSE            reduce using rule 35 (bodyLine -> arrayConcat .)
    ELSIF           reduce using rule 35 (bodyLine -> arrayConcat .)


state 18

    (36) bodyLine -> RETURN . arguments
    (55) arguments -> . argument
    (56) arguments -> . argument COMMA arguments
    (50) argument -> . ID
    (51) argument -> . number
    (52) argument -> . attribute
    (53) argument -> . indexation
    (54) argument -> . STRING
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 57
    STRING          shift and go to state 61
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    arguments                      shift and go to state 55
    argument                       shift and go to state 56
    number                         shift and go to state 58
    attribute                      shift and go to state 59
    indexation                     shift and go to state 60

state 19

    (37) bodyLine -> PUTS . printBody
    (43) printBody -> . ID
    (44) printBody -> . TRUE
    (45) printBody -> . FALSE
    (46) printBody -> . dataType
    (47) printBody -> . condition
    (48) printBody -> . method
    (49) printBody -> . functionCall
    (122) dataType -> . STRING
    (123) dataType -> . number
    (112) condition -> . conditionValue comparator conditionValue
    (57) method -> . ID DOT functionCall
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    STRING          shift and go to state 53
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    printBody                      shift and go to state 62
    dataType                       shift and go to state 49
    condition                      shift and go to state 50
    method                         shift and go to state 51
    functionCall                   shift and go to state 52
    number                         shift and go to state 54
    conditionValue                 shift and go to state 36
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 20

    (38) bodyLine -> method .

    PRINT           reduce using rule 38 (bodyLine -> method .)
    RETURN          reduce using rule 38 (bodyLine -> method .)
    PUTS            reduce using rule 38 (bodyLine -> method .)
    ID              reduce using rule 38 (bodyLine -> method .)
    IF              reduce using rule 38 (bodyLine -> method .)
    WHILE           reduce using rule 38 (bodyLine -> method .)
    FOR             reduce using rule 38 (bodyLine -> method .)
    $end            reduce using rule 38 (bodyLine -> method .)
    RBRACE          reduce using rule 38 (bodyLine -> method .)
    END             reduce using rule 38 (bodyLine -> method .)
    ELSE            reduce using rule 38 (bodyLine -> method .)
    ELSIF           reduce using rule 38 (bodyLine -> method .)


state 21

    (39) bodyLine -> unariOperator .

    PRINT           reduce using rule 39 (bodyLine -> unariOperator .)
    RETURN          reduce using rule 39 (bodyLine -> unariOperator .)
    PUTS            reduce using rule 39 (bodyLine -> unariOperator .)
    ID              reduce using rule 39 (bodyLine -> unariOperator .)
    IF              reduce using rule 39 (bodyLine -> unariOperator .)
    WHILE           reduce using rule 39 (bodyLine -> unariOperator .)
    FOR             reduce using rule 39 (bodyLine -> unariOperator .)
    $end            reduce using rule 39 (bodyLine -> unariOperator .)
    RBRACE          reduce using rule 39 (bodyLine -> unariOperator .)
    END             reduce using rule 39 (bodyLine -> unariOperator .)
    ELSE            reduce using rule 39 (bodyLine -> unariOperator .)
    ELSIF           reduce using rule 39 (bodyLine -> unariOperator .)


state 22

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 63


state 23

    (6) lambda_expression -> ID ASSIGNMENT . LAMBDA LBRACE instructionBody RBRACE
    (19) assignmentRule -> ID ASSIGNMENT . number
    (20) assignmentRule -> ID ASSIGNMENT . ID
    (21) assignmentRule -> ID ASSIGNMENT . condition
    (22) assignmentRule -> ID ASSIGNMENT . TRUE
    (23) assignmentRule -> ID ASSIGNMENT . FALSE
    (24) assignmentRule -> ID ASSIGNMENT . creationTDA
    (25) assignmentRule -> ID ASSIGNMENT . operations
    (26) assignmentRule -> ID ASSIGNMENT . array
    (27) assignmentRule -> ID ASSIGNMENT . indexation
    (28) assignmentRule -> ID ASSIGNMENT . attribute
    (29) assignmentRule -> ID ASSIGNMENT . input
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (112) condition -> . conditionValue comparator conditionValue
    (70) creationTDA -> . creationStack
    (71) creationTDA -> . creationLinkedList
    (72) creationTDA -> . creationHashmap
    (96) operations -> . operation
    (97) operations -> . operation arithmeticOperator operations
    (98) operations -> . operation arithmeticOperator operationValue
    (99) operations -> . operationValue arithmeticOperator operation
    (100) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (101) array -> . OPENBRACKET CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID
    (58) input -> . GETS DOT CHOMP DOT TO_F
    (59) input -> . GETS DOT CHOMP DOT TO_I
    (60) input -> . GETS DOT CHOMP
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (67) creationStack -> . STACK DOT NEW
    (68) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (69) creationLinkedList -> . LINKEDLIST DOT NEW
    (73) creationHashmap -> . HASH DOT NEW
    (74) creationHashmap -> . LBRACE pairs RBRACE
    (75) creationHashmap -> . LBRACE RBRACE
    (94) operation -> . operationValue arithmeticOperator operationValue
    (95) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation

    LAMBDA          shift and go to state 65
    ID              shift and go to state 64
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42
    OPENBRACKET     shift and go to state 82
    GETS            shift and go to state 83
    STACK           shift and go to state 84
    LINKEDLIST      shift and go to state 85
    HASH            shift and go to state 86
    LBRACE          shift and go to state 66
    LPAREN          shift and go to state 87

    number                         shift and go to state 67
    condition                      shift and go to state 68
    creationTDA                    shift and go to state 71
    operations                     shift and go to state 72
    array                          shift and go to state 73
    indexation                     shift and go to state 74
    attribute                      shift and go to state 75
    input                          shift and go to state 76
    conditionValue                 shift and go to state 36
    creationStack                  shift and go to state 77
    creationLinkedList             shift and go to state 78
    creationHashmap                shift and go to state 79
    operation                      shift and go to state 80
    operationValue                 shift and go to state 81

state 24

    (63) functionCall -> ID LPAREN . arguments RPAREN
    (64) functionCall -> ID LPAREN . RPAREN
    (55) arguments -> . argument
    (56) arguments -> . argument COMMA arguments
    (50) argument -> . ID
    (51) argument -> . number
    (52) argument -> . attribute
    (53) argument -> . indexation
    (54) argument -> . STRING
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    RPAREN          shift and go to state 89
    ID              shift and go to state 57
    STRING          shift and go to state 61
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    arguments                      shift and go to state 88
    argument                       shift and go to state 56
    number                         shift and go to state 58
    attribute                      shift and go to state 59
    indexation                     shift and go to state 60

state 25

    (108) arrayConcat -> ID ARRAYAPPEND . ID
    (109) arrayConcat -> ID ARRAYAPPEND . number
    (120) number -> . FLOAT
    (121) number -> . INTEGER

    ID              shift and go to state 90
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    number                         shift and go to state 91

state 26

    (57) method -> ID DOT . functionCall
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 92

    functionCall                   shift and go to state 93

state 27

    (118) unariOperator -> ID ASSIGNDECREMENT . number
    (120) number -> . FLOAT
    (121) number -> . INTEGER

    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    number                         shift and go to state 94

state 28

    (119) unariOperator -> ID ASSIGNINCREMENT . number
    (120) number -> . FLOAT
    (121) number -> . INTEGER

    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    number                         shift and go to state 95

state 29

    (42) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 42 (instructionBody -> bodyLine instructionBody .)
    RBRACE          reduce using rule 42 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 42 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 42 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 42 (instructionBody -> bodyLine instructionBody .)


state 30

    (32) bodyLine -> conditional .

    PRINT           reduce using rule 32 (bodyLine -> conditional .)
    RETURN          reduce using rule 32 (bodyLine -> conditional .)
    PUTS            reduce using rule 32 (bodyLine -> conditional .)
    ID              reduce using rule 32 (bodyLine -> conditional .)
    IF              reduce using rule 32 (bodyLine -> conditional .)
    WHILE           reduce using rule 32 (bodyLine -> conditional .)
    FOR             reduce using rule 32 (bodyLine -> conditional .)
    $end            reduce using rule 32 (bodyLine -> conditional .)
    RBRACE          reduce using rule 32 (bodyLine -> conditional .)
    END             reduce using rule 32 (bodyLine -> conditional .)
    ELSE            reduce using rule 32 (bodyLine -> conditional .)
    ELSIF           reduce using rule 32 (bodyLine -> conditional .)


state 31

    (33) bodyLine -> whileLoop .

    PRINT           reduce using rule 33 (bodyLine -> whileLoop .)
    RETURN          reduce using rule 33 (bodyLine -> whileLoop .)
    PUTS            reduce using rule 33 (bodyLine -> whileLoop .)
    ID              reduce using rule 33 (bodyLine -> whileLoop .)
    IF              reduce using rule 33 (bodyLine -> whileLoop .)
    WHILE           reduce using rule 33 (bodyLine -> whileLoop .)
    FOR             reduce using rule 33 (bodyLine -> whileLoop .)
    $end            reduce using rule 33 (bodyLine -> whileLoop .)
    RBRACE          reduce using rule 33 (bodyLine -> whileLoop .)
    END             reduce using rule 33 (bodyLine -> whileLoop .)
    ELSE            reduce using rule 33 (bodyLine -> whileLoop .)
    ELSIF           reduce using rule 33 (bodyLine -> whileLoop .)


state 32

    (40) bodyLine -> forLoop .

    PRINT           reduce using rule 40 (bodyLine -> forLoop .)
    RETURN          reduce using rule 40 (bodyLine -> forLoop .)
    PUTS            reduce using rule 40 (bodyLine -> forLoop .)
    ID              reduce using rule 40 (bodyLine -> forLoop .)
    IF              reduce using rule 40 (bodyLine -> forLoop .)
    WHILE           reduce using rule 40 (bodyLine -> forLoop .)
    FOR             reduce using rule 40 (bodyLine -> forLoop .)
    $end            reduce using rule 40 (bodyLine -> forLoop .)
    RBRACE          reduce using rule 40 (bodyLine -> forLoop .)
    END             reduce using rule 40 (bodyLine -> forLoop .)
    ELSE            reduce using rule 40 (bodyLine -> forLoop .)
    ELSIF           reduce using rule 40 (bodyLine -> forLoop .)


state 33

    (19) assignmentRule -> ID . ASSIGNMENT number
    (20) assignmentRule -> ID . ASSIGNMENT ID
    (21) assignmentRule -> ID . ASSIGNMENT condition
    (22) assignmentRule -> ID . ASSIGNMENT TRUE
    (23) assignmentRule -> ID . ASSIGNMENT FALSE
    (24) assignmentRule -> ID . ASSIGNMENT creationTDA
    (25) assignmentRule -> ID . ASSIGNMENT operations
    (26) assignmentRule -> ID . ASSIGNMENT array
    (27) assignmentRule -> ID . ASSIGNMENT indexation
    (28) assignmentRule -> ID . ASSIGNMENT attribute
    (29) assignmentRule -> ID . ASSIGNMENT input
    (63) functionCall -> ID . LPAREN arguments RPAREN
    (64) functionCall -> ID . LPAREN RPAREN
    (108) arrayConcat -> ID . ARRAYAPPEND ID
    (109) arrayConcat -> ID . ARRAYAPPEND number
    (57) method -> ID . DOT functionCall
    (118) unariOperator -> ID . ASSIGNDECREMENT number
    (119) unariOperator -> ID . ASSIGNINCREMENT number

    ASSIGNMENT      shift and go to state 96
    LPAREN          shift and go to state 24
    ARRAYAPPEND     shift and go to state 25
    DOT             shift and go to state 26
    ASSIGNDECREMENT shift and go to state 27
    ASSIGNINCREMENT shift and go to state 28


state 34

    (5) lambda_expression -> LAMBDA LBRACE . instructionBody RBRACE
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 97
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 35

    (8) conditional -> IF condition . instructionBody END
    (9) conditional -> IF condition . instructionBody conditionalElsif END
    (10) conditional -> IF condition . instructionBody ELSE instructionBody END
    (11) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 98
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 36

    (112) condition -> conditionValue . comparator conditionValue
    (113) comparator -> . GREATERTHAN
    (114) comparator -> . LESSTHAN
    (115) comparator -> . EQUALS
    (116) comparator -> . GREATEROREQUALS
    (117) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 100
    LESSTHAN        shift and go to state 101
    EQUALS          shift and go to state 102
    GREATEROREQUALS shift and go to state 103
    LESSOREQUALS    shift and go to state 104

    comparator                     shift and go to state 99

state 37

    (104) conditionValue -> ID .
    (110) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> ID . DOT ID

    GREATERTHAN     reduce using rule 104 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 104 (conditionValue -> ID .)
    EQUALS          reduce using rule 104 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 104 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 104 (conditionValue -> ID .)
    CLOSEDBRACKET   reduce using rule 104 (conditionValue -> ID .)
    COMMA           reduce using rule 104 (conditionValue -> ID .)
    PRINT           reduce using rule 104 (conditionValue -> ID .)
    RETURN          reduce using rule 104 (conditionValue -> ID .)
    PUTS            reduce using rule 104 (conditionValue -> ID .)
    ID              reduce using rule 104 (conditionValue -> ID .)
    IF              reduce using rule 104 (conditionValue -> ID .)
    WHILE           reduce using rule 104 (conditionValue -> ID .)
    FOR             reduce using rule 104 (conditionValue -> ID .)
    $end            reduce using rule 104 (conditionValue -> ID .)
    RBRACE          reduce using rule 104 (conditionValue -> ID .)
    END             reduce using rule 104 (conditionValue -> ID .)
    ELSE            reduce using rule 104 (conditionValue -> ID .)
    ELSIF           reduce using rule 104 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 105
    DOT             shift and go to state 106


state 38

    (105) conditionValue -> number .

    GREATERTHAN     reduce using rule 105 (conditionValue -> number .)
    LESSTHAN        reduce using rule 105 (conditionValue -> number .)
    EQUALS          reduce using rule 105 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> number .)
    CLOSEDBRACKET   reduce using rule 105 (conditionValue -> number .)
    COMMA           reduce using rule 105 (conditionValue -> number .)
    PRINT           reduce using rule 105 (conditionValue -> number .)
    RETURN          reduce using rule 105 (conditionValue -> number .)
    PUTS            reduce using rule 105 (conditionValue -> number .)
    ID              reduce using rule 105 (conditionValue -> number .)
    IF              reduce using rule 105 (conditionValue -> number .)
    WHILE           reduce using rule 105 (conditionValue -> number .)
    FOR             reduce using rule 105 (conditionValue -> number .)
    $end            reduce using rule 105 (conditionValue -> number .)
    RBRACE          reduce using rule 105 (conditionValue -> number .)
    END             reduce using rule 105 (conditionValue -> number .)
    ELSE            reduce using rule 105 (conditionValue -> number .)
    ELSIF           reduce using rule 105 (conditionValue -> number .)


state 39

    (106) conditionValue -> indexation .

    GREATERTHAN     reduce using rule 106 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 106 (conditionValue -> indexation .)
    EQUALS          reduce using rule 106 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 106 (conditionValue -> indexation .)
    COMMA           reduce using rule 106 (conditionValue -> indexation .)
    PRINT           reduce using rule 106 (conditionValue -> indexation .)
    RETURN          reduce using rule 106 (conditionValue -> indexation .)
    PUTS            reduce using rule 106 (conditionValue -> indexation .)
    ID              reduce using rule 106 (conditionValue -> indexation .)
    IF              reduce using rule 106 (conditionValue -> indexation .)
    WHILE           reduce using rule 106 (conditionValue -> indexation .)
    FOR             reduce using rule 106 (conditionValue -> indexation .)
    $end            reduce using rule 106 (conditionValue -> indexation .)
    RBRACE          reduce using rule 106 (conditionValue -> indexation .)
    END             reduce using rule 106 (conditionValue -> indexation .)
    ELSE            reduce using rule 106 (conditionValue -> indexation .)
    ELSIF           reduce using rule 106 (conditionValue -> indexation .)


state 40

    (107) conditionValue -> attribute .

    GREATERTHAN     reduce using rule 107 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 107 (conditionValue -> attribute .)
    EQUALS          reduce using rule 107 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 107 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 107 (conditionValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 107 (conditionValue -> attribute .)
    COMMA           reduce using rule 107 (conditionValue -> attribute .)
    PRINT           reduce using rule 107 (conditionValue -> attribute .)
    RETURN          reduce using rule 107 (conditionValue -> attribute .)
    PUTS            reduce using rule 107 (conditionValue -> attribute .)
    ID              reduce using rule 107 (conditionValue -> attribute .)
    IF              reduce using rule 107 (conditionValue -> attribute .)
    WHILE           reduce using rule 107 (conditionValue -> attribute .)
    FOR             reduce using rule 107 (conditionValue -> attribute .)
    $end            reduce using rule 107 (conditionValue -> attribute .)
    RBRACE          reduce using rule 107 (conditionValue -> attribute .)
    END             reduce using rule 107 (conditionValue -> attribute .)
    ELSE            reduce using rule 107 (conditionValue -> attribute .)
    ELSIF           reduce using rule 107 (conditionValue -> attribute .)


state 41

    (120) number -> FLOAT .

    GREATERTHAN     reduce using rule 120 (number -> FLOAT .)
    LESSTHAN        reduce using rule 120 (number -> FLOAT .)
    EQUALS          reduce using rule 120 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 120 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 120 (number -> FLOAT .)
    PRINT           reduce using rule 120 (number -> FLOAT .)
    RETURN          reduce using rule 120 (number -> FLOAT .)
    PUTS            reduce using rule 120 (number -> FLOAT .)
    ID              reduce using rule 120 (number -> FLOAT .)
    IF              reduce using rule 120 (number -> FLOAT .)
    WHILE           reduce using rule 120 (number -> FLOAT .)
    FOR             reduce using rule 120 (number -> FLOAT .)
    $end            reduce using rule 120 (number -> FLOAT .)
    RBRACE          reduce using rule 120 (number -> FLOAT .)
    END             reduce using rule 120 (number -> FLOAT .)
    ELSE            reduce using rule 120 (number -> FLOAT .)
    ELSIF           reduce using rule 120 (number -> FLOAT .)
    COMMA           reduce using rule 120 (number -> FLOAT .)
    PLUS            reduce using rule 120 (number -> FLOAT .)
    MINUS           reduce using rule 120 (number -> FLOAT .)
    POWER           reduce using rule 120 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 120 (number -> FLOAT .)
    DIVISION        reduce using rule 120 (number -> FLOAT .)
    RPAREN          reduce using rule 120 (number -> FLOAT .)
    CLOSEDBRACKET   reduce using rule 120 (number -> FLOAT .)


state 42

    (121) number -> INTEGER .

    GREATERTHAN     reduce using rule 121 (number -> INTEGER .)
    LESSTHAN        reduce using rule 121 (number -> INTEGER .)
    EQUALS          reduce using rule 121 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 121 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 121 (number -> INTEGER .)
    PRINT           reduce using rule 121 (number -> INTEGER .)
    RETURN          reduce using rule 121 (number -> INTEGER .)
    PUTS            reduce using rule 121 (number -> INTEGER .)
    ID              reduce using rule 121 (number -> INTEGER .)
    IF              reduce using rule 121 (number -> INTEGER .)
    WHILE           reduce using rule 121 (number -> INTEGER .)
    FOR             reduce using rule 121 (number -> INTEGER .)
    $end            reduce using rule 121 (number -> INTEGER .)
    RBRACE          reduce using rule 121 (number -> INTEGER .)
    END             reduce using rule 121 (number -> INTEGER .)
    ELSE            reduce using rule 121 (number -> INTEGER .)
    ELSIF           reduce using rule 121 (number -> INTEGER .)
    COMMA           reduce using rule 121 (number -> INTEGER .)
    PLUS            reduce using rule 121 (number -> INTEGER .)
    MINUS           reduce using rule 121 (number -> INTEGER .)
    POWER           reduce using rule 121 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 121 (number -> INTEGER .)
    DIVISION        reduce using rule 121 (number -> INTEGER .)
    RPAREN          reduce using rule 121 (number -> INTEGER .)
    CLOSEDBRACKET   reduce using rule 121 (number -> INTEGER .)


state 43

    (16) whileLoop -> WHILE condition . instructionBody END
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 107
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 44

    (18) forLoop -> FOR ID . IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    IN              shift and go to state 108


state 45

    (31) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 31 (bodyLine -> PRINT printBody .)
    RETURN          reduce using rule 31 (bodyLine -> PRINT printBody .)
    PUTS            reduce using rule 31 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 31 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 31 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 31 (bodyLine -> PRINT printBody .)
    FOR             reduce using rule 31 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 31 (bodyLine -> PRINT printBody .)
    RBRACE          reduce using rule 31 (bodyLine -> PRINT printBody .)
    END             reduce using rule 31 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 31 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 31 (bodyLine -> PRINT printBody .)


state 46

    (43) printBody -> ID .
    (57) method -> ID . DOT functionCall
    (63) functionCall -> ID . LPAREN arguments RPAREN
    (64) functionCall -> ID . LPAREN RPAREN
    (104) conditionValue -> ID .
    (110) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> ID . DOT ID

    PRINT           reduce using rule 43 (printBody -> ID .)
    RETURN          reduce using rule 43 (printBody -> ID .)
    PUTS            reduce using rule 43 (printBody -> ID .)
    ID              reduce using rule 43 (printBody -> ID .)
    IF              reduce using rule 43 (printBody -> ID .)
    WHILE           reduce using rule 43 (printBody -> ID .)
    FOR             reduce using rule 43 (printBody -> ID .)
    $end            reduce using rule 43 (printBody -> ID .)
    RBRACE          reduce using rule 43 (printBody -> ID .)
    END             reduce using rule 43 (printBody -> ID .)
    ELSE            reduce using rule 43 (printBody -> ID .)
    ELSIF           reduce using rule 43 (printBody -> ID .)
    DOT             shift and go to state 109
    LPAREN          shift and go to state 24
    GREATERTHAN     reduce using rule 104 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 104 (conditionValue -> ID .)
    EQUALS          reduce using rule 104 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 104 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 104 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 105


state 47

    (44) printBody -> TRUE .

    PRINT           reduce using rule 44 (printBody -> TRUE .)
    RETURN          reduce using rule 44 (printBody -> TRUE .)
    PUTS            reduce using rule 44 (printBody -> TRUE .)
    ID              reduce using rule 44 (printBody -> TRUE .)
    IF              reduce using rule 44 (printBody -> TRUE .)
    WHILE           reduce using rule 44 (printBody -> TRUE .)
    FOR             reduce using rule 44 (printBody -> TRUE .)
    $end            reduce using rule 44 (printBody -> TRUE .)
    RBRACE          reduce using rule 44 (printBody -> TRUE .)
    END             reduce using rule 44 (printBody -> TRUE .)
    ELSE            reduce using rule 44 (printBody -> TRUE .)
    ELSIF           reduce using rule 44 (printBody -> TRUE .)


state 48

    (45) printBody -> FALSE .

    PRINT           reduce using rule 45 (printBody -> FALSE .)
    RETURN          reduce using rule 45 (printBody -> FALSE .)
    PUTS            reduce using rule 45 (printBody -> FALSE .)
    ID              reduce using rule 45 (printBody -> FALSE .)
    IF              reduce using rule 45 (printBody -> FALSE .)
    WHILE           reduce using rule 45 (printBody -> FALSE .)
    FOR             reduce using rule 45 (printBody -> FALSE .)
    $end            reduce using rule 45 (printBody -> FALSE .)
    RBRACE          reduce using rule 45 (printBody -> FALSE .)
    END             reduce using rule 45 (printBody -> FALSE .)
    ELSE            reduce using rule 45 (printBody -> FALSE .)
    ELSIF           reduce using rule 45 (printBody -> FALSE .)


state 49

    (46) printBody -> dataType .

    PRINT           reduce using rule 46 (printBody -> dataType .)
    RETURN          reduce using rule 46 (printBody -> dataType .)
    PUTS            reduce using rule 46 (printBody -> dataType .)
    ID              reduce using rule 46 (printBody -> dataType .)
    IF              reduce using rule 46 (printBody -> dataType .)
    WHILE           reduce using rule 46 (printBody -> dataType .)
    FOR             reduce using rule 46 (printBody -> dataType .)
    $end            reduce using rule 46 (printBody -> dataType .)
    RBRACE          reduce using rule 46 (printBody -> dataType .)
    END             reduce using rule 46 (printBody -> dataType .)
    ELSE            reduce using rule 46 (printBody -> dataType .)
    ELSIF           reduce using rule 46 (printBody -> dataType .)


state 50

    (47) printBody -> condition .

    PRINT           reduce using rule 47 (printBody -> condition .)
    RETURN          reduce using rule 47 (printBody -> condition .)
    PUTS            reduce using rule 47 (printBody -> condition .)
    ID              reduce using rule 47 (printBody -> condition .)
    IF              reduce using rule 47 (printBody -> condition .)
    WHILE           reduce using rule 47 (printBody -> condition .)
    FOR             reduce using rule 47 (printBody -> condition .)
    $end            reduce using rule 47 (printBody -> condition .)
    RBRACE          reduce using rule 47 (printBody -> condition .)
    END             reduce using rule 47 (printBody -> condition .)
    ELSE            reduce using rule 47 (printBody -> condition .)
    ELSIF           reduce using rule 47 (printBody -> condition .)


state 51

    (48) printBody -> method .

    PRINT           reduce using rule 48 (printBody -> method .)
    RETURN          reduce using rule 48 (printBody -> method .)
    PUTS            reduce using rule 48 (printBody -> method .)
    ID              reduce using rule 48 (printBody -> method .)
    IF              reduce using rule 48 (printBody -> method .)
    WHILE           reduce using rule 48 (printBody -> method .)
    FOR             reduce using rule 48 (printBody -> method .)
    $end            reduce using rule 48 (printBody -> method .)
    RBRACE          reduce using rule 48 (printBody -> method .)
    END             reduce using rule 48 (printBody -> method .)
    ELSE            reduce using rule 48 (printBody -> method .)
    ELSIF           reduce using rule 48 (printBody -> method .)


state 52

    (49) printBody -> functionCall .

    PRINT           reduce using rule 49 (printBody -> functionCall .)
    RETURN          reduce using rule 49 (printBody -> functionCall .)
    PUTS            reduce using rule 49 (printBody -> functionCall .)
    ID              reduce using rule 49 (printBody -> functionCall .)
    IF              reduce using rule 49 (printBody -> functionCall .)
    WHILE           reduce using rule 49 (printBody -> functionCall .)
    FOR             reduce using rule 49 (printBody -> functionCall .)
    $end            reduce using rule 49 (printBody -> functionCall .)
    RBRACE          reduce using rule 49 (printBody -> functionCall .)
    END             reduce using rule 49 (printBody -> functionCall .)
    ELSE            reduce using rule 49 (printBody -> functionCall .)
    ELSIF           reduce using rule 49 (printBody -> functionCall .)


state 53

    (122) dataType -> STRING .

    PRINT           reduce using rule 122 (dataType -> STRING .)
    RETURN          reduce using rule 122 (dataType -> STRING .)
    PUTS            reduce using rule 122 (dataType -> STRING .)
    ID              reduce using rule 122 (dataType -> STRING .)
    IF              reduce using rule 122 (dataType -> STRING .)
    WHILE           reduce using rule 122 (dataType -> STRING .)
    FOR             reduce using rule 122 (dataType -> STRING .)
    $end            reduce using rule 122 (dataType -> STRING .)
    RBRACE          reduce using rule 122 (dataType -> STRING .)
    END             reduce using rule 122 (dataType -> STRING .)
    ELSE            reduce using rule 122 (dataType -> STRING .)
    ELSIF           reduce using rule 122 (dataType -> STRING .)


state 54

    (123) dataType -> number .
    (105) conditionValue -> number .

    PRINT           reduce using rule 123 (dataType -> number .)
    RETURN          reduce using rule 123 (dataType -> number .)
    PUTS            reduce using rule 123 (dataType -> number .)
    ID              reduce using rule 123 (dataType -> number .)
    IF              reduce using rule 123 (dataType -> number .)
    WHILE           reduce using rule 123 (dataType -> number .)
    FOR             reduce using rule 123 (dataType -> number .)
    $end            reduce using rule 123 (dataType -> number .)
    RBRACE          reduce using rule 123 (dataType -> number .)
    END             reduce using rule 123 (dataType -> number .)
    ELSE            reduce using rule 123 (dataType -> number .)
    ELSIF           reduce using rule 123 (dataType -> number .)
    GREATERTHAN     reduce using rule 105 (conditionValue -> number .)
    LESSTHAN        reduce using rule 105 (conditionValue -> number .)
    EQUALS          reduce using rule 105 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> number .)


state 55

    (36) bodyLine -> RETURN arguments .

    PRINT           reduce using rule 36 (bodyLine -> RETURN arguments .)
    RETURN          reduce using rule 36 (bodyLine -> RETURN arguments .)
    PUTS            reduce using rule 36 (bodyLine -> RETURN arguments .)
    ID              reduce using rule 36 (bodyLine -> RETURN arguments .)
    IF              reduce using rule 36 (bodyLine -> RETURN arguments .)
    WHILE           reduce using rule 36 (bodyLine -> RETURN arguments .)
    FOR             reduce using rule 36 (bodyLine -> RETURN arguments .)
    $end            reduce using rule 36 (bodyLine -> RETURN arguments .)
    RBRACE          reduce using rule 36 (bodyLine -> RETURN arguments .)
    END             reduce using rule 36 (bodyLine -> RETURN arguments .)
    ELSE            reduce using rule 36 (bodyLine -> RETURN arguments .)
    ELSIF           reduce using rule 36 (bodyLine -> RETURN arguments .)


state 56

    (55) arguments -> argument .
    (56) arguments -> argument . COMMA arguments

    PRINT           reduce using rule 55 (arguments -> argument .)
    RETURN          reduce using rule 55 (arguments -> argument .)
    PUTS            reduce using rule 55 (arguments -> argument .)
    ID              reduce using rule 55 (arguments -> argument .)
    IF              reduce using rule 55 (arguments -> argument .)
    WHILE           reduce using rule 55 (arguments -> argument .)
    FOR             reduce using rule 55 (arguments -> argument .)
    $end            reduce using rule 55 (arguments -> argument .)
    RBRACE          reduce using rule 55 (arguments -> argument .)
    END             reduce using rule 55 (arguments -> argument .)
    ELSE            reduce using rule 55 (arguments -> argument .)
    ELSIF           reduce using rule 55 (arguments -> argument .)
    RPAREN          reduce using rule 55 (arguments -> argument .)
    COMMA           shift and go to state 110


state 57

    (50) argument -> ID .
    (89) attribute -> ID . DOT ID
    (110) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    COMMA           reduce using rule 50 (argument -> ID .)
    PRINT           reduce using rule 50 (argument -> ID .)
    RETURN          reduce using rule 50 (argument -> ID .)
    PUTS            reduce using rule 50 (argument -> ID .)
    ID              reduce using rule 50 (argument -> ID .)
    IF              reduce using rule 50 (argument -> ID .)
    WHILE           reduce using rule 50 (argument -> ID .)
    FOR             reduce using rule 50 (argument -> ID .)
    $end            reduce using rule 50 (argument -> ID .)
    RBRACE          reduce using rule 50 (argument -> ID .)
    END             reduce using rule 50 (argument -> ID .)
    ELSE            reduce using rule 50 (argument -> ID .)
    ELSIF           reduce using rule 50 (argument -> ID .)
    RPAREN          reduce using rule 50 (argument -> ID .)
    DOT             shift and go to state 106
    OPENBRACKET     shift and go to state 105


state 58

    (51) argument -> number .

    COMMA           reduce using rule 51 (argument -> number .)
    PRINT           reduce using rule 51 (argument -> number .)
    RETURN          reduce using rule 51 (argument -> number .)
    PUTS            reduce using rule 51 (argument -> number .)
    ID              reduce using rule 51 (argument -> number .)
    IF              reduce using rule 51 (argument -> number .)
    WHILE           reduce using rule 51 (argument -> number .)
    FOR             reduce using rule 51 (argument -> number .)
    $end            reduce using rule 51 (argument -> number .)
    RBRACE          reduce using rule 51 (argument -> number .)
    END             reduce using rule 51 (argument -> number .)
    ELSE            reduce using rule 51 (argument -> number .)
    ELSIF           reduce using rule 51 (argument -> number .)
    RPAREN          reduce using rule 51 (argument -> number .)


state 59

    (52) argument -> attribute .

    COMMA           reduce using rule 52 (argument -> attribute .)
    PRINT           reduce using rule 52 (argument -> attribute .)
    RETURN          reduce using rule 52 (argument -> attribute .)
    PUTS            reduce using rule 52 (argument -> attribute .)
    ID              reduce using rule 52 (argument -> attribute .)
    IF              reduce using rule 52 (argument -> attribute .)
    WHILE           reduce using rule 52 (argument -> attribute .)
    FOR             reduce using rule 52 (argument -> attribute .)
    $end            reduce using rule 52 (argument -> attribute .)
    RBRACE          reduce using rule 52 (argument -> attribute .)
    END             reduce using rule 52 (argument -> attribute .)
    ELSE            reduce using rule 52 (argument -> attribute .)
    ELSIF           reduce using rule 52 (argument -> attribute .)
    RPAREN          reduce using rule 52 (argument -> attribute .)


state 60

    (53) argument -> indexation .

    COMMA           reduce using rule 53 (argument -> indexation .)
    PRINT           reduce using rule 53 (argument -> indexation .)
    RETURN          reduce using rule 53 (argument -> indexation .)
    PUTS            reduce using rule 53 (argument -> indexation .)
    ID              reduce using rule 53 (argument -> indexation .)
    IF              reduce using rule 53 (argument -> indexation .)
    WHILE           reduce using rule 53 (argument -> indexation .)
    FOR             reduce using rule 53 (argument -> indexation .)
    $end            reduce using rule 53 (argument -> indexation .)
    RBRACE          reduce using rule 53 (argument -> indexation .)
    END             reduce using rule 53 (argument -> indexation .)
    ELSE            reduce using rule 53 (argument -> indexation .)
    ELSIF           reduce using rule 53 (argument -> indexation .)
    RPAREN          reduce using rule 53 (argument -> indexation .)


state 61

    (54) argument -> STRING .

    COMMA           reduce using rule 54 (argument -> STRING .)
    PRINT           reduce using rule 54 (argument -> STRING .)
    RETURN          reduce using rule 54 (argument -> STRING .)
    PUTS            reduce using rule 54 (argument -> STRING .)
    ID              reduce using rule 54 (argument -> STRING .)
    IF              reduce using rule 54 (argument -> STRING .)
    WHILE           reduce using rule 54 (argument -> STRING .)
    FOR             reduce using rule 54 (argument -> STRING .)
    $end            reduce using rule 54 (argument -> STRING .)
    RBRACE          reduce using rule 54 (argument -> STRING .)
    END             reduce using rule 54 (argument -> STRING .)
    ELSE            reduce using rule 54 (argument -> STRING .)
    ELSIF           reduce using rule 54 (argument -> STRING .)
    RPAREN          reduce using rule 54 (argument -> STRING .)


state 62

    (37) bodyLine -> PUTS printBody .

    PRINT           reduce using rule 37 (bodyLine -> PUTS printBody .)
    RETURN          reduce using rule 37 (bodyLine -> PUTS printBody .)
    PUTS            reduce using rule 37 (bodyLine -> PUTS printBody .)
    ID              reduce using rule 37 (bodyLine -> PUTS printBody .)
    IF              reduce using rule 37 (bodyLine -> PUTS printBody .)
    WHILE           reduce using rule 37 (bodyLine -> PUTS printBody .)
    FOR             reduce using rule 37 (bodyLine -> PUTS printBody .)
    $end            reduce using rule 37 (bodyLine -> PUTS printBody .)
    RBRACE          reduce using rule 37 (bodyLine -> PUTS printBody .)
    END             reduce using rule 37 (bodyLine -> PUTS printBody .)
    ELSE            reduce using rule 37 (bodyLine -> PUTS printBody .)
    ELSIF           reduce using rule 37 (bodyLine -> PUTS printBody .)


state 63

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (61) parameters -> . ID
    (62) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 113
    ID              shift and go to state 111

    parameters                     shift and go to state 112

state 64

    (20) assignmentRule -> ID ASSIGNMENT ID .
    (110) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> ID . DOT ID
    (104) conditionValue -> ID .
    (90) operationValue -> ID .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    RETURN          reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    PUTS            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    FOR             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    RBRACE          reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT ID .)
    OPENBRACKET     shift and go to state 105
    DOT             shift and go to state 106
    GREATERTHAN     reduce using rule 104 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 104 (conditionValue -> ID .)
    EQUALS          reduce using rule 104 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 104 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 104 (conditionValue -> ID .)
    PLUS            reduce using rule 90 (operationValue -> ID .)
    MINUS           reduce using rule 90 (operationValue -> ID .)
    POWER           reduce using rule 90 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 90 (operationValue -> ID .)
    DIVISION        reduce using rule 90 (operationValue -> ID .)


state 65

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA . LBRACE instructionBody RBRACE

    LBRACE          shift and go to state 114


state 66

    (74) creationHashmap -> LBRACE . pairs RBRACE
    (75) creationHashmap -> LBRACE . RBRACE
    (77) pairs -> . pair
    (78) pairs -> . pair COMMA pairs
    (76) pair -> . STRING COLON value

    RBRACE          shift and go to state 116
    STRING          shift and go to state 118

    pairs                          shift and go to state 115
    pair                           shift and go to state 117

state 67

    (19) assignmentRule -> ID ASSIGNMENT number .
    (105) conditionValue -> number .
    (91) operationValue -> number .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    RETURN          reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    PUTS            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    FOR             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    RBRACE          reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 105 (conditionValue -> number .)
    LESSTHAN        reduce using rule 105 (conditionValue -> number .)
    EQUALS          reduce using rule 105 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 105 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 105 (conditionValue -> number .)
    PLUS            reduce using rule 91 (operationValue -> number .)
    MINUS           reduce using rule 91 (operationValue -> number .)
    POWER           reduce using rule 91 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> number .)
    DIVISION        reduce using rule 91 (operationValue -> number .)


state 68

    (21) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    RETURN          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    PUTS            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    FOR             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    RBRACE          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT condition .)


state 69

    (22) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RETURN          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    PUTS            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    FOR             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RBRACE          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 70

    (23) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RETURN          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    PUTS            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    FOR             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RBRACE          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 71

    (24) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RETURN          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    PUTS            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    FOR             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RBRACE          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 72

    (25) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    RETURN          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    PUTS            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    FOR             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    RBRACE          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT operations .)


state 73

    (26) assignmentRule -> ID ASSIGNMENT array .

    PRINT           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    RETURN          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    PUTS            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    ID              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    IF              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    WHILE           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    FOR             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    $end            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    RBRACE          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    END             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    ELSE            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)
    ELSIF           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT array .)


state 74

    (27) assignmentRule -> ID ASSIGNMENT indexation .
    (106) conditionValue -> indexation .
    (93) operationValue -> indexation .

    PRINT           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    RETURN          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    PUTS            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    ID              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    IF              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    WHILE           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    FOR             reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    $end            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    RBRACE          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    END             reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSE            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSIF           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT indexation .)
    GREATERTHAN     reduce using rule 106 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 106 (conditionValue -> indexation .)
    EQUALS          reduce using rule 106 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 106 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 106 (conditionValue -> indexation .)
    PLUS            reduce using rule 93 (operationValue -> indexation .)
    MINUS           reduce using rule 93 (operationValue -> indexation .)
    POWER           reduce using rule 93 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 93 (operationValue -> indexation .)
    DIVISION        reduce using rule 93 (operationValue -> indexation .)


state 75

    (28) assignmentRule -> ID ASSIGNMENT attribute .
    (107) conditionValue -> attribute .
    (92) operationValue -> attribute .

    PRINT           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    RETURN          reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    PUTS            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    ID              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    IF              reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    WHILE           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    FOR             reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    $end            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    RBRACE          reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    END             reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSE            reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSIF           reduce using rule 28 (assignmentRule -> ID ASSIGNMENT attribute .)
    GREATERTHAN     reduce using rule 107 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 107 (conditionValue -> attribute .)
    EQUALS          reduce using rule 107 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 107 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 107 (conditionValue -> attribute .)
    PLUS            reduce using rule 92 (operationValue -> attribute .)
    MINUS           reduce using rule 92 (operationValue -> attribute .)
    POWER           reduce using rule 92 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> attribute .)
    DIVISION        reduce using rule 92 (operationValue -> attribute .)


state 76

    (29) assignmentRule -> ID ASSIGNMENT input .

    PRINT           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    RETURN          reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    PUTS            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    ID              reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    IF              reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    WHILE           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    FOR             reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    $end            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    RBRACE          reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    END             reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    ELSE            reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)
    ELSIF           reduce using rule 29 (assignmentRule -> ID ASSIGNMENT input .)


state 77

    (70) creationTDA -> creationStack .

    PRINT           reduce using rule 70 (creationTDA -> creationStack .)
    RETURN          reduce using rule 70 (creationTDA -> creationStack .)
    PUTS            reduce using rule 70 (creationTDA -> creationStack .)
    ID              reduce using rule 70 (creationTDA -> creationStack .)
    IF              reduce using rule 70 (creationTDA -> creationStack .)
    WHILE           reduce using rule 70 (creationTDA -> creationStack .)
    FOR             reduce using rule 70 (creationTDA -> creationStack .)
    $end            reduce using rule 70 (creationTDA -> creationStack .)
    RBRACE          reduce using rule 70 (creationTDA -> creationStack .)
    END             reduce using rule 70 (creationTDA -> creationStack .)
    ELSE            reduce using rule 70 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 70 (creationTDA -> creationStack .)


state 78

    (71) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 71 (creationTDA -> creationLinkedList .)
    RETURN          reduce using rule 71 (creationTDA -> creationLinkedList .)
    PUTS            reduce using rule 71 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 71 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 71 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 71 (creationTDA -> creationLinkedList .)
    FOR             reduce using rule 71 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 71 (creationTDA -> creationLinkedList .)
    RBRACE          reduce using rule 71 (creationTDA -> creationLinkedList .)
    END             reduce using rule 71 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 71 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 71 (creationTDA -> creationLinkedList .)


state 79

    (72) creationTDA -> creationHashmap .

    PRINT           reduce using rule 72 (creationTDA -> creationHashmap .)
    RETURN          reduce using rule 72 (creationTDA -> creationHashmap .)
    PUTS            reduce using rule 72 (creationTDA -> creationHashmap .)
    ID              reduce using rule 72 (creationTDA -> creationHashmap .)
    IF              reduce using rule 72 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 72 (creationTDA -> creationHashmap .)
    FOR             reduce using rule 72 (creationTDA -> creationHashmap .)
    $end            reduce using rule 72 (creationTDA -> creationHashmap .)
    RBRACE          reduce using rule 72 (creationTDA -> creationHashmap .)
    END             reduce using rule 72 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 72 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 72 (creationTDA -> creationHashmap .)


state 80

    (96) operations -> operation .
    (97) operations -> operation . arithmeticOperator operations
    (98) operations -> operation . arithmeticOperator operationValue
    (84) arithmeticOperator -> . PLUS
    (85) arithmeticOperator -> . MINUS
    (86) arithmeticOperator -> . POWER
    (87) arithmeticOperator -> . MULTIPLICATION
    (88) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 96 (operations -> operation .)
    RETURN          reduce using rule 96 (operations -> operation .)
    PUTS            reduce using rule 96 (operations -> operation .)
    ID              reduce using rule 96 (operations -> operation .)
    IF              reduce using rule 96 (operations -> operation .)
    WHILE           reduce using rule 96 (operations -> operation .)
    FOR             reduce using rule 96 (operations -> operation .)
    $end            reduce using rule 96 (operations -> operation .)
    RBRACE          reduce using rule 96 (operations -> operation .)
    END             reduce using rule 96 (operations -> operation .)
    ELSE            reduce using rule 96 (operations -> operation .)
    ELSIF           reduce using rule 96 (operations -> operation .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    POWER           shift and go to state 122
    MULTIPLICATION  shift and go to state 123
    DIVISION        shift and go to state 124

    arithmeticOperator             shift and go to state 119

state 81

    (99) operations -> operationValue . arithmeticOperator operation
    (94) operation -> operationValue . arithmeticOperator operationValue
    (84) arithmeticOperator -> . PLUS
    (85) arithmeticOperator -> . MINUS
    (86) arithmeticOperator -> . POWER
    (87) arithmeticOperator -> . MULTIPLICATION
    (88) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    POWER           shift and go to state 122
    MULTIPLICATION  shift and go to state 123
    DIVISION        shift and go to state 124

    arithmeticOperator             shift and go to state 125

state 82

    (100) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (101) array -> OPENBRACKET . CLOSEDBRACKET
    (68) creationStack -> OPENBRACKET . CLOSEDBRACKET
    (102) element_list -> . conditionValue
    (103) element_list -> . element_list COMMA conditionValue
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    CLOSEDBRACKET   shift and go to state 127
    ID              shift and go to state 37
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    element_list                   shift and go to state 126
    conditionValue                 shift and go to state 128
    number                         shift and go to state 38
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 83

    (58) input -> GETS . DOT CHOMP DOT TO_F
    (59) input -> GETS . DOT CHOMP DOT TO_I
    (60) input -> GETS . DOT CHOMP

    DOT             shift and go to state 129


state 84

    (67) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 130


state 85

    (69) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 131


state 86

    (73) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 132


state 87

    (95) operation -> LPAREN . operationValue arithmeticOperator operationValue RPAREN
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 134
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    operationValue                 shift and go to state 133
    number                         shift and go to state 135
    attribute                      shift and go to state 136
    indexation                     shift and go to state 137

state 88

    (63) functionCall -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 138


state 89

    (64) functionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    FOR             reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 64 (functionCall -> ID LPAREN RPAREN .)


state 90

    (108) arrayConcat -> ID ARRAYAPPEND ID .

    PRINT           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    RETURN          reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    PUTS            reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    ID              reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    IF              reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    WHILE           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    FOR             reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    $end            reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    RBRACE          reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    END             reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSE            reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSIF           reduce using rule 108 (arrayConcat -> ID ARRAYAPPEND ID .)


state 91

    (109) arrayConcat -> ID ARRAYAPPEND number .

    PRINT           reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    RETURN          reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    PUTS            reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    ID              reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    IF              reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    WHILE           reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    FOR             reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    $end            reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    RBRACE          reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    END             reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSE            reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSIF           reduce using rule 109 (arrayConcat -> ID ARRAYAPPEND number .)


state 92

    (63) functionCall -> ID . LPAREN arguments RPAREN
    (64) functionCall -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 24


state 93

    (57) method -> ID DOT functionCall .

    PRINT           reduce using rule 57 (method -> ID DOT functionCall .)
    RETURN          reduce using rule 57 (method -> ID DOT functionCall .)
    PUTS            reduce using rule 57 (method -> ID DOT functionCall .)
    ID              reduce using rule 57 (method -> ID DOT functionCall .)
    IF              reduce using rule 57 (method -> ID DOT functionCall .)
    WHILE           reduce using rule 57 (method -> ID DOT functionCall .)
    FOR             reduce using rule 57 (method -> ID DOT functionCall .)
    $end            reduce using rule 57 (method -> ID DOT functionCall .)
    RBRACE          reduce using rule 57 (method -> ID DOT functionCall .)
    END             reduce using rule 57 (method -> ID DOT functionCall .)
    ELSE            reduce using rule 57 (method -> ID DOT functionCall .)
    ELSIF           reduce using rule 57 (method -> ID DOT functionCall .)


state 94

    (118) unariOperator -> ID ASSIGNDECREMENT number .

    PRINT           reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    RETURN          reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    PUTS            reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    ID              reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    IF              reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    WHILE           reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    FOR             reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    $end            reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    RBRACE          reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    END             reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSE            reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)
    ELSIF           reduce using rule 118 (unariOperator -> ID ASSIGNDECREMENT number .)


state 95

    (119) unariOperator -> ID ASSIGNINCREMENT number .

    PRINT           reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    RETURN          reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    PUTS            reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    ID              reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    IF              reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    WHILE           reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    FOR             reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    $end            reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    RBRACE          reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    END             reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSE            reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)
    ELSIF           reduce using rule 119 (unariOperator -> ID ASSIGNINCREMENT number .)


state 96

    (19) assignmentRule -> ID ASSIGNMENT . number
    (20) assignmentRule -> ID ASSIGNMENT . ID
    (21) assignmentRule -> ID ASSIGNMENT . condition
    (22) assignmentRule -> ID ASSIGNMENT . TRUE
    (23) assignmentRule -> ID ASSIGNMENT . FALSE
    (24) assignmentRule -> ID ASSIGNMENT . creationTDA
    (25) assignmentRule -> ID ASSIGNMENT . operations
    (26) assignmentRule -> ID ASSIGNMENT . array
    (27) assignmentRule -> ID ASSIGNMENT . indexation
    (28) assignmentRule -> ID ASSIGNMENT . attribute
    (29) assignmentRule -> ID ASSIGNMENT . input
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (112) condition -> . conditionValue comparator conditionValue
    (70) creationTDA -> . creationStack
    (71) creationTDA -> . creationLinkedList
    (72) creationTDA -> . creationHashmap
    (96) operations -> . operation
    (97) operations -> . operation arithmeticOperator operations
    (98) operations -> . operation arithmeticOperator operationValue
    (99) operations -> . operationValue arithmeticOperator operation
    (100) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (101) array -> . OPENBRACKET CLOSEDBRACKET
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID
    (58) input -> . GETS DOT CHOMP DOT TO_F
    (59) input -> . GETS DOT CHOMP DOT TO_I
    (60) input -> . GETS DOT CHOMP
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (67) creationStack -> . STACK DOT NEW
    (68) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (69) creationLinkedList -> . LINKEDLIST DOT NEW
    (73) creationHashmap -> . HASH DOT NEW
    (74) creationHashmap -> . LBRACE pairs RBRACE
    (75) creationHashmap -> . LBRACE RBRACE
    (94) operation -> . operationValue arithmeticOperator operationValue
    (95) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation

    ID              shift and go to state 64
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42
    OPENBRACKET     shift and go to state 82
    GETS            shift and go to state 83
    STACK           shift and go to state 84
    LINKEDLIST      shift and go to state 85
    HASH            shift and go to state 86
    LBRACE          shift and go to state 66
    LPAREN          shift and go to state 87

    number                         shift and go to state 67
    condition                      shift and go to state 68
    creationTDA                    shift and go to state 71
    operations                     shift and go to state 72
    array                          shift and go to state 73
    indexation                     shift and go to state 74
    attribute                      shift and go to state 75
    input                          shift and go to state 76
    conditionValue                 shift and go to state 36
    creationStack                  shift and go to state 77
    creationLinkedList             shift and go to state 78
    creationHashmap                shift and go to state 79
    operation                      shift and go to state 80
    operationValue                 shift and go to state 81

state 97

    (5) lambda_expression -> LAMBDA LBRACE instructionBody . RBRACE

    RBRACE          shift and go to state 139


state 98

    (8) conditional -> IF condition instructionBody . END
    (9) conditional -> IF condition instructionBody . conditionalElsif END
    (10) conditional -> IF condition instructionBody . ELSE instructionBody END
    (11) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (13) conditionalElsif -> . elsif
    (14) conditionalElsif -> . elsif conditionalElsif
    (12) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 140
    ELSE            shift and go to state 142
    ELSIF           shift and go to state 144

    conditionalElsif               shift and go to state 141
    elsif                          shift and go to state 143

state 99

    (112) condition -> conditionValue comparator . conditionValue
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 37
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    conditionValue                 shift and go to state 145
    number                         shift and go to state 38
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 100

    (113) comparator -> GREATERTHAN .

    ID              reduce using rule 113 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 113 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 113 (comparator -> GREATERTHAN .)


state 101

    (114) comparator -> LESSTHAN .

    ID              reduce using rule 114 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 114 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 114 (comparator -> LESSTHAN .)


state 102

    (115) comparator -> EQUALS .

    ID              reduce using rule 115 (comparator -> EQUALS .)
    FLOAT           reduce using rule 115 (comparator -> EQUALS .)
    INTEGER         reduce using rule 115 (comparator -> EQUALS .)


state 103

    (116) comparator -> GREATEROREQUALS .

    ID              reduce using rule 116 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 116 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 116 (comparator -> GREATEROREQUALS .)


state 104

    (117) comparator -> LESSOREQUALS .

    ID              reduce using rule 117 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 117 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 117 (comparator -> LESSOREQUALS .)


state 105

    (110) indexation -> ID OPENBRACKET . element_list CLOSEDBRACKET
    (111) indexation -> ID OPENBRACKET . operation CLOSEDBRACKET
    (102) element_list -> . conditionValue
    (103) element_list -> . element_list COMMA conditionValue
    (94) operation -> . operationValue arithmeticOperator operationValue
    (95) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    LPAREN          shift and go to state 87
    ID              shift and go to state 146
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    element_list                   shift and go to state 147
    operation                      shift and go to state 148
    conditionValue                 shift and go to state 128
    operationValue                 shift and go to state 149
    number                         shift and go to state 150
    indexation                     shift and go to state 151
    attribute                      shift and go to state 152

state 106

    (89) attribute -> ID DOT . ID

    ID              shift and go to state 153


state 107

    (16) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 154


state 108

    (18) forLoop -> FOR ID IN . LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    LPAREN          shift and go to state 155


state 109

    (57) method -> ID DOT . functionCall
    (89) attribute -> ID DOT . ID
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 156

    functionCall                   shift and go to state 93

state 110

    (56) arguments -> argument COMMA . arguments
    (55) arguments -> . argument
    (56) arguments -> . argument COMMA arguments
    (50) argument -> . ID
    (51) argument -> . number
    (52) argument -> . attribute
    (53) argument -> . indexation
    (54) argument -> . STRING
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 57
    STRING          shift and go to state 61
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    argument                       shift and go to state 56
    arguments                      shift and go to state 157
    number                         shift and go to state 58
    attribute                      shift and go to state 59
    indexation                     shift and go to state 60

state 111

    (61) parameters -> ID .
    (62) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 61 (parameters -> ID .)
    COMMA           shift and go to state 158


state 112

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 159


state 113

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 160


state 114

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE . instructionBody RBRACE
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 161
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 115

    (74) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 162


state 116

    (75) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    RETURN          reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    PUTS            reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    FOR             reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    RBRACE          reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 75 (creationHashmap -> LBRACE RBRACE .)


state 117

    (77) pairs -> pair .
    (78) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 77 (pairs -> pair .)
    COMMA           shift and go to state 163


state 118

    (76) pair -> STRING . COLON value

    COLON           shift and go to state 164


state 119

    (97) operations -> operation arithmeticOperator . operations
    (98) operations -> operation arithmeticOperator . operationValue
    (96) operations -> . operation
    (97) operations -> . operation arithmeticOperator operations
    (98) operations -> . operation arithmeticOperator operationValue
    (99) operations -> . operationValue arithmeticOperator operation
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation
    (94) operation -> . operationValue arithmeticOperator operationValue
    (95) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 134
    LPAREN          shift and go to state 87
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    operation                      shift and go to state 80
    operations                     shift and go to state 165
    operationValue                 shift and go to state 166
    number                         shift and go to state 135
    attribute                      shift and go to state 136
    indexation                     shift and go to state 137

state 120

    (84) arithmeticOperator -> PLUS .

    ID              reduce using rule 84 (arithmeticOperator -> PLUS .)
    LPAREN          reduce using rule 84 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 84 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 84 (arithmeticOperator -> PLUS .)


state 121

    (85) arithmeticOperator -> MINUS .

    ID              reduce using rule 85 (arithmeticOperator -> MINUS .)
    LPAREN          reduce using rule 85 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 85 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 85 (arithmeticOperator -> MINUS .)


state 122

    (86) arithmeticOperator -> POWER .

    ID              reduce using rule 86 (arithmeticOperator -> POWER .)
    LPAREN          reduce using rule 86 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 86 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 86 (arithmeticOperator -> POWER .)


state 123

    (87) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 87 (arithmeticOperator -> MULTIPLICATION .)
    LPAREN          reduce using rule 87 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 87 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 87 (arithmeticOperator -> MULTIPLICATION .)


state 124

    (88) arithmeticOperator -> DIVISION .

    ID              reduce using rule 88 (arithmeticOperator -> DIVISION .)
    LPAREN          reduce using rule 88 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 88 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 88 (arithmeticOperator -> DIVISION .)


state 125

    (99) operations -> operationValue arithmeticOperator . operation
    (94) operation -> operationValue arithmeticOperator . operationValue
    (94) operation -> . operationValue arithmeticOperator operationValue
    (95) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    LPAREN          shift and go to state 87
    ID              shift and go to state 134
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    operationValue                 shift and go to state 167
    operation                      shift and go to state 168
    number                         shift and go to state 135
    attribute                      shift and go to state 136
    indexation                     shift and go to state 137

state 126

    (100) array -> OPENBRACKET element_list . CLOSEDBRACKET
    (103) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 169
    COMMA           shift and go to state 170


state 127

    (101) array -> OPENBRACKET CLOSEDBRACKET .
    (68) creationStack -> OPENBRACKET CLOSEDBRACKET .

  ! reduce/reduce conflict for PRINT resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for $end resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSIF resolved using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PRINT           reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RETURN          reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PUTS            reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    FOR             reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RBRACE          reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 68 (creationStack -> OPENBRACKET CLOSEDBRACKET .)

  ! PRINT           [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RETURN          [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! PUTS            [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ID              [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! IF              [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! WHILE           [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! FOR             [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! $end            [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RBRACE          [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! END             [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSE            [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSIF           [ reduce using rule 101 (array -> OPENBRACKET CLOSEDBRACKET .) ]


state 128

    (102) element_list -> conditionValue .

    CLOSEDBRACKET   reduce using rule 102 (element_list -> conditionValue .)
    COMMA           reduce using rule 102 (element_list -> conditionValue .)


state 129

    (58) input -> GETS DOT . CHOMP DOT TO_F
    (59) input -> GETS DOT . CHOMP DOT TO_I
    (60) input -> GETS DOT . CHOMP

    CHOMP           shift and go to state 171


state 130

    (67) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 172


state 131

    (69) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 173


state 132

    (73) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 174


state 133

    (95) operation -> LPAREN operationValue . arithmeticOperator operationValue RPAREN
    (84) arithmeticOperator -> . PLUS
    (85) arithmeticOperator -> . MINUS
    (86) arithmeticOperator -> . POWER
    (87) arithmeticOperator -> . MULTIPLICATION
    (88) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    POWER           shift and go to state 122
    MULTIPLICATION  shift and go to state 123
    DIVISION        shift and go to state 124

    arithmeticOperator             shift and go to state 175

state 134

    (90) operationValue -> ID .
    (89) attribute -> ID . DOT ID
    (110) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    PLUS            reduce using rule 90 (operationValue -> ID .)
    MINUS           reduce using rule 90 (operationValue -> ID .)
    POWER           reduce using rule 90 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 90 (operationValue -> ID .)
    DIVISION        reduce using rule 90 (operationValue -> ID .)
    PRINT           reduce using rule 90 (operationValue -> ID .)
    RETURN          reduce using rule 90 (operationValue -> ID .)
    PUTS            reduce using rule 90 (operationValue -> ID .)
    ID              reduce using rule 90 (operationValue -> ID .)
    IF              reduce using rule 90 (operationValue -> ID .)
    WHILE           reduce using rule 90 (operationValue -> ID .)
    FOR             reduce using rule 90 (operationValue -> ID .)
    $end            reduce using rule 90 (operationValue -> ID .)
    RBRACE          reduce using rule 90 (operationValue -> ID .)
    END             reduce using rule 90 (operationValue -> ID .)
    ELSE            reduce using rule 90 (operationValue -> ID .)
    ELSIF           reduce using rule 90 (operationValue -> ID .)
    RPAREN          reduce using rule 90 (operationValue -> ID .)
    CLOSEDBRACKET   reduce using rule 90 (operationValue -> ID .)
    DOT             shift and go to state 106
    OPENBRACKET     shift and go to state 105


state 135

    (91) operationValue -> number .

    PLUS            reduce using rule 91 (operationValue -> number .)
    MINUS           reduce using rule 91 (operationValue -> number .)
    POWER           reduce using rule 91 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> number .)
    DIVISION        reduce using rule 91 (operationValue -> number .)
    PRINT           reduce using rule 91 (operationValue -> number .)
    RETURN          reduce using rule 91 (operationValue -> number .)
    PUTS            reduce using rule 91 (operationValue -> number .)
    ID              reduce using rule 91 (operationValue -> number .)
    IF              reduce using rule 91 (operationValue -> number .)
    WHILE           reduce using rule 91 (operationValue -> number .)
    FOR             reduce using rule 91 (operationValue -> number .)
    $end            reduce using rule 91 (operationValue -> number .)
    RBRACE          reduce using rule 91 (operationValue -> number .)
    END             reduce using rule 91 (operationValue -> number .)
    ELSE            reduce using rule 91 (operationValue -> number .)
    ELSIF           reduce using rule 91 (operationValue -> number .)
    RPAREN          reduce using rule 91 (operationValue -> number .)
    CLOSEDBRACKET   reduce using rule 91 (operationValue -> number .)


state 136

    (92) operationValue -> attribute .

    PLUS            reduce using rule 92 (operationValue -> attribute .)
    MINUS           reduce using rule 92 (operationValue -> attribute .)
    POWER           reduce using rule 92 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> attribute .)
    DIVISION        reduce using rule 92 (operationValue -> attribute .)
    PRINT           reduce using rule 92 (operationValue -> attribute .)
    RETURN          reduce using rule 92 (operationValue -> attribute .)
    PUTS            reduce using rule 92 (operationValue -> attribute .)
    ID              reduce using rule 92 (operationValue -> attribute .)
    IF              reduce using rule 92 (operationValue -> attribute .)
    WHILE           reduce using rule 92 (operationValue -> attribute .)
    FOR             reduce using rule 92 (operationValue -> attribute .)
    $end            reduce using rule 92 (operationValue -> attribute .)
    RBRACE          reduce using rule 92 (operationValue -> attribute .)
    END             reduce using rule 92 (operationValue -> attribute .)
    ELSE            reduce using rule 92 (operationValue -> attribute .)
    ELSIF           reduce using rule 92 (operationValue -> attribute .)
    RPAREN          reduce using rule 92 (operationValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 92 (operationValue -> attribute .)


state 137

    (93) operationValue -> indexation .

    PLUS            reduce using rule 93 (operationValue -> indexation .)
    MINUS           reduce using rule 93 (operationValue -> indexation .)
    POWER           reduce using rule 93 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 93 (operationValue -> indexation .)
    DIVISION        reduce using rule 93 (operationValue -> indexation .)
    PRINT           reduce using rule 93 (operationValue -> indexation .)
    RETURN          reduce using rule 93 (operationValue -> indexation .)
    PUTS            reduce using rule 93 (operationValue -> indexation .)
    ID              reduce using rule 93 (operationValue -> indexation .)
    IF              reduce using rule 93 (operationValue -> indexation .)
    WHILE           reduce using rule 93 (operationValue -> indexation .)
    FOR             reduce using rule 93 (operationValue -> indexation .)
    $end            reduce using rule 93 (operationValue -> indexation .)
    RBRACE          reduce using rule 93 (operationValue -> indexation .)
    END             reduce using rule 93 (operationValue -> indexation .)
    ELSE            reduce using rule 93 (operationValue -> indexation .)
    ELSIF           reduce using rule 93 (operationValue -> indexation .)
    RPAREN          reduce using rule 93 (operationValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 93 (operationValue -> indexation .)


state 138

    (63) functionCall -> ID LPAREN arguments RPAREN .

    PRINT           reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    PUTS            reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    ID              reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    IF              reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    FOR             reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    END             reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSE            reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSIF           reduce using rule 63 (functionCall -> ID LPAREN arguments RPAREN .)


state 139

    (5) lambda_expression -> LAMBDA LBRACE instructionBody RBRACE .

    $end            reduce using rule 5 (lambda_expression -> LAMBDA LBRACE instructionBody RBRACE .)


state 140

    (8) conditional -> IF condition instructionBody END .

    $end            reduce using rule 8 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody END .)
    RETURN          reduce using rule 8 (conditional -> IF condition instructionBody END .)
    PUTS            reduce using rule 8 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody END .)
    IF              reduce using rule 8 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody END .)
    FOR             reduce using rule 8 (conditional -> IF condition instructionBody END .)
    RBRACE          reduce using rule 8 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody END .)


state 141

    (9) conditional -> IF condition instructionBody conditionalElsif . END
    (11) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 176
    ELSE            shift and go to state 177


state 142

    (10) conditional -> IF condition instructionBody ELSE . instructionBody END
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 178
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 143

    (13) conditionalElsif -> elsif .
    (14) conditionalElsif -> elsif . conditionalElsif
    (13) conditionalElsif -> . elsif
    (14) conditionalElsif -> . elsif conditionalElsif
    (12) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 13 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 144

    elsif                          shift and go to state 143
    conditionalElsif               shift and go to state 179

state 144

    (12) elsif -> ELSIF . condition instructionBody
    (112) condition -> . conditionValue comparator conditionValue
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 37
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    condition                      shift and go to state 180
    conditionValue                 shift and go to state 36
    number                         shift and go to state 38
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 145

    (112) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    RETURN          reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    PUTS            reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    FOR             reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    RBRACE          reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 112 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 112 (condition -> conditionValue comparator conditionValue .)


state 146

    (104) conditionValue -> ID .
    (90) operationValue -> ID .
    (110) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> ID . DOT ID

    CLOSEDBRACKET   reduce using rule 104 (conditionValue -> ID .)
    COMMA           reduce using rule 104 (conditionValue -> ID .)
    PLUS            reduce using rule 90 (operationValue -> ID .)
    MINUS           reduce using rule 90 (operationValue -> ID .)
    POWER           reduce using rule 90 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 90 (operationValue -> ID .)
    DIVISION        reduce using rule 90 (operationValue -> ID .)
    OPENBRACKET     shift and go to state 105
    DOT             shift and go to state 106


state 147

    (110) indexation -> ID OPENBRACKET element_list . CLOSEDBRACKET
    (103) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 181
    COMMA           shift and go to state 170


state 148

    (111) indexation -> ID OPENBRACKET operation . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 182


state 149

    (94) operation -> operationValue . arithmeticOperator operationValue
    (84) arithmeticOperator -> . PLUS
    (85) arithmeticOperator -> . MINUS
    (86) arithmeticOperator -> . POWER
    (87) arithmeticOperator -> . MULTIPLICATION
    (88) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    POWER           shift and go to state 122
    MULTIPLICATION  shift and go to state 123
    DIVISION        shift and go to state 124

    arithmeticOperator             shift and go to state 183

state 150

    (105) conditionValue -> number .
    (91) operationValue -> number .

    CLOSEDBRACKET   reduce using rule 105 (conditionValue -> number .)
    COMMA           reduce using rule 105 (conditionValue -> number .)
    PLUS            reduce using rule 91 (operationValue -> number .)
    MINUS           reduce using rule 91 (operationValue -> number .)
    POWER           reduce using rule 91 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 91 (operationValue -> number .)
    DIVISION        reduce using rule 91 (operationValue -> number .)


state 151

    (106) conditionValue -> indexation .
    (93) operationValue -> indexation .

    CLOSEDBRACKET   reduce using rule 106 (conditionValue -> indexation .)
    COMMA           reduce using rule 106 (conditionValue -> indexation .)
    PLUS            reduce using rule 93 (operationValue -> indexation .)
    MINUS           reduce using rule 93 (operationValue -> indexation .)
    POWER           reduce using rule 93 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 93 (operationValue -> indexation .)
    DIVISION        reduce using rule 93 (operationValue -> indexation .)


state 152

    (107) conditionValue -> attribute .
    (92) operationValue -> attribute .

    CLOSEDBRACKET   reduce using rule 107 (conditionValue -> attribute .)
    COMMA           reduce using rule 107 (conditionValue -> attribute .)
    PLUS            reduce using rule 92 (operationValue -> attribute .)
    MINUS           reduce using rule 92 (operationValue -> attribute .)
    POWER           reduce using rule 92 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 92 (operationValue -> attribute .)
    DIVISION        reduce using rule 92 (operationValue -> attribute .)


state 153

    (89) attribute -> ID DOT ID .

    GREATERTHAN     reduce using rule 89 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 89 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 89 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 89 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 89 (attribute -> ID DOT ID .)
    COMMA           reduce using rule 89 (attribute -> ID DOT ID .)
    PRINT           reduce using rule 89 (attribute -> ID DOT ID .)
    RETURN          reduce using rule 89 (attribute -> ID DOT ID .)
    PUTS            reduce using rule 89 (attribute -> ID DOT ID .)
    ID              reduce using rule 89 (attribute -> ID DOT ID .)
    IF              reduce using rule 89 (attribute -> ID DOT ID .)
    WHILE           reduce using rule 89 (attribute -> ID DOT ID .)
    FOR             reduce using rule 89 (attribute -> ID DOT ID .)
    $end            reduce using rule 89 (attribute -> ID DOT ID .)
    RBRACE          reduce using rule 89 (attribute -> ID DOT ID .)
    END             reduce using rule 89 (attribute -> ID DOT ID .)
    ELSE            reduce using rule 89 (attribute -> ID DOT ID .)
    ELSIF           reduce using rule 89 (attribute -> ID DOT ID .)
    PLUS            reduce using rule 89 (attribute -> ID DOT ID .)
    MINUS           reduce using rule 89 (attribute -> ID DOT ID .)
    POWER           reduce using rule 89 (attribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 89 (attribute -> ID DOT ID .)
    DIVISION        reduce using rule 89 (attribute -> ID DOT ID .)
    RPAREN          reduce using rule 89 (attribute -> ID DOT ID .)
    CLOSEDBRACKET   reduce using rule 89 (attribute -> ID DOT ID .)


state 154

    (16) whileLoop -> WHILE condition instructionBody END .

    $end            reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    RETURN          reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    PUTS            reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    WHILE           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    FOR             reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    RBRACE          reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 16 (whileLoop -> WHILE condition instructionBody END .)


state 155

    (18) forLoop -> FOR ID IN LPAREN . INTEGER DOT DOT INTEGER RPAREN instructionBody END

    INTEGER         shift and go to state 184


state 156

    (89) attribute -> ID DOT ID .
    (63) functionCall -> ID . LPAREN arguments RPAREN
    (64) functionCall -> ID . LPAREN RPAREN

    GREATERTHAN     reduce using rule 89 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 89 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 89 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 89 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 89 (attribute -> ID DOT ID .)
    LPAREN          shift and go to state 24


state 157

    (56) arguments -> argument COMMA arguments .

    PRINT           reduce using rule 56 (arguments -> argument COMMA arguments .)
    RETURN          reduce using rule 56 (arguments -> argument COMMA arguments .)
    PUTS            reduce using rule 56 (arguments -> argument COMMA arguments .)
    ID              reduce using rule 56 (arguments -> argument COMMA arguments .)
    IF              reduce using rule 56 (arguments -> argument COMMA arguments .)
    WHILE           reduce using rule 56 (arguments -> argument COMMA arguments .)
    FOR             reduce using rule 56 (arguments -> argument COMMA arguments .)
    $end            reduce using rule 56 (arguments -> argument COMMA arguments .)
    RBRACE          reduce using rule 56 (arguments -> argument COMMA arguments .)
    END             reduce using rule 56 (arguments -> argument COMMA arguments .)
    ELSE            reduce using rule 56 (arguments -> argument COMMA arguments .)
    ELSIF           reduce using rule 56 (arguments -> argument COMMA arguments .)
    RPAREN          reduce using rule 56 (arguments -> argument COMMA arguments .)


state 158

    (62) parameters -> ID COMMA . parameters
    (61) parameters -> . ID
    (62) parameters -> . ID COMMA parameters

    ID              shift and go to state 111

    parameters                     shift and go to state 185

state 159

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 186
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 160

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 161

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody . RBRACE

    RBRACE          shift and go to state 187


state 162

    (74) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    RETURN          reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    PUTS            reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    FOR             reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 74 (creationHashmap -> LBRACE pairs RBRACE .)


state 163

    (78) pairs -> pair COMMA . pairs
    (77) pairs -> . pair
    (78) pairs -> . pair COMMA pairs
    (76) pair -> . STRING COLON value

    STRING          shift and go to state 118

    pair                           shift and go to state 117
    pairs                          shift and go to state 188

state 164

    (76) pair -> STRING COLON . value
    (79) value -> . ID
    (80) value -> . STRING
    (81) value -> . number
    (82) value -> . LBRACE pairs RBRACE
    (83) value -> . LBRACE RBRACE
    (120) number -> . FLOAT
    (121) number -> . INTEGER

    ID              shift and go to state 191
    STRING          shift and go to state 189
    LBRACE          shift and go to state 193
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    value                          shift and go to state 190
    number                         shift and go to state 192

state 165

    (97) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    RETURN          reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    PUTS            reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    FOR             reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    RBRACE          reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 97 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 97 (operations -> operation arithmeticOperator operations .)


state 166

    (98) operations -> operation arithmeticOperator operationValue .
    (99) operations -> operationValue . arithmeticOperator operation
    (94) operation -> operationValue . arithmeticOperator operationValue
    (84) arithmeticOperator -> . PLUS
    (85) arithmeticOperator -> . MINUS
    (86) arithmeticOperator -> . POWER
    (87) arithmeticOperator -> . MULTIPLICATION
    (88) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    RETURN          reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    PUTS            reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    ID              reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    IF              reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    WHILE           reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    FOR             reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    $end            reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    RBRACE          reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    END             reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    ELSE            reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    ELSIF           reduce using rule 98 (operations -> operation arithmeticOperator operationValue .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    POWER           shift and go to state 122
    MULTIPLICATION  shift and go to state 123
    DIVISION        shift and go to state 124

    arithmeticOperator             shift and go to state 125

state 167

    (94) operation -> operationValue arithmeticOperator operationValue .
    (94) operation -> operationValue . arithmeticOperator operationValue
    (84) arithmeticOperator -> . PLUS
    (85) arithmeticOperator -> . MINUS
    (86) arithmeticOperator -> . POWER
    (87) arithmeticOperator -> . MULTIPLICATION
    (88) arithmeticOperator -> . DIVISION

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    PRINT           reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    FOR             reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    RBRACE          reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    POWER           shift and go to state 122
    MULTIPLICATION  shift and go to state 123
    DIVISION        shift and go to state 124

  ! PLUS            [ reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MINUS           [ reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! POWER           [ reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MULTIPLICATION  [ reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! DIVISION        [ reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .) ]

    arithmeticOperator             shift and go to state 183

state 168

    (99) operations -> operationValue arithmeticOperator operation .

    PRINT           reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    RETURN          reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    PUTS            reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    ID              reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    IF              reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    WHILE           reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    FOR             reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    $end            reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    RBRACE          reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    END             reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    ELSE            reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)
    ELSIF           reduce using rule 99 (operations -> operationValue arithmeticOperator operation .)


state 169

    (100) array -> OPENBRACKET element_list CLOSEDBRACKET .

    PRINT           reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    FOR             reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RBRACE          reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 100 (array -> OPENBRACKET element_list CLOSEDBRACKET .)


state 170

    (103) element_list -> element_list COMMA . conditionValue
    (104) conditionValue -> . ID
    (105) conditionValue -> . number
    (106) conditionValue -> . indexation
    (107) conditionValue -> . attribute
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (89) attribute -> . ID DOT ID

    ID              shift and go to state 37
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    conditionValue                 shift and go to state 194
    number                         shift and go to state 38
    indexation                     shift and go to state 39
    attribute                      shift and go to state 40

state 171

    (58) input -> GETS DOT CHOMP . DOT TO_F
    (59) input -> GETS DOT CHOMP . DOT TO_I
    (60) input -> GETS DOT CHOMP .

    DOT             shift and go to state 195
    PRINT           reduce using rule 60 (input -> GETS DOT CHOMP .)
    RETURN          reduce using rule 60 (input -> GETS DOT CHOMP .)
    PUTS            reduce using rule 60 (input -> GETS DOT CHOMP .)
    ID              reduce using rule 60 (input -> GETS DOT CHOMP .)
    IF              reduce using rule 60 (input -> GETS DOT CHOMP .)
    WHILE           reduce using rule 60 (input -> GETS DOT CHOMP .)
    FOR             reduce using rule 60 (input -> GETS DOT CHOMP .)
    $end            reduce using rule 60 (input -> GETS DOT CHOMP .)
    RBRACE          reduce using rule 60 (input -> GETS DOT CHOMP .)
    END             reduce using rule 60 (input -> GETS DOT CHOMP .)
    ELSE            reduce using rule 60 (input -> GETS DOT CHOMP .)
    ELSIF           reduce using rule 60 (input -> GETS DOT CHOMP .)


state 172

    (67) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 67 (creationStack -> STACK DOT NEW .)
    RETURN          reduce using rule 67 (creationStack -> STACK DOT NEW .)
    PUTS            reduce using rule 67 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 67 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 67 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 67 (creationStack -> STACK DOT NEW .)
    FOR             reduce using rule 67 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 67 (creationStack -> STACK DOT NEW .)
    RBRACE          reduce using rule 67 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 67 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 67 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 67 (creationStack -> STACK DOT NEW .)


state 173

    (69) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RETURN          reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    PUTS            reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    FOR             reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RBRACE          reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 69 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 174

    (73) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    RETURN          reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    PUTS            reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    FOR             reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    RBRACE          reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 73 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 73 (creationHashmap -> HASH DOT NEW .)


state 175

    (95) operation -> LPAREN operationValue arithmeticOperator . operationValue RPAREN
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 134
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    operationValue                 shift and go to state 196
    number                         shift and go to state 135
    attribute                      shift and go to state 136
    indexation                     shift and go to state 137

state 176

    (9) conditional -> IF condition instructionBody conditionalElsif END .

    $end            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    RETURN          reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    PUTS            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    IF              reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    FOR             reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    RBRACE          reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 9 (conditional -> IF condition instructionBody conditionalElsif END .)


state 177

    (11) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 197
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 178

    (10) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 198


state 179

    (14) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 14 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 14 (conditionalElsif -> elsif conditionalElsif .)


state 180

    (12) elsif -> ELSIF condition . instructionBody
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 199
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 181

    (110) indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    EQUALS          reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    COMMA           reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PRINT           reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    FOR             reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RBRACE          reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PLUS            reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MINUS           reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    POWER           reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    DIVISION        reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RPAREN          reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 110 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)


state 182

    (111) indexation -> ID OPENBRACKET operation CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    EQUALS          reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    COMMA           reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PRINT           reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RETURN          reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PUTS            reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ID              reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    IF              reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    WHILE           reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    FOR             reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    $end            reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RBRACE          reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    END             reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSE            reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSIF           reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PLUS            reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MINUS           reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    POWER           reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    DIVISION        reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RPAREN          reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 111 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)


state 183

    (94) operation -> operationValue arithmeticOperator . operationValue
    (90) operationValue -> . ID
    (91) operationValue -> . number
    (92) operationValue -> . attribute
    (93) operationValue -> . indexation
    (120) number -> . FLOAT
    (121) number -> . INTEGER
    (89) attribute -> . ID DOT ID
    (110) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (111) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 134
    FLOAT           shift and go to state 41
    INTEGER         shift and go to state 42

    operationValue                 shift and go to state 200
    number                         shift and go to state 135
    attribute                      shift and go to state 136
    indexation                     shift and go to state 137

state 184

    (18) forLoop -> FOR ID IN LPAREN INTEGER . DOT DOT INTEGER RPAREN instructionBody END

    DOT             shift and go to state 201


state 185

    (62) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 62 (parameters -> ID COMMA parameters .)


state 186

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 202


state 187

    (6) lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE .

    $end            reduce using rule 6 (lambda_expression -> ID ASSIGNMENT LAMBDA LBRACE instructionBody RBRACE .)


state 188

    (78) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 78 (pairs -> pair COMMA pairs .)


state 189

    (80) value -> STRING .

    COMMA           reduce using rule 80 (value -> STRING .)
    RBRACE          reduce using rule 80 (value -> STRING .)


state 190

    (76) pair -> STRING COLON value .

    COMMA           reduce using rule 76 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 76 (pair -> STRING COLON value .)


state 191

    (79) value -> ID .

    COMMA           reduce using rule 79 (value -> ID .)
    RBRACE          reduce using rule 79 (value -> ID .)


state 192

    (81) value -> number .

    COMMA           reduce using rule 81 (value -> number .)
    RBRACE          reduce using rule 81 (value -> number .)


state 193

    (82) value -> LBRACE . pairs RBRACE
    (83) value -> LBRACE . RBRACE
    (77) pairs -> . pair
    (78) pairs -> . pair COMMA pairs
    (76) pair -> . STRING COLON value

    RBRACE          shift and go to state 204
    STRING          shift and go to state 118

    pairs                          shift and go to state 203
    pair                           shift and go to state 117

state 194

    (103) element_list -> element_list COMMA conditionValue .

    CLOSEDBRACKET   reduce using rule 103 (element_list -> element_list COMMA conditionValue .)
    COMMA           reduce using rule 103 (element_list -> element_list COMMA conditionValue .)


state 195

    (58) input -> GETS DOT CHOMP DOT . TO_F
    (59) input -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 205
    TO_I            shift and go to state 206


state 196

    (95) operation -> LPAREN operationValue arithmeticOperator operationValue . RPAREN

    RPAREN          shift and go to state 207


state 197

    (11) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 208


state 198

    (10) conditional -> IF condition instructionBody ELSE instructionBody END .

    $end            reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RETURN          reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PUTS            reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    IF              reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    FOR             reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RBRACE          reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 10 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 199

    (12) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 12 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 12 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 12 (elsif -> ELSIF condition instructionBody .)


state 200

    (94) operation -> operationValue arithmeticOperator operationValue .

    CLOSEDBRACKET   reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    FOR             reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    RBRACE          reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 94 (operation -> operationValue arithmeticOperator operationValue .)


state 201

    (18) forLoop -> FOR ID IN LPAREN INTEGER DOT . DOT INTEGER RPAREN instructionBody END

    DOT             shift and go to state 209


state 202

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 203

    (82) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 210


state 204

    (83) value -> LBRACE RBRACE .

    COMMA           reduce using rule 83 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 83 (value -> LBRACE RBRACE .)


state 205

    (58) input -> GETS DOT CHOMP DOT TO_F .

    PRINT           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    RETURN          reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    PUTS            reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    ID              reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    IF              reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    WHILE           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    FOR             reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    $end            reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    RBRACE          reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)
    ELSIF           reduce using rule 58 (input -> GETS DOT CHOMP DOT TO_F .)


state 206

    (59) input -> GETS DOT CHOMP DOT TO_I .

    PRINT           reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    RETURN          reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    PUTS            reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    ID              reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    IF              reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    WHILE           reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    FOR             reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    $end            reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    RBRACE          reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)
    ELSIF           reduce using rule 59 (input -> GETS DOT CHOMP DOT TO_I .)


state 207

    (95) operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .

    PLUS            reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MINUS           reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    POWER           reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MULTIPLICATION  reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    DIVISION        reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PRINT           reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RETURN          reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PUTS            reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ID              reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    IF              reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    WHILE           reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    FOR             reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    $end            reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RBRACE          reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    END             reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSE            reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSIF           reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    CLOSEDBRACKET   reduce using rule 95 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)


state 208

    (11) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    $end            reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RETURN          reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PUTS            reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    IF              reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    FOR             reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RBRACE          reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 11 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 209

    (18) forLoop -> FOR ID IN LPAREN INTEGER DOT DOT . INTEGER RPAREN instructionBody END

    INTEGER         shift and go to state 211


state 210

    (82) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 82 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 82 (value -> LBRACE pairs RBRACE .)


state 211

    (18) forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER . RPAREN instructionBody END

    RPAREN          shift and go to state 212


state 212

    (18) forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN . instructionBody END
    (41) instructionBody -> . bodyLine
    (42) instructionBody -> . bodyLine instructionBody
    (30) bodyLine -> . assignmentRule
    (31) bodyLine -> . PRINT printBody
    (32) bodyLine -> . conditional
    (33) bodyLine -> . whileLoop
    (34) bodyLine -> . functionCall
    (35) bodyLine -> . arrayConcat
    (36) bodyLine -> . RETURN arguments
    (37) bodyLine -> . PUTS printBody
    (38) bodyLine -> . method
    (39) bodyLine -> . unariOperator
    (40) bodyLine -> . forLoop
    (19) assignmentRule -> . ID ASSIGNMENT number
    (20) assignmentRule -> . ID ASSIGNMENT ID
    (21) assignmentRule -> . ID ASSIGNMENT condition
    (22) assignmentRule -> . ID ASSIGNMENT TRUE
    (23) assignmentRule -> . ID ASSIGNMENT FALSE
    (24) assignmentRule -> . ID ASSIGNMENT creationTDA
    (25) assignmentRule -> . ID ASSIGNMENT operations
    (26) assignmentRule -> . ID ASSIGNMENT array
    (27) assignmentRule -> . ID ASSIGNMENT indexation
    (28) assignmentRule -> . ID ASSIGNMENT attribute
    (29) assignmentRule -> . ID ASSIGNMENT input
    (8) conditional -> . IF condition instructionBody END
    (9) conditional -> . IF condition instructionBody conditionalElsif END
    (10) conditional -> . IF condition instructionBody ELSE instructionBody END
    (11) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (16) whileLoop -> . WHILE condition instructionBody END
    (63) functionCall -> . ID LPAREN arguments RPAREN
    (64) functionCall -> . ID LPAREN RPAREN
    (108) arrayConcat -> . ID ARRAYAPPEND ID
    (109) arrayConcat -> . ID ARRAYAPPEND number
    (57) method -> . ID DOT functionCall
    (118) unariOperator -> . ID ASSIGNDECREMENT number
    (119) unariOperator -> . ID ASSIGNINCREMENT number
    (18) forLoop -> . FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END

    PRINT           shift and go to state 15
    RETURN          shift and go to state 18
    PUTS            shift and go to state 19
    ID              shift and go to state 33
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13

    instructionBody                shift and go to state 213
    bodyLine                       shift and go to state 9
    assignmentRule                 shift and go to state 14
    conditional                    shift and go to state 30
    whileLoop                      shift and go to state 31
    functionCall                   shift and go to state 16
    arrayConcat                    shift and go to state 17
    method                         shift and go to state 20
    unariOperator                  shift and go to state 21
    forLoop                        shift and go to state 32

state 213

    (18) forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody . END

    END             shift and go to state 214


state 214

    (18) forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .

    $end            reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    PRINT           reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    RETURN          reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    PUTS            reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    ID              reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    IF              reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    WHILE           reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    FOR             reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    RBRACE          reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    END             reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    ELSE            reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)
    ELSIF           reduce using rule 18 (forLoop -> FOR ID IN LPAREN INTEGER DOT DOT INTEGER RPAREN instructionBody END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for POWER in state 167 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 167 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 167 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> conditional)
WARNING: rejected rule (bodyLine -> conditional) in state 6
WARNING: reduce/reduce conflict in state 7 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (bodyLine -> whileLoop) in state 7
WARNING: reduce/reduce conflict in state 8 resolved using rule (instruction -> forLoop)
WARNING: rejected rule (bodyLine -> forLoop) in state 8
WARNING: reduce/reduce conflict in state 127 resolved using rule (creationStack -> OPENBRACKET CLOSEDBRACKET)
WARNING: rejected rule (array -> OPENBRACKET CLOSEDBRACKET) in state 127
WARNING: Rule (array -> OPENBRACKET CLOSEDBRACKET) is never reduced
