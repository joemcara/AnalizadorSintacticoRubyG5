Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGNDECREMENT
    ASSIGNINCREMENT
    BREAK
    CASE
    CHOMP
    CLASS
    FOR
    GETS
    IN
    NODE
    THEN
    TO_F
    TO_I

Grammar

Rule 0     S' -> instruction
Rule 1     instruction -> instructionBody
Rule 2     instruction -> DEF ID LPAREN parameters RPAREN instructionBody END
Rule 3     instruction -> DEF ID LPAREN RPAREN END
Rule 4     instruction -> conditional
Rule 5     conditional -> IF condition instructionBody END
Rule 6     conditional -> IF condition instructionBody conditionalElsif END
Rule 7     conditional -> IF condition instructionBody ELSE instructionBody END
Rule 8     conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END
Rule 9     elsif -> ELSIF condition instructionBody
Rule 10    nestedConditional -> conditional
Rule 11    nestedConditional -> conditional nestedConditional
Rule 12    conditionalElsif -> elsif
Rule 13    conditionalElsif -> elsif conditionalElsif
Rule 14    instruction -> whileLoop
Rule 15    whileLoop -> WHILE condition instructionBody END
Rule 16    nestedWhile -> whileLoop
Rule 17    nestedWhile -> whileLoop nestedWhile
Rule 18    assignmentRule -> ID ASSIGNMENT number
Rule 19    assignmentRule -> ID ASSIGNMENT ID
Rule 20    assignmentRule -> ID ASSIGNMENT condition
Rule 21    assignmentRule -> ID ASSIGNMENT TRUE
Rule 22    assignmentRule -> ID ASSIGNMENT FALSE
Rule 23    assignmentRule -> ID ASSIGNMENT creationTDA
Rule 24    assignmentRule -> ID ASSIGNMENT operations
Rule 25    assignmentRule -> ID ASSIGNMENT array
Rule 26    assignmentRule -> ID ASSIGNMENT indexation
Rule 27    assignmentRule -> ID ASSIGNMENT attribute
Rule 28    bodyLine -> assignmentRule
Rule 29    bodyLine -> PRINT printBody
Rule 30    bodyLine -> nestedConditional
Rule 31    bodyLine -> nestedWhile
Rule 32    bodyLine -> functionCall
Rule 33    bodyLine -> arrayConcat
Rule 34    bodyLine -> RETURN arguments
Rule 35    bodyLine -> PUTS printBody
Rule 36    bodyLine -> method
Rule 37    instructionBody -> bodyLine
Rule 38    instructionBody -> bodyLine instructionBody
Rule 39    printBody -> ID
Rule 40    printBody -> TRUE
Rule 41    printBody -> FALSE
Rule 42    printBody -> dataType
Rule 43    printBody -> condition
Rule 44    printBody -> method
Rule 45    printBody -> functionCall
Rule 46    argument -> ID
Rule 47    argument -> number
Rule 48    argument -> attribute
Rule 49    argument -> indexation
Rule 50    argument -> STRING
Rule 51    arguments -> argument
Rule 52    arguments -> argument COMMA arguments
Rule 53    method -> ID DOT functionCall
Rule 54    parameters -> ID
Rule 55    parameters -> ID COMMA parameters
Rule 56    functionCall -> ID LPAREN arguments RPAREN
Rule 57    functionCall -> ID LPAREN RPAREN
Rule 58    creationStack -> STACK DOT NEW
Rule 59    creationStack -> OPENBRACKET CLOSEDBRACKET
Rule 60    creationLinkedList -> LINKEDLIST DOT NEW
Rule 61    creationTDA -> creationStack
Rule 62    creationTDA -> creationLinkedList
Rule 63    creationTDA -> creationHashmap
Rule 64    creationHashmap -> HASH DOT NEW
Rule 65    creationHashmap -> LBRACE pairs RBRACE
Rule 66    creationHashmap -> LBRACE RBRACE
Rule 67    pair -> STRING COLON value
Rule 68    pairs -> pair
Rule 69    pairs -> pair COMMA pairs
Rule 70    value -> ID
Rule 71    value -> STRING
Rule 72    value -> number
Rule 73    value -> LBRACE pairs RBRACE
Rule 74    value -> LBRACE RBRACE
Rule 75    arithmeticOperator -> PLUS
Rule 76    arithmeticOperator -> MINUS
Rule 77    arithmeticOperator -> POWER
Rule 78    arithmeticOperator -> MULTIPLICATION
Rule 79    arithmeticOperator -> DIVISION
Rule 80    attribute -> ID DOT ID
Rule 81    operationValue -> ID
Rule 82    operationValue -> number
Rule 83    operationValue -> attribute
Rule 84    operationValue -> indexation
Rule 85    operation -> operationValue arithmeticOperator operationValue
Rule 86    operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN
Rule 87    operations -> operation
Rule 88    operations -> operation arithmeticOperator operations
Rule 89    operations -> operation arithmeticOperator operationValue
Rule 90    operations -> operationValue arithmeticOperator operation
Rule 91    array -> OPENBRACKET element_list CLOSEDBRACKET
Rule 92    array -> OPENBRACKET CLOSEDBRACKET
Rule 93    element_list -> conditionValue
Rule 94    element_list -> element_list COMMA conditionValue
Rule 95    conditionValue -> ID
Rule 96    conditionValue -> number
Rule 97    conditionValue -> indexation
Rule 98    conditionValue -> attribute
Rule 99    arrayConcat -> ID ARRAYAPPEND ID
Rule 100   arrayConcat -> ID ARRAYAPPEND number
Rule 101   indexation -> ID OPENBRACKET element_list CLOSEDBRACKET
Rule 102   indexation -> ID OPENBRACKET operation CLOSEDBRACKET
Rule 103   condition -> conditionValue comparator conditionValue
Rule 104   comparator -> GREATERTHAN
Rule 105   comparator -> LESSTHAN
Rule 106   comparator -> EQUALS
Rule 107   comparator -> GREATEROREQUALS
Rule 108   comparator -> LESSOREQUALS
Rule 109   number -> FLOAT
Rule 110   number -> INTEGER
Rule 111   dataType -> STRING
Rule 112   dataType -> number

Terminals, with rules where they appear

AND                  : 
ARRAYAPPEND          : 99 100
ASSIGNDECREMENT      : 
ASSIGNINCREMENT      : 
ASSIGNMENT           : 18 19 20 21 22 23 24 25 26 27
BREAK                : 
CASE                 : 
CHOMP                : 
CLASS                : 
CLOSEDBRACKET        : 59 91 92 101 102
COLON                : 67
COMMA                : 52 55 69 94
DEF                  : 2 3
DIVISION             : 79
DOT                  : 53 58 60 64 80
ELSE                 : 7 8
ELSIF                : 9
END                  : 2 3 5 6 7 8 15
EQUALS               : 106
FALSE                : 22 41
FLOAT                : 109
FOR                  : 
GETS                 : 
GREATEROREQUALS      : 107
GREATERTHAN          : 104
HASH                 : 64
ID                   : 2 3 18 19 19 20 21 22 23 24 25 26 27 39 46 53 54 55 56 57 70 80 80 81 95 99 99 100 101 102
IF                   : 5 6 7 8
IN                   : 
INTEGER              : 110
LBRACE               : 65 66 73 74
LESSOREQUALS         : 108
LESSTHAN             : 105
LINKEDLIST           : 60
LPAREN               : 2 3 56 57 86
MINUS                : 76
MULTIPLICATION       : 78
NEW                  : 58 60 64
NODE                 : 
OPENBRACKET          : 59 91 92 101 102
PLUS                 : 75
POWER                : 77
PRINT                : 29
PUTS                 : 35
RBRACE               : 65 66 73 74
RETURN               : 34
RPAREN               : 2 3 56 57 86
STACK                : 58
STRING               : 50 67 71 111
THEN                 : 
TO_F                 : 
TO_I                 : 
TRUE                 : 21 40
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

argument             : 51 52
arguments            : 34 52 56
arithmeticOperator   : 85 86 88 89 90
array                : 25
arrayConcat          : 33
assignmentRule       : 28
attribute            : 27 48 83 98
bodyLine             : 37 38
comparator           : 103
condition            : 5 6 7 8 9 15 20 43
conditionValue       : 93 94 103 103
conditional          : 4 10 11
conditionalElsif     : 6 8 13
creationHashmap      : 63
creationLinkedList   : 62
creationStack        : 61
creationTDA          : 23
dataType             : 42
element_list         : 91 94 101
elsif                : 12 13
functionCall         : 32 45 53
indexation           : 26 49 84 97
instruction          : 0
instructionBody      : 1 2 5 6 7 7 8 8 9 15 38
method               : 36 44
nestedConditional    : 11 30
nestedWhile          : 17 31
number               : 18 47 72 82 96 100 112
operation            : 87 88 89 90 102
operationValue       : 85 85 86 86 89 90
operations           : 24 88
pair                 : 68 69
pairs                : 65 69 73
parameters           : 2 55
printBody            : 29 35
value                : 67
whileLoop            : 14 16 17

Parsing method: LALR

state 0

    (0) S' -> . instruction
    (1) instruction -> . instructionBody
    (2) instruction -> . DEF ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> . DEF ID LPAREN RPAREN END
    (4) instruction -> . conditional
    (14) instruction -> . whileLoop
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall

    DEF             shift and go to state 3
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4

    instruction                    shift and go to state 1
    instructionBody                shift and go to state 2
    conditional                    shift and go to state 5
    whileLoop                      shift and go to state 6
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18

state 1

    (0) S' -> instruction .



state 2

    (1) instruction -> instructionBody .

    $end            reduce using rule 1 (instruction -> instructionBody .)


state 3

    (2) instruction -> DEF . ID LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF . ID LPAREN RPAREN END

    ID              shift and go to state 19


state 4

    (18) assignmentRule -> ID . ASSIGNMENT number
    (19) assignmentRule -> ID . ASSIGNMENT ID
    (20) assignmentRule -> ID . ASSIGNMENT condition
    (21) assignmentRule -> ID . ASSIGNMENT TRUE
    (22) assignmentRule -> ID . ASSIGNMENT FALSE
    (23) assignmentRule -> ID . ASSIGNMENT creationTDA
    (24) assignmentRule -> ID . ASSIGNMENT operations
    (25) assignmentRule -> ID . ASSIGNMENT array
    (26) assignmentRule -> ID . ASSIGNMENT indexation
    (27) assignmentRule -> ID . ASSIGNMENT attribute
    (56) functionCall -> ID . LPAREN arguments RPAREN
    (57) functionCall -> ID . LPAREN RPAREN
    (99) arrayConcat -> ID . ARRAYAPPEND ID
    (100) arrayConcat -> ID . ARRAYAPPEND number
    (53) method -> ID . DOT functionCall

    ASSIGNMENT      shift and go to state 20
    LPAREN          shift and go to state 21
    ARRAYAPPEND     shift and go to state 22
    DOT             shift and go to state 23


state 5

    (4) instruction -> conditional .
    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 4 (instruction -> conditional .)
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 4 (instruction -> conditional .)
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    RETURN          reduce using rule 10 (nestedConditional -> conditional .)
    PUTS            reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]
  ! $end            [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 24
    nestedConditional              shift and go to state 25

state 6

    (14) instruction -> whileLoop .
    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! reduce/reduce conflict for $end resolved using rule 14 (instruction -> whileLoop .)
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 14 (instruction -> whileLoop .)
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 16 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]
  ! $end            [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 26
    nestedWhile                    shift and go to state 27

state 7

    (37) instructionBody -> bodyLine .
    (38) instructionBody -> bodyLine . instructionBody
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    $end            reduce using rule 37 (instructionBody -> bodyLine .)
    END             reduce using rule 37 (instructionBody -> bodyLine .)
    ELSE            reduce using rule 37 (instructionBody -> bodyLine .)
    ELSIF           reduce using rule 37 (instructionBody -> bodyLine .)
    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    bodyLine                       shift and go to state 7
    instructionBody                shift and go to state 28
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 8

    (5) conditional -> IF . condition instructionBody END
    (6) conditional -> IF . condition instructionBody conditionalElsif END
    (7) conditional -> IF . condition instructionBody ELSE instructionBody END
    (8) conditional -> IF . condition instructionBody conditionalElsif ELSE instructionBody END
    (103) condition -> . conditionValue comparator conditionValue
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 31
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    condition                      shift and go to state 29
    conditionValue                 shift and go to state 30
    number                         shift and go to state 32
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 9

    (15) whileLoop -> WHILE . condition instructionBody END
    (103) condition -> . conditionValue comparator conditionValue
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 31
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    condition                      shift and go to state 37
    conditionValue                 shift and go to state 30
    number                         shift and go to state 32
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 10

    (28) bodyLine -> assignmentRule .

    PRINT           reduce using rule 28 (bodyLine -> assignmentRule .)
    RETURN          reduce using rule 28 (bodyLine -> assignmentRule .)
    PUTS            reduce using rule 28 (bodyLine -> assignmentRule .)
    ID              reduce using rule 28 (bodyLine -> assignmentRule .)
    IF              reduce using rule 28 (bodyLine -> assignmentRule .)
    WHILE           reduce using rule 28 (bodyLine -> assignmentRule .)
    $end            reduce using rule 28 (bodyLine -> assignmentRule .)
    END             reduce using rule 28 (bodyLine -> assignmentRule .)
    ELSE            reduce using rule 28 (bodyLine -> assignmentRule .)
    ELSIF           reduce using rule 28 (bodyLine -> assignmentRule .)


state 11

    (29) bodyLine -> PRINT . printBody
    (39) printBody -> . ID
    (40) printBody -> . TRUE
    (41) printBody -> . FALSE
    (42) printBody -> . dataType
    (43) printBody -> . condition
    (44) printBody -> . method
    (45) printBody -> . functionCall
    (111) dataType -> . STRING
    (112) dataType -> . number
    (103) condition -> . conditionValue comparator conditionValue
    (53) method -> . ID DOT functionCall
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    STRING          shift and go to state 46
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    printBody                      shift and go to state 38
    dataType                       shift and go to state 42
    condition                      shift and go to state 43
    method                         shift and go to state 44
    functionCall                   shift and go to state 45
    number                         shift and go to state 47
    conditionValue                 shift and go to state 30
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 12

    (30) bodyLine -> nestedConditional .

    PRINT           reduce using rule 30 (bodyLine -> nestedConditional .)
    RETURN          reduce using rule 30 (bodyLine -> nestedConditional .)
    PUTS            reduce using rule 30 (bodyLine -> nestedConditional .)
    ID              reduce using rule 30 (bodyLine -> nestedConditional .)
    IF              reduce using rule 30 (bodyLine -> nestedConditional .)
    WHILE           reduce using rule 30 (bodyLine -> nestedConditional .)
    $end            reduce using rule 30 (bodyLine -> nestedConditional .)
    END             reduce using rule 30 (bodyLine -> nestedConditional .)
    ELSE            reduce using rule 30 (bodyLine -> nestedConditional .)
    ELSIF           reduce using rule 30 (bodyLine -> nestedConditional .)


state 13

    (31) bodyLine -> nestedWhile .

    PRINT           reduce using rule 31 (bodyLine -> nestedWhile .)
    RETURN          reduce using rule 31 (bodyLine -> nestedWhile .)
    PUTS            reduce using rule 31 (bodyLine -> nestedWhile .)
    ID              reduce using rule 31 (bodyLine -> nestedWhile .)
    IF              reduce using rule 31 (bodyLine -> nestedWhile .)
    WHILE           reduce using rule 31 (bodyLine -> nestedWhile .)
    $end            reduce using rule 31 (bodyLine -> nestedWhile .)
    END             reduce using rule 31 (bodyLine -> nestedWhile .)
    ELSE            reduce using rule 31 (bodyLine -> nestedWhile .)
    ELSIF           reduce using rule 31 (bodyLine -> nestedWhile .)


state 14

    (32) bodyLine -> functionCall .

    PRINT           reduce using rule 32 (bodyLine -> functionCall .)
    RETURN          reduce using rule 32 (bodyLine -> functionCall .)
    PUTS            reduce using rule 32 (bodyLine -> functionCall .)
    ID              reduce using rule 32 (bodyLine -> functionCall .)
    IF              reduce using rule 32 (bodyLine -> functionCall .)
    WHILE           reduce using rule 32 (bodyLine -> functionCall .)
    $end            reduce using rule 32 (bodyLine -> functionCall .)
    END             reduce using rule 32 (bodyLine -> functionCall .)
    ELSE            reduce using rule 32 (bodyLine -> functionCall .)
    ELSIF           reduce using rule 32 (bodyLine -> functionCall .)


state 15

    (33) bodyLine -> arrayConcat .

    PRINT           reduce using rule 33 (bodyLine -> arrayConcat .)
    RETURN          reduce using rule 33 (bodyLine -> arrayConcat .)
    PUTS            reduce using rule 33 (bodyLine -> arrayConcat .)
    ID              reduce using rule 33 (bodyLine -> arrayConcat .)
    IF              reduce using rule 33 (bodyLine -> arrayConcat .)
    WHILE           reduce using rule 33 (bodyLine -> arrayConcat .)
    $end            reduce using rule 33 (bodyLine -> arrayConcat .)
    END             reduce using rule 33 (bodyLine -> arrayConcat .)
    ELSE            reduce using rule 33 (bodyLine -> arrayConcat .)
    ELSIF           reduce using rule 33 (bodyLine -> arrayConcat .)


state 16

    (34) bodyLine -> RETURN . arguments
    (51) arguments -> . argument
    (52) arguments -> . argument COMMA arguments
    (46) argument -> . ID
    (47) argument -> . number
    (48) argument -> . attribute
    (49) argument -> . indexation
    (50) argument -> . STRING
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 50
    STRING          shift and go to state 54
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    arguments                      shift and go to state 48
    argument                       shift and go to state 49
    number                         shift and go to state 51
    attribute                      shift and go to state 52
    indexation                     shift and go to state 53

state 17

    (35) bodyLine -> PUTS . printBody
    (39) printBody -> . ID
    (40) printBody -> . TRUE
    (41) printBody -> . FALSE
    (42) printBody -> . dataType
    (43) printBody -> . condition
    (44) printBody -> . method
    (45) printBody -> . functionCall
    (111) dataType -> . STRING
    (112) dataType -> . number
    (103) condition -> . conditionValue comparator conditionValue
    (53) method -> . ID DOT functionCall
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    STRING          shift and go to state 46
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    printBody                      shift and go to state 55
    dataType                       shift and go to state 42
    condition                      shift and go to state 43
    method                         shift and go to state 44
    functionCall                   shift and go to state 45
    number                         shift and go to state 47
    conditionValue                 shift and go to state 30
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 18

    (36) bodyLine -> method .

    PRINT           reduce using rule 36 (bodyLine -> method .)
    RETURN          reduce using rule 36 (bodyLine -> method .)
    PUTS            reduce using rule 36 (bodyLine -> method .)
    ID              reduce using rule 36 (bodyLine -> method .)
    IF              reduce using rule 36 (bodyLine -> method .)
    WHILE           reduce using rule 36 (bodyLine -> method .)
    $end            reduce using rule 36 (bodyLine -> method .)
    END             reduce using rule 36 (bodyLine -> method .)
    ELSE            reduce using rule 36 (bodyLine -> method .)
    ELSIF           reduce using rule 36 (bodyLine -> method .)


state 19

    (2) instruction -> DEF ID . LPAREN parameters RPAREN instructionBody END
    (3) instruction -> DEF ID . LPAREN RPAREN END

    LPAREN          shift and go to state 56


state 20

    (18) assignmentRule -> ID ASSIGNMENT . number
    (19) assignmentRule -> ID ASSIGNMENT . ID
    (20) assignmentRule -> ID ASSIGNMENT . condition
    (21) assignmentRule -> ID ASSIGNMENT . TRUE
    (22) assignmentRule -> ID ASSIGNMENT . FALSE
    (23) assignmentRule -> ID ASSIGNMENT . creationTDA
    (24) assignmentRule -> ID ASSIGNMENT . operations
    (25) assignmentRule -> ID ASSIGNMENT . array
    (26) assignmentRule -> ID ASSIGNMENT . indexation
    (27) assignmentRule -> ID ASSIGNMENT . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (103) condition -> . conditionValue comparator conditionValue
    (61) creationTDA -> . creationStack
    (62) creationTDA -> . creationLinkedList
    (63) creationTDA -> . creationHashmap
    (87) operations -> . operation
    (88) operations -> . operation arithmeticOperator operations
    (89) operations -> . operation arithmeticOperator operationValue
    (90) operations -> . operationValue arithmeticOperator operation
    (91) array -> . OPENBRACKET element_list CLOSEDBRACKET
    (92) array -> . OPENBRACKET CLOSEDBRACKET
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (58) creationStack -> . STACK DOT NEW
    (59) creationStack -> . OPENBRACKET CLOSEDBRACKET
    (60) creationLinkedList -> . LINKEDLIST DOT NEW
    (64) creationHashmap -> . HASH DOT NEW
    (65) creationHashmap -> . LBRACE pairs RBRACE
    (66) creationHashmap -> . LBRACE RBRACE
    (85) operation -> . operationValue arithmeticOperator operationValue
    (86) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation

    ID              shift and go to state 57
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36
    OPENBRACKET     shift and go to state 72
    STACK           shift and go to state 73
    LINKEDLIST      shift and go to state 74
    HASH            shift and go to state 75
    LBRACE          shift and go to state 76
    LPAREN          shift and go to state 77

    number                         shift and go to state 58
    condition                      shift and go to state 59
    creationTDA                    shift and go to state 62
    operations                     shift and go to state 63
    array                          shift and go to state 64
    indexation                     shift and go to state 65
    attribute                      shift and go to state 66
    conditionValue                 shift and go to state 30
    creationStack                  shift and go to state 67
    creationLinkedList             shift and go to state 68
    creationHashmap                shift and go to state 69
    operation                      shift and go to state 70
    operationValue                 shift and go to state 71

state 21

    (56) functionCall -> ID LPAREN . arguments RPAREN
    (57) functionCall -> ID LPAREN . RPAREN
    (51) arguments -> . argument
    (52) arguments -> . argument COMMA arguments
    (46) argument -> . ID
    (47) argument -> . number
    (48) argument -> . attribute
    (49) argument -> . indexation
    (50) argument -> . STRING
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    RPAREN          shift and go to state 79
    ID              shift and go to state 50
    STRING          shift and go to state 54
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    arguments                      shift and go to state 78
    argument                       shift and go to state 49
    number                         shift and go to state 51
    attribute                      shift and go to state 52
    indexation                     shift and go to state 53

state 22

    (99) arrayConcat -> ID ARRAYAPPEND . ID
    (100) arrayConcat -> ID ARRAYAPPEND . number
    (109) number -> . FLOAT
    (110) number -> . INTEGER

    ID              shift and go to state 80
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    number                         shift and go to state 81

state 23

    (53) method -> ID DOT . functionCall
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 82

    functionCall                   shift and go to state 83

state 24

    (10) nestedConditional -> conditional .
    (11) nestedConditional -> conditional . nestedConditional
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END

  ! shift/reduce conflict for IF resolved as shift
    PRINT           reduce using rule 10 (nestedConditional -> conditional .)
    RETURN          reduce using rule 10 (nestedConditional -> conditional .)
    PUTS            reduce using rule 10 (nestedConditional -> conditional .)
    ID              reduce using rule 10 (nestedConditional -> conditional .)
    WHILE           reduce using rule 10 (nestedConditional -> conditional .)
    $end            reduce using rule 10 (nestedConditional -> conditional .)
    END             reduce using rule 10 (nestedConditional -> conditional .)
    ELSE            reduce using rule 10 (nestedConditional -> conditional .)
    ELSIF           reduce using rule 10 (nestedConditional -> conditional .)
    IF              shift and go to state 8

  ! IF              [ reduce using rule 10 (nestedConditional -> conditional .) ]

    conditional                    shift and go to state 24
    nestedConditional              shift and go to state 25

state 25

    (11) nestedConditional -> conditional nestedConditional .

    PRINT           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    RETURN          reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    PUTS            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ID              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    IF              reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    WHILE           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    $end            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    END             reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSE            reduce using rule 11 (nestedConditional -> conditional nestedConditional .)
    ELSIF           reduce using rule 11 (nestedConditional -> conditional nestedConditional .)


state 26

    (16) nestedWhile -> whileLoop .
    (17) nestedWhile -> whileLoop . nestedWhile
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (15) whileLoop -> . WHILE condition instructionBody END

  ! shift/reduce conflict for WHILE resolved as shift
    PRINT           reduce using rule 16 (nestedWhile -> whileLoop .)
    RETURN          reduce using rule 16 (nestedWhile -> whileLoop .)
    PUTS            reduce using rule 16 (nestedWhile -> whileLoop .)
    ID              reduce using rule 16 (nestedWhile -> whileLoop .)
    IF              reduce using rule 16 (nestedWhile -> whileLoop .)
    $end            reduce using rule 16 (nestedWhile -> whileLoop .)
    END             reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSE            reduce using rule 16 (nestedWhile -> whileLoop .)
    ELSIF           reduce using rule 16 (nestedWhile -> whileLoop .)
    WHILE           shift and go to state 9

  ! WHILE           [ reduce using rule 16 (nestedWhile -> whileLoop .) ]

    whileLoop                      shift and go to state 26
    nestedWhile                    shift and go to state 27

state 27

    (17) nestedWhile -> whileLoop nestedWhile .

    PRINT           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    RETURN          reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    PUTS            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ID              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    IF              reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    WHILE           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    $end            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    END             reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSE            reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)
    ELSIF           reduce using rule 17 (nestedWhile -> whileLoop nestedWhile .)


state 28

    (38) instructionBody -> bodyLine instructionBody .

    $end            reduce using rule 38 (instructionBody -> bodyLine instructionBody .)
    END             reduce using rule 38 (instructionBody -> bodyLine instructionBody .)
    ELSE            reduce using rule 38 (instructionBody -> bodyLine instructionBody .)
    ELSIF           reduce using rule 38 (instructionBody -> bodyLine instructionBody .)


state 29

    (5) conditional -> IF condition . instructionBody END
    (6) conditional -> IF condition . instructionBody conditionalElsif END
    (7) conditional -> IF condition . instructionBody ELSE instructionBody END
    (8) conditional -> IF condition . instructionBody conditionalElsif ELSE instructionBody END
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 84
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 30

    (103) condition -> conditionValue . comparator conditionValue
    (104) comparator -> . GREATERTHAN
    (105) comparator -> . LESSTHAN
    (106) comparator -> . EQUALS
    (107) comparator -> . GREATEROREQUALS
    (108) comparator -> . LESSOREQUALS

    GREATERTHAN     shift and go to state 86
    LESSTHAN        shift and go to state 87
    EQUALS          shift and go to state 88
    GREATEROREQUALS shift and go to state 89
    LESSOREQUALS    shift and go to state 90

    comparator                     shift and go to state 85

state 31

    (95) conditionValue -> ID .
    (101) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> ID . DOT ID

    GREATERTHAN     reduce using rule 95 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 95 (conditionValue -> ID .)
    EQUALS          reduce using rule 95 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 95 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 95 (conditionValue -> ID .)
    CLOSEDBRACKET   reduce using rule 95 (conditionValue -> ID .)
    COMMA           reduce using rule 95 (conditionValue -> ID .)
    PRINT           reduce using rule 95 (conditionValue -> ID .)
    RETURN          reduce using rule 95 (conditionValue -> ID .)
    PUTS            reduce using rule 95 (conditionValue -> ID .)
    ID              reduce using rule 95 (conditionValue -> ID .)
    IF              reduce using rule 95 (conditionValue -> ID .)
    WHILE           reduce using rule 95 (conditionValue -> ID .)
    $end            reduce using rule 95 (conditionValue -> ID .)
    END             reduce using rule 95 (conditionValue -> ID .)
    ELSE            reduce using rule 95 (conditionValue -> ID .)
    ELSIF           reduce using rule 95 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 91
    DOT             shift and go to state 92


state 32

    (96) conditionValue -> number .

    GREATERTHAN     reduce using rule 96 (conditionValue -> number .)
    LESSTHAN        reduce using rule 96 (conditionValue -> number .)
    EQUALS          reduce using rule 96 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 96 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 96 (conditionValue -> number .)
    CLOSEDBRACKET   reduce using rule 96 (conditionValue -> number .)
    COMMA           reduce using rule 96 (conditionValue -> number .)
    PRINT           reduce using rule 96 (conditionValue -> number .)
    RETURN          reduce using rule 96 (conditionValue -> number .)
    PUTS            reduce using rule 96 (conditionValue -> number .)
    ID              reduce using rule 96 (conditionValue -> number .)
    IF              reduce using rule 96 (conditionValue -> number .)
    WHILE           reduce using rule 96 (conditionValue -> number .)
    $end            reduce using rule 96 (conditionValue -> number .)
    END             reduce using rule 96 (conditionValue -> number .)
    ELSE            reduce using rule 96 (conditionValue -> number .)
    ELSIF           reduce using rule 96 (conditionValue -> number .)


state 33

    (97) conditionValue -> indexation .

    GREATERTHAN     reduce using rule 97 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 97 (conditionValue -> indexation .)
    EQUALS          reduce using rule 97 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 97 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 97 (conditionValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 97 (conditionValue -> indexation .)
    COMMA           reduce using rule 97 (conditionValue -> indexation .)
    PRINT           reduce using rule 97 (conditionValue -> indexation .)
    RETURN          reduce using rule 97 (conditionValue -> indexation .)
    PUTS            reduce using rule 97 (conditionValue -> indexation .)
    ID              reduce using rule 97 (conditionValue -> indexation .)
    IF              reduce using rule 97 (conditionValue -> indexation .)
    WHILE           reduce using rule 97 (conditionValue -> indexation .)
    $end            reduce using rule 97 (conditionValue -> indexation .)
    END             reduce using rule 97 (conditionValue -> indexation .)
    ELSE            reduce using rule 97 (conditionValue -> indexation .)
    ELSIF           reduce using rule 97 (conditionValue -> indexation .)


state 34

    (98) conditionValue -> attribute .

    GREATERTHAN     reduce using rule 98 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 98 (conditionValue -> attribute .)
    EQUALS          reduce using rule 98 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 98 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 98 (conditionValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 98 (conditionValue -> attribute .)
    COMMA           reduce using rule 98 (conditionValue -> attribute .)
    PRINT           reduce using rule 98 (conditionValue -> attribute .)
    RETURN          reduce using rule 98 (conditionValue -> attribute .)
    PUTS            reduce using rule 98 (conditionValue -> attribute .)
    ID              reduce using rule 98 (conditionValue -> attribute .)
    IF              reduce using rule 98 (conditionValue -> attribute .)
    WHILE           reduce using rule 98 (conditionValue -> attribute .)
    $end            reduce using rule 98 (conditionValue -> attribute .)
    END             reduce using rule 98 (conditionValue -> attribute .)
    ELSE            reduce using rule 98 (conditionValue -> attribute .)
    ELSIF           reduce using rule 98 (conditionValue -> attribute .)


state 35

    (109) number -> FLOAT .

    GREATERTHAN     reduce using rule 109 (number -> FLOAT .)
    LESSTHAN        reduce using rule 109 (number -> FLOAT .)
    EQUALS          reduce using rule 109 (number -> FLOAT .)
    GREATEROREQUALS reduce using rule 109 (number -> FLOAT .)
    LESSOREQUALS    reduce using rule 109 (number -> FLOAT .)
    PRINT           reduce using rule 109 (number -> FLOAT .)
    RETURN          reduce using rule 109 (number -> FLOAT .)
    PUTS            reduce using rule 109 (number -> FLOAT .)
    ID              reduce using rule 109 (number -> FLOAT .)
    IF              reduce using rule 109 (number -> FLOAT .)
    WHILE           reduce using rule 109 (number -> FLOAT .)
    $end            reduce using rule 109 (number -> FLOAT .)
    END             reduce using rule 109 (number -> FLOAT .)
    ELSE            reduce using rule 109 (number -> FLOAT .)
    ELSIF           reduce using rule 109 (number -> FLOAT .)
    COMMA           reduce using rule 109 (number -> FLOAT .)
    PLUS            reduce using rule 109 (number -> FLOAT .)
    MINUS           reduce using rule 109 (number -> FLOAT .)
    POWER           reduce using rule 109 (number -> FLOAT .)
    MULTIPLICATION  reduce using rule 109 (number -> FLOAT .)
    DIVISION        reduce using rule 109 (number -> FLOAT .)
    RPAREN          reduce using rule 109 (number -> FLOAT .)
    CLOSEDBRACKET   reduce using rule 109 (number -> FLOAT .)
    RBRACE          reduce using rule 109 (number -> FLOAT .)


state 36

    (110) number -> INTEGER .

    GREATERTHAN     reduce using rule 110 (number -> INTEGER .)
    LESSTHAN        reduce using rule 110 (number -> INTEGER .)
    EQUALS          reduce using rule 110 (number -> INTEGER .)
    GREATEROREQUALS reduce using rule 110 (number -> INTEGER .)
    LESSOREQUALS    reduce using rule 110 (number -> INTEGER .)
    PRINT           reduce using rule 110 (number -> INTEGER .)
    RETURN          reduce using rule 110 (number -> INTEGER .)
    PUTS            reduce using rule 110 (number -> INTEGER .)
    ID              reduce using rule 110 (number -> INTEGER .)
    IF              reduce using rule 110 (number -> INTEGER .)
    WHILE           reduce using rule 110 (number -> INTEGER .)
    $end            reduce using rule 110 (number -> INTEGER .)
    END             reduce using rule 110 (number -> INTEGER .)
    ELSE            reduce using rule 110 (number -> INTEGER .)
    ELSIF           reduce using rule 110 (number -> INTEGER .)
    COMMA           reduce using rule 110 (number -> INTEGER .)
    PLUS            reduce using rule 110 (number -> INTEGER .)
    MINUS           reduce using rule 110 (number -> INTEGER .)
    POWER           reduce using rule 110 (number -> INTEGER .)
    MULTIPLICATION  reduce using rule 110 (number -> INTEGER .)
    DIVISION        reduce using rule 110 (number -> INTEGER .)
    RPAREN          reduce using rule 110 (number -> INTEGER .)
    CLOSEDBRACKET   reduce using rule 110 (number -> INTEGER .)
    RBRACE          reduce using rule 110 (number -> INTEGER .)


state 37

    (15) whileLoop -> WHILE condition . instructionBody END
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 93
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 38

    (29) bodyLine -> PRINT printBody .

    PRINT           reduce using rule 29 (bodyLine -> PRINT printBody .)
    RETURN          reduce using rule 29 (bodyLine -> PRINT printBody .)
    PUTS            reduce using rule 29 (bodyLine -> PRINT printBody .)
    ID              reduce using rule 29 (bodyLine -> PRINT printBody .)
    IF              reduce using rule 29 (bodyLine -> PRINT printBody .)
    WHILE           reduce using rule 29 (bodyLine -> PRINT printBody .)
    $end            reduce using rule 29 (bodyLine -> PRINT printBody .)
    END             reduce using rule 29 (bodyLine -> PRINT printBody .)
    ELSE            reduce using rule 29 (bodyLine -> PRINT printBody .)
    ELSIF           reduce using rule 29 (bodyLine -> PRINT printBody .)


state 39

    (39) printBody -> ID .
    (53) method -> ID . DOT functionCall
    (56) functionCall -> ID . LPAREN arguments RPAREN
    (57) functionCall -> ID . LPAREN RPAREN
    (95) conditionValue -> ID .
    (101) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> ID . DOT ID

    PRINT           reduce using rule 39 (printBody -> ID .)
    RETURN          reduce using rule 39 (printBody -> ID .)
    PUTS            reduce using rule 39 (printBody -> ID .)
    ID              reduce using rule 39 (printBody -> ID .)
    IF              reduce using rule 39 (printBody -> ID .)
    WHILE           reduce using rule 39 (printBody -> ID .)
    $end            reduce using rule 39 (printBody -> ID .)
    END             reduce using rule 39 (printBody -> ID .)
    ELSE            reduce using rule 39 (printBody -> ID .)
    ELSIF           reduce using rule 39 (printBody -> ID .)
    DOT             shift and go to state 94
    LPAREN          shift and go to state 21
    GREATERTHAN     reduce using rule 95 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 95 (conditionValue -> ID .)
    EQUALS          reduce using rule 95 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 95 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 95 (conditionValue -> ID .)
    OPENBRACKET     shift and go to state 91


state 40

    (40) printBody -> TRUE .

    PRINT           reduce using rule 40 (printBody -> TRUE .)
    RETURN          reduce using rule 40 (printBody -> TRUE .)
    PUTS            reduce using rule 40 (printBody -> TRUE .)
    ID              reduce using rule 40 (printBody -> TRUE .)
    IF              reduce using rule 40 (printBody -> TRUE .)
    WHILE           reduce using rule 40 (printBody -> TRUE .)
    $end            reduce using rule 40 (printBody -> TRUE .)
    END             reduce using rule 40 (printBody -> TRUE .)
    ELSE            reduce using rule 40 (printBody -> TRUE .)
    ELSIF           reduce using rule 40 (printBody -> TRUE .)


state 41

    (41) printBody -> FALSE .

    PRINT           reduce using rule 41 (printBody -> FALSE .)
    RETURN          reduce using rule 41 (printBody -> FALSE .)
    PUTS            reduce using rule 41 (printBody -> FALSE .)
    ID              reduce using rule 41 (printBody -> FALSE .)
    IF              reduce using rule 41 (printBody -> FALSE .)
    WHILE           reduce using rule 41 (printBody -> FALSE .)
    $end            reduce using rule 41 (printBody -> FALSE .)
    END             reduce using rule 41 (printBody -> FALSE .)
    ELSE            reduce using rule 41 (printBody -> FALSE .)
    ELSIF           reduce using rule 41 (printBody -> FALSE .)


state 42

    (42) printBody -> dataType .

    PRINT           reduce using rule 42 (printBody -> dataType .)
    RETURN          reduce using rule 42 (printBody -> dataType .)
    PUTS            reduce using rule 42 (printBody -> dataType .)
    ID              reduce using rule 42 (printBody -> dataType .)
    IF              reduce using rule 42 (printBody -> dataType .)
    WHILE           reduce using rule 42 (printBody -> dataType .)
    $end            reduce using rule 42 (printBody -> dataType .)
    END             reduce using rule 42 (printBody -> dataType .)
    ELSE            reduce using rule 42 (printBody -> dataType .)
    ELSIF           reduce using rule 42 (printBody -> dataType .)


state 43

    (43) printBody -> condition .

    PRINT           reduce using rule 43 (printBody -> condition .)
    RETURN          reduce using rule 43 (printBody -> condition .)
    PUTS            reduce using rule 43 (printBody -> condition .)
    ID              reduce using rule 43 (printBody -> condition .)
    IF              reduce using rule 43 (printBody -> condition .)
    WHILE           reduce using rule 43 (printBody -> condition .)
    $end            reduce using rule 43 (printBody -> condition .)
    END             reduce using rule 43 (printBody -> condition .)
    ELSE            reduce using rule 43 (printBody -> condition .)
    ELSIF           reduce using rule 43 (printBody -> condition .)


state 44

    (44) printBody -> method .

    PRINT           reduce using rule 44 (printBody -> method .)
    RETURN          reduce using rule 44 (printBody -> method .)
    PUTS            reduce using rule 44 (printBody -> method .)
    ID              reduce using rule 44 (printBody -> method .)
    IF              reduce using rule 44 (printBody -> method .)
    WHILE           reduce using rule 44 (printBody -> method .)
    $end            reduce using rule 44 (printBody -> method .)
    END             reduce using rule 44 (printBody -> method .)
    ELSE            reduce using rule 44 (printBody -> method .)
    ELSIF           reduce using rule 44 (printBody -> method .)


state 45

    (45) printBody -> functionCall .

    PRINT           reduce using rule 45 (printBody -> functionCall .)
    RETURN          reduce using rule 45 (printBody -> functionCall .)
    PUTS            reduce using rule 45 (printBody -> functionCall .)
    ID              reduce using rule 45 (printBody -> functionCall .)
    IF              reduce using rule 45 (printBody -> functionCall .)
    WHILE           reduce using rule 45 (printBody -> functionCall .)
    $end            reduce using rule 45 (printBody -> functionCall .)
    END             reduce using rule 45 (printBody -> functionCall .)
    ELSE            reduce using rule 45 (printBody -> functionCall .)
    ELSIF           reduce using rule 45 (printBody -> functionCall .)


state 46

    (111) dataType -> STRING .

    PRINT           reduce using rule 111 (dataType -> STRING .)
    RETURN          reduce using rule 111 (dataType -> STRING .)
    PUTS            reduce using rule 111 (dataType -> STRING .)
    ID              reduce using rule 111 (dataType -> STRING .)
    IF              reduce using rule 111 (dataType -> STRING .)
    WHILE           reduce using rule 111 (dataType -> STRING .)
    $end            reduce using rule 111 (dataType -> STRING .)
    END             reduce using rule 111 (dataType -> STRING .)
    ELSE            reduce using rule 111 (dataType -> STRING .)
    ELSIF           reduce using rule 111 (dataType -> STRING .)


state 47

    (112) dataType -> number .
    (96) conditionValue -> number .

    PRINT           reduce using rule 112 (dataType -> number .)
    RETURN          reduce using rule 112 (dataType -> number .)
    PUTS            reduce using rule 112 (dataType -> number .)
    ID              reduce using rule 112 (dataType -> number .)
    IF              reduce using rule 112 (dataType -> number .)
    WHILE           reduce using rule 112 (dataType -> number .)
    $end            reduce using rule 112 (dataType -> number .)
    END             reduce using rule 112 (dataType -> number .)
    ELSE            reduce using rule 112 (dataType -> number .)
    ELSIF           reduce using rule 112 (dataType -> number .)
    GREATERTHAN     reduce using rule 96 (conditionValue -> number .)
    LESSTHAN        reduce using rule 96 (conditionValue -> number .)
    EQUALS          reduce using rule 96 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 96 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 96 (conditionValue -> number .)


state 48

    (34) bodyLine -> RETURN arguments .

    PRINT           reduce using rule 34 (bodyLine -> RETURN arguments .)
    RETURN          reduce using rule 34 (bodyLine -> RETURN arguments .)
    PUTS            reduce using rule 34 (bodyLine -> RETURN arguments .)
    ID              reduce using rule 34 (bodyLine -> RETURN arguments .)
    IF              reduce using rule 34 (bodyLine -> RETURN arguments .)
    WHILE           reduce using rule 34 (bodyLine -> RETURN arguments .)
    $end            reduce using rule 34 (bodyLine -> RETURN arguments .)
    END             reduce using rule 34 (bodyLine -> RETURN arguments .)
    ELSE            reduce using rule 34 (bodyLine -> RETURN arguments .)
    ELSIF           reduce using rule 34 (bodyLine -> RETURN arguments .)


state 49

    (51) arguments -> argument .
    (52) arguments -> argument . COMMA arguments

    PRINT           reduce using rule 51 (arguments -> argument .)
    RETURN          reduce using rule 51 (arguments -> argument .)
    PUTS            reduce using rule 51 (arguments -> argument .)
    ID              reduce using rule 51 (arguments -> argument .)
    IF              reduce using rule 51 (arguments -> argument .)
    WHILE           reduce using rule 51 (arguments -> argument .)
    $end            reduce using rule 51 (arguments -> argument .)
    END             reduce using rule 51 (arguments -> argument .)
    ELSE            reduce using rule 51 (arguments -> argument .)
    ELSIF           reduce using rule 51 (arguments -> argument .)
    RPAREN          reduce using rule 51 (arguments -> argument .)
    COMMA           shift and go to state 95


state 50

    (46) argument -> ID .
    (80) attribute -> ID . DOT ID
    (101) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    COMMA           reduce using rule 46 (argument -> ID .)
    PRINT           reduce using rule 46 (argument -> ID .)
    RETURN          reduce using rule 46 (argument -> ID .)
    PUTS            reduce using rule 46 (argument -> ID .)
    ID              reduce using rule 46 (argument -> ID .)
    IF              reduce using rule 46 (argument -> ID .)
    WHILE           reduce using rule 46 (argument -> ID .)
    $end            reduce using rule 46 (argument -> ID .)
    END             reduce using rule 46 (argument -> ID .)
    ELSE            reduce using rule 46 (argument -> ID .)
    ELSIF           reduce using rule 46 (argument -> ID .)
    RPAREN          reduce using rule 46 (argument -> ID .)
    DOT             shift and go to state 92
    OPENBRACKET     shift and go to state 91


state 51

    (47) argument -> number .

    COMMA           reduce using rule 47 (argument -> number .)
    PRINT           reduce using rule 47 (argument -> number .)
    RETURN          reduce using rule 47 (argument -> number .)
    PUTS            reduce using rule 47 (argument -> number .)
    ID              reduce using rule 47 (argument -> number .)
    IF              reduce using rule 47 (argument -> number .)
    WHILE           reduce using rule 47 (argument -> number .)
    $end            reduce using rule 47 (argument -> number .)
    END             reduce using rule 47 (argument -> number .)
    ELSE            reduce using rule 47 (argument -> number .)
    ELSIF           reduce using rule 47 (argument -> number .)
    RPAREN          reduce using rule 47 (argument -> number .)


state 52

    (48) argument -> attribute .

    COMMA           reduce using rule 48 (argument -> attribute .)
    PRINT           reduce using rule 48 (argument -> attribute .)
    RETURN          reduce using rule 48 (argument -> attribute .)
    PUTS            reduce using rule 48 (argument -> attribute .)
    ID              reduce using rule 48 (argument -> attribute .)
    IF              reduce using rule 48 (argument -> attribute .)
    WHILE           reduce using rule 48 (argument -> attribute .)
    $end            reduce using rule 48 (argument -> attribute .)
    END             reduce using rule 48 (argument -> attribute .)
    ELSE            reduce using rule 48 (argument -> attribute .)
    ELSIF           reduce using rule 48 (argument -> attribute .)
    RPAREN          reduce using rule 48 (argument -> attribute .)


state 53

    (49) argument -> indexation .

    COMMA           reduce using rule 49 (argument -> indexation .)
    PRINT           reduce using rule 49 (argument -> indexation .)
    RETURN          reduce using rule 49 (argument -> indexation .)
    PUTS            reduce using rule 49 (argument -> indexation .)
    ID              reduce using rule 49 (argument -> indexation .)
    IF              reduce using rule 49 (argument -> indexation .)
    WHILE           reduce using rule 49 (argument -> indexation .)
    $end            reduce using rule 49 (argument -> indexation .)
    END             reduce using rule 49 (argument -> indexation .)
    ELSE            reduce using rule 49 (argument -> indexation .)
    ELSIF           reduce using rule 49 (argument -> indexation .)
    RPAREN          reduce using rule 49 (argument -> indexation .)


state 54

    (50) argument -> STRING .

    COMMA           reduce using rule 50 (argument -> STRING .)
    PRINT           reduce using rule 50 (argument -> STRING .)
    RETURN          reduce using rule 50 (argument -> STRING .)
    PUTS            reduce using rule 50 (argument -> STRING .)
    ID              reduce using rule 50 (argument -> STRING .)
    IF              reduce using rule 50 (argument -> STRING .)
    WHILE           reduce using rule 50 (argument -> STRING .)
    $end            reduce using rule 50 (argument -> STRING .)
    END             reduce using rule 50 (argument -> STRING .)
    ELSE            reduce using rule 50 (argument -> STRING .)
    ELSIF           reduce using rule 50 (argument -> STRING .)
    RPAREN          reduce using rule 50 (argument -> STRING .)


state 55

    (35) bodyLine -> PUTS printBody .

    PRINT           reduce using rule 35 (bodyLine -> PUTS printBody .)
    RETURN          reduce using rule 35 (bodyLine -> PUTS printBody .)
    PUTS            reduce using rule 35 (bodyLine -> PUTS printBody .)
    ID              reduce using rule 35 (bodyLine -> PUTS printBody .)
    IF              reduce using rule 35 (bodyLine -> PUTS printBody .)
    WHILE           reduce using rule 35 (bodyLine -> PUTS printBody .)
    $end            reduce using rule 35 (bodyLine -> PUTS printBody .)
    END             reduce using rule 35 (bodyLine -> PUTS printBody .)
    ELSE            reduce using rule 35 (bodyLine -> PUTS printBody .)
    ELSIF           reduce using rule 35 (bodyLine -> PUTS printBody .)


state 56

    (2) instruction -> DEF ID LPAREN . parameters RPAREN instructionBody END
    (3) instruction -> DEF ID LPAREN . RPAREN END
    (54) parameters -> . ID
    (55) parameters -> . ID COMMA parameters

    RPAREN          shift and go to state 98
    ID              shift and go to state 96

    parameters                     shift and go to state 97

state 57

    (19) assignmentRule -> ID ASSIGNMENT ID .
    (101) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> ID . DOT ID
    (95) conditionValue -> ID .
    (81) operationValue -> ID .

    PRINT           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    RETURN          reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    PUTS            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ID              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    IF              reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    WHILE           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    $end            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    END             reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSE            reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    ELSIF           reduce using rule 19 (assignmentRule -> ID ASSIGNMENT ID .)
    OPENBRACKET     shift and go to state 91
    DOT             shift and go to state 92
    GREATERTHAN     reduce using rule 95 (conditionValue -> ID .)
    LESSTHAN        reduce using rule 95 (conditionValue -> ID .)
    EQUALS          reduce using rule 95 (conditionValue -> ID .)
    GREATEROREQUALS reduce using rule 95 (conditionValue -> ID .)
    LESSOREQUALS    reduce using rule 95 (conditionValue -> ID .)
    PLUS            reduce using rule 81 (operationValue -> ID .)
    MINUS           reduce using rule 81 (operationValue -> ID .)
    POWER           reduce using rule 81 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 81 (operationValue -> ID .)
    DIVISION        reduce using rule 81 (operationValue -> ID .)


state 58

    (18) assignmentRule -> ID ASSIGNMENT number .
    (96) conditionValue -> number .
    (82) operationValue -> number .

    PRINT           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    RETURN          reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    PUTS            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ID              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    IF              reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    WHILE           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    $end            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    END             reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSE            reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    ELSIF           reduce using rule 18 (assignmentRule -> ID ASSIGNMENT number .)
    GREATERTHAN     reduce using rule 96 (conditionValue -> number .)
    LESSTHAN        reduce using rule 96 (conditionValue -> number .)
    EQUALS          reduce using rule 96 (conditionValue -> number .)
    GREATEROREQUALS reduce using rule 96 (conditionValue -> number .)
    LESSOREQUALS    reduce using rule 96 (conditionValue -> number .)
    PLUS            reduce using rule 82 (operationValue -> number .)
    MINUS           reduce using rule 82 (operationValue -> number .)
    POWER           reduce using rule 82 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 82 (operationValue -> number .)
    DIVISION        reduce using rule 82 (operationValue -> number .)


state 59

    (20) assignmentRule -> ID ASSIGNMENT condition .

    PRINT           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    RETURN          reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    PUTS            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ID              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    IF              reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    WHILE           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    $end            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    END             reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSE            reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)
    ELSIF           reduce using rule 20 (assignmentRule -> ID ASSIGNMENT condition .)


state 60

    (21) assignmentRule -> ID ASSIGNMENT TRUE .

    PRINT           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    RETURN          reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    PUTS            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ID              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    IF              reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    WHILE           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    $end            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    END             reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSE            reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)
    ELSIF           reduce using rule 21 (assignmentRule -> ID ASSIGNMENT TRUE .)


state 61

    (22) assignmentRule -> ID ASSIGNMENT FALSE .

    PRINT           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    RETURN          reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    PUTS            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ID              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    IF              reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    WHILE           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    $end            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    END             reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSE            reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)
    ELSIF           reduce using rule 22 (assignmentRule -> ID ASSIGNMENT FALSE .)


state 62

    (23) assignmentRule -> ID ASSIGNMENT creationTDA .

    PRINT           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    RETURN          reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    PUTS            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ID              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    IF              reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    WHILE           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    $end            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    END             reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSE            reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)
    ELSIF           reduce using rule 23 (assignmentRule -> ID ASSIGNMENT creationTDA .)


state 63

    (24) assignmentRule -> ID ASSIGNMENT operations .

    PRINT           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    RETURN          reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    PUTS            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ID              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    IF              reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    WHILE           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    $end            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    END             reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSE            reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)
    ELSIF           reduce using rule 24 (assignmentRule -> ID ASSIGNMENT operations .)


state 64

    (25) assignmentRule -> ID ASSIGNMENT array .

    PRINT           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    RETURN          reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    PUTS            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ID              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    IF              reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    WHILE           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    $end            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    END             reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ELSE            reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)
    ELSIF           reduce using rule 25 (assignmentRule -> ID ASSIGNMENT array .)


state 65

    (26) assignmentRule -> ID ASSIGNMENT indexation .
    (97) conditionValue -> indexation .
    (84) operationValue -> indexation .

    PRINT           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    RETURN          reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    PUTS            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    ID              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    IF              reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    WHILE           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    $end            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    END             reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSE            reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    ELSIF           reduce using rule 26 (assignmentRule -> ID ASSIGNMENT indexation .)
    GREATERTHAN     reduce using rule 97 (conditionValue -> indexation .)
    LESSTHAN        reduce using rule 97 (conditionValue -> indexation .)
    EQUALS          reduce using rule 97 (conditionValue -> indexation .)
    GREATEROREQUALS reduce using rule 97 (conditionValue -> indexation .)
    LESSOREQUALS    reduce using rule 97 (conditionValue -> indexation .)
    PLUS            reduce using rule 84 (operationValue -> indexation .)
    MINUS           reduce using rule 84 (operationValue -> indexation .)
    POWER           reduce using rule 84 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 84 (operationValue -> indexation .)
    DIVISION        reduce using rule 84 (operationValue -> indexation .)


state 66

    (27) assignmentRule -> ID ASSIGNMENT attribute .
    (98) conditionValue -> attribute .
    (83) operationValue -> attribute .

    PRINT           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    RETURN          reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    PUTS            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    ID              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    IF              reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    WHILE           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    $end            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    END             reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSE            reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    ELSIF           reduce using rule 27 (assignmentRule -> ID ASSIGNMENT attribute .)
    GREATERTHAN     reduce using rule 98 (conditionValue -> attribute .)
    LESSTHAN        reduce using rule 98 (conditionValue -> attribute .)
    EQUALS          reduce using rule 98 (conditionValue -> attribute .)
    GREATEROREQUALS reduce using rule 98 (conditionValue -> attribute .)
    LESSOREQUALS    reduce using rule 98 (conditionValue -> attribute .)
    PLUS            reduce using rule 83 (operationValue -> attribute .)
    MINUS           reduce using rule 83 (operationValue -> attribute .)
    POWER           reduce using rule 83 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 83 (operationValue -> attribute .)
    DIVISION        reduce using rule 83 (operationValue -> attribute .)


state 67

    (61) creationTDA -> creationStack .

    PRINT           reduce using rule 61 (creationTDA -> creationStack .)
    RETURN          reduce using rule 61 (creationTDA -> creationStack .)
    PUTS            reduce using rule 61 (creationTDA -> creationStack .)
    ID              reduce using rule 61 (creationTDA -> creationStack .)
    IF              reduce using rule 61 (creationTDA -> creationStack .)
    WHILE           reduce using rule 61 (creationTDA -> creationStack .)
    $end            reduce using rule 61 (creationTDA -> creationStack .)
    END             reduce using rule 61 (creationTDA -> creationStack .)
    ELSE            reduce using rule 61 (creationTDA -> creationStack .)
    ELSIF           reduce using rule 61 (creationTDA -> creationStack .)


state 68

    (62) creationTDA -> creationLinkedList .

    PRINT           reduce using rule 62 (creationTDA -> creationLinkedList .)
    RETURN          reduce using rule 62 (creationTDA -> creationLinkedList .)
    PUTS            reduce using rule 62 (creationTDA -> creationLinkedList .)
    ID              reduce using rule 62 (creationTDA -> creationLinkedList .)
    IF              reduce using rule 62 (creationTDA -> creationLinkedList .)
    WHILE           reduce using rule 62 (creationTDA -> creationLinkedList .)
    $end            reduce using rule 62 (creationTDA -> creationLinkedList .)
    END             reduce using rule 62 (creationTDA -> creationLinkedList .)
    ELSE            reduce using rule 62 (creationTDA -> creationLinkedList .)
    ELSIF           reduce using rule 62 (creationTDA -> creationLinkedList .)


state 69

    (63) creationTDA -> creationHashmap .

    PRINT           reduce using rule 63 (creationTDA -> creationHashmap .)
    RETURN          reduce using rule 63 (creationTDA -> creationHashmap .)
    PUTS            reduce using rule 63 (creationTDA -> creationHashmap .)
    ID              reduce using rule 63 (creationTDA -> creationHashmap .)
    IF              reduce using rule 63 (creationTDA -> creationHashmap .)
    WHILE           reduce using rule 63 (creationTDA -> creationHashmap .)
    $end            reduce using rule 63 (creationTDA -> creationHashmap .)
    END             reduce using rule 63 (creationTDA -> creationHashmap .)
    ELSE            reduce using rule 63 (creationTDA -> creationHashmap .)
    ELSIF           reduce using rule 63 (creationTDA -> creationHashmap .)


state 70

    (87) operations -> operation .
    (88) operations -> operation . arithmeticOperator operations
    (89) operations -> operation . arithmeticOperator operationValue
    (75) arithmeticOperator -> . PLUS
    (76) arithmeticOperator -> . MINUS
    (77) arithmeticOperator -> . POWER
    (78) arithmeticOperator -> . MULTIPLICATION
    (79) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 87 (operations -> operation .)
    RETURN          reduce using rule 87 (operations -> operation .)
    PUTS            reduce using rule 87 (operations -> operation .)
    ID              reduce using rule 87 (operations -> operation .)
    IF              reduce using rule 87 (operations -> operation .)
    WHILE           reduce using rule 87 (operations -> operation .)
    $end            reduce using rule 87 (operations -> operation .)
    END             reduce using rule 87 (operations -> operation .)
    ELSE            reduce using rule 87 (operations -> operation .)
    ELSIF           reduce using rule 87 (operations -> operation .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    POWER           shift and go to state 102
    MULTIPLICATION  shift and go to state 103
    DIVISION        shift and go to state 104

    arithmeticOperator             shift and go to state 99

state 71

    (90) operations -> operationValue . arithmeticOperator operation
    (85) operation -> operationValue . arithmeticOperator operationValue
    (75) arithmeticOperator -> . PLUS
    (76) arithmeticOperator -> . MINUS
    (77) arithmeticOperator -> . POWER
    (78) arithmeticOperator -> . MULTIPLICATION
    (79) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    POWER           shift and go to state 102
    MULTIPLICATION  shift and go to state 103
    DIVISION        shift and go to state 104

    arithmeticOperator             shift and go to state 105

state 72

    (91) array -> OPENBRACKET . element_list CLOSEDBRACKET
    (92) array -> OPENBRACKET . CLOSEDBRACKET
    (59) creationStack -> OPENBRACKET . CLOSEDBRACKET
    (93) element_list -> . conditionValue
    (94) element_list -> . element_list COMMA conditionValue
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    CLOSEDBRACKET   shift and go to state 107
    ID              shift and go to state 31
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    element_list                   shift and go to state 106
    conditionValue                 shift and go to state 108
    number                         shift and go to state 32
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 73

    (58) creationStack -> STACK . DOT NEW

    DOT             shift and go to state 109


state 74

    (60) creationLinkedList -> LINKEDLIST . DOT NEW

    DOT             shift and go to state 110


state 75

    (64) creationHashmap -> HASH . DOT NEW

    DOT             shift and go to state 111


state 76

    (65) creationHashmap -> LBRACE . pairs RBRACE
    (66) creationHashmap -> LBRACE . RBRACE
    (68) pairs -> . pair
    (69) pairs -> . pair COMMA pairs
    (67) pair -> . STRING COLON value

    RBRACE          shift and go to state 113
    STRING          shift and go to state 115

    pairs                          shift and go to state 112
    pair                           shift and go to state 114

state 77

    (86) operation -> LPAREN . operationValue arithmeticOperator operationValue RPAREN
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 117
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    operationValue                 shift and go to state 116
    number                         shift and go to state 118
    attribute                      shift and go to state 119
    indexation                     shift and go to state 120

state 78

    (56) functionCall -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 121


state 79

    (57) functionCall -> ID LPAREN RPAREN .

    PRINT           reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    ID              reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    IF              reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    $end            reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    END             reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 57 (functionCall -> ID LPAREN RPAREN .)


state 80

    (99) arrayConcat -> ID ARRAYAPPEND ID .

    PRINT           reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    RETURN          reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    PUTS            reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    ID              reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    IF              reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    WHILE           reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    $end            reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    END             reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSE            reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)
    ELSIF           reduce using rule 99 (arrayConcat -> ID ARRAYAPPEND ID .)


state 81

    (100) arrayConcat -> ID ARRAYAPPEND number .

    PRINT           reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    RETURN          reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    PUTS            reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    ID              reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    IF              reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    WHILE           reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    $end            reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    END             reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSE            reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)
    ELSIF           reduce using rule 100 (arrayConcat -> ID ARRAYAPPEND number .)


state 82

    (56) functionCall -> ID . LPAREN arguments RPAREN
    (57) functionCall -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 21


state 83

    (53) method -> ID DOT functionCall .

    PRINT           reduce using rule 53 (method -> ID DOT functionCall .)
    RETURN          reduce using rule 53 (method -> ID DOT functionCall .)
    PUTS            reduce using rule 53 (method -> ID DOT functionCall .)
    ID              reduce using rule 53 (method -> ID DOT functionCall .)
    IF              reduce using rule 53 (method -> ID DOT functionCall .)
    WHILE           reduce using rule 53 (method -> ID DOT functionCall .)
    $end            reduce using rule 53 (method -> ID DOT functionCall .)
    END             reduce using rule 53 (method -> ID DOT functionCall .)
    ELSE            reduce using rule 53 (method -> ID DOT functionCall .)
    ELSIF           reduce using rule 53 (method -> ID DOT functionCall .)


state 84

    (5) conditional -> IF condition instructionBody . END
    (6) conditional -> IF condition instructionBody . conditionalElsif END
    (7) conditional -> IF condition instructionBody . ELSE instructionBody END
    (8) conditional -> IF condition instructionBody . conditionalElsif ELSE instructionBody END
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             shift and go to state 122
    ELSE            shift and go to state 124
    ELSIF           shift and go to state 126

    conditionalElsif               shift and go to state 123
    elsif                          shift and go to state 125

state 85

    (103) condition -> conditionValue comparator . conditionValue
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 31
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    conditionValue                 shift and go to state 127
    number                         shift and go to state 32
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 86

    (104) comparator -> GREATERTHAN .

    ID              reduce using rule 104 (comparator -> GREATERTHAN .)
    FLOAT           reduce using rule 104 (comparator -> GREATERTHAN .)
    INTEGER         reduce using rule 104 (comparator -> GREATERTHAN .)


state 87

    (105) comparator -> LESSTHAN .

    ID              reduce using rule 105 (comparator -> LESSTHAN .)
    FLOAT           reduce using rule 105 (comparator -> LESSTHAN .)
    INTEGER         reduce using rule 105 (comparator -> LESSTHAN .)


state 88

    (106) comparator -> EQUALS .

    ID              reduce using rule 106 (comparator -> EQUALS .)
    FLOAT           reduce using rule 106 (comparator -> EQUALS .)
    INTEGER         reduce using rule 106 (comparator -> EQUALS .)


state 89

    (107) comparator -> GREATEROREQUALS .

    ID              reduce using rule 107 (comparator -> GREATEROREQUALS .)
    FLOAT           reduce using rule 107 (comparator -> GREATEROREQUALS .)
    INTEGER         reduce using rule 107 (comparator -> GREATEROREQUALS .)


state 90

    (108) comparator -> LESSOREQUALS .

    ID              reduce using rule 108 (comparator -> LESSOREQUALS .)
    FLOAT           reduce using rule 108 (comparator -> LESSOREQUALS .)
    INTEGER         reduce using rule 108 (comparator -> LESSOREQUALS .)


state 91

    (101) indexation -> ID OPENBRACKET . element_list CLOSEDBRACKET
    (102) indexation -> ID OPENBRACKET . operation CLOSEDBRACKET
    (93) element_list -> . conditionValue
    (94) element_list -> . element_list COMMA conditionValue
    (85) operation -> . operationValue arithmeticOperator operationValue
    (86) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    LPAREN          shift and go to state 77
    ID              shift and go to state 128
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    element_list                   shift and go to state 129
    operation                      shift and go to state 130
    conditionValue                 shift and go to state 108
    operationValue                 shift and go to state 131
    number                         shift and go to state 132
    indexation                     shift and go to state 133
    attribute                      shift and go to state 134

state 92

    (80) attribute -> ID DOT . ID

    ID              shift and go to state 135


state 93

    (15) whileLoop -> WHILE condition instructionBody . END

    END             shift and go to state 136


state 94

    (53) method -> ID DOT . functionCall
    (80) attribute -> ID DOT . ID
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN

    ID              shift and go to state 137

    functionCall                   shift and go to state 83

state 95

    (52) arguments -> argument COMMA . arguments
    (51) arguments -> . argument
    (52) arguments -> . argument COMMA arguments
    (46) argument -> . ID
    (47) argument -> . number
    (48) argument -> . attribute
    (49) argument -> . indexation
    (50) argument -> . STRING
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 50
    STRING          shift and go to state 54
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    argument                       shift and go to state 49
    arguments                      shift and go to state 138
    number                         shift and go to state 51
    attribute                      shift and go to state 52
    indexation                     shift and go to state 53

state 96

    (54) parameters -> ID .
    (55) parameters -> ID . COMMA parameters

    RPAREN          reduce using rule 54 (parameters -> ID .)
    COMMA           shift and go to state 139


state 97

    (2) instruction -> DEF ID LPAREN parameters . RPAREN instructionBody END

    RPAREN          shift and go to state 140


state 98

    (3) instruction -> DEF ID LPAREN RPAREN . END

    END             shift and go to state 141


state 99

    (88) operations -> operation arithmeticOperator . operations
    (89) operations -> operation arithmeticOperator . operationValue
    (87) operations -> . operation
    (88) operations -> . operation arithmeticOperator operations
    (89) operations -> . operation arithmeticOperator operationValue
    (90) operations -> . operationValue arithmeticOperator operation
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation
    (85) operation -> . operationValue arithmeticOperator operationValue
    (86) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 117
    LPAREN          shift and go to state 77
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    operation                      shift and go to state 70
    operations                     shift and go to state 142
    operationValue                 shift and go to state 143
    number                         shift and go to state 118
    attribute                      shift and go to state 119
    indexation                     shift and go to state 120

state 100

    (75) arithmeticOperator -> PLUS .

    ID              reduce using rule 75 (arithmeticOperator -> PLUS .)
    LPAREN          reduce using rule 75 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 75 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 75 (arithmeticOperator -> PLUS .)


state 101

    (76) arithmeticOperator -> MINUS .

    ID              reduce using rule 76 (arithmeticOperator -> MINUS .)
    LPAREN          reduce using rule 76 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 76 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 76 (arithmeticOperator -> MINUS .)


state 102

    (77) arithmeticOperator -> POWER .

    ID              reduce using rule 77 (arithmeticOperator -> POWER .)
    LPAREN          reduce using rule 77 (arithmeticOperator -> POWER .)
    FLOAT           reduce using rule 77 (arithmeticOperator -> POWER .)
    INTEGER         reduce using rule 77 (arithmeticOperator -> POWER .)


state 103

    (78) arithmeticOperator -> MULTIPLICATION .

    ID              reduce using rule 78 (arithmeticOperator -> MULTIPLICATION .)
    LPAREN          reduce using rule 78 (arithmeticOperator -> MULTIPLICATION .)
    FLOAT           reduce using rule 78 (arithmeticOperator -> MULTIPLICATION .)
    INTEGER         reduce using rule 78 (arithmeticOperator -> MULTIPLICATION .)


state 104

    (79) arithmeticOperator -> DIVISION .

    ID              reduce using rule 79 (arithmeticOperator -> DIVISION .)
    LPAREN          reduce using rule 79 (arithmeticOperator -> DIVISION .)
    FLOAT           reduce using rule 79 (arithmeticOperator -> DIVISION .)
    INTEGER         reduce using rule 79 (arithmeticOperator -> DIVISION .)


state 105

    (90) operations -> operationValue arithmeticOperator . operation
    (85) operation -> operationValue arithmeticOperator . operationValue
    (85) operation -> . operationValue arithmeticOperator operationValue
    (86) operation -> . LPAREN operationValue arithmeticOperator operationValue RPAREN
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    LPAREN          shift and go to state 77
    ID              shift and go to state 117
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    operationValue                 shift and go to state 144
    operation                      shift and go to state 145
    number                         shift and go to state 118
    attribute                      shift and go to state 119
    indexation                     shift and go to state 120

state 106

    (91) array -> OPENBRACKET element_list . CLOSEDBRACKET
    (94) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 146
    COMMA           shift and go to state 147


state 107

    (92) array -> OPENBRACKET CLOSEDBRACKET .
    (59) creationStack -> OPENBRACKET CLOSEDBRACKET .

  ! reduce/reduce conflict for PRINT resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for PUTS resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for $end resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSE resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
  ! reduce/reduce conflict for ELSIF resolved using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PRINT           reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    RETURN          reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    PUTS            reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ID              reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    IF              reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    WHILE           reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    $end            reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    END             reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSE            reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)
    ELSIF           reduce using rule 59 (creationStack -> OPENBRACKET CLOSEDBRACKET .)

  ! PRINT           [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! RETURN          [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! PUTS            [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ID              [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! IF              [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! WHILE           [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! $end            [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! END             [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSE            [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]
  ! ELSIF           [ reduce using rule 92 (array -> OPENBRACKET CLOSEDBRACKET .) ]


state 108

    (93) element_list -> conditionValue .

    CLOSEDBRACKET   reduce using rule 93 (element_list -> conditionValue .)
    COMMA           reduce using rule 93 (element_list -> conditionValue .)


state 109

    (58) creationStack -> STACK DOT . NEW

    NEW             shift and go to state 148


state 110

    (60) creationLinkedList -> LINKEDLIST DOT . NEW

    NEW             shift and go to state 149


state 111

    (64) creationHashmap -> HASH DOT . NEW

    NEW             shift and go to state 150


state 112

    (65) creationHashmap -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 151


state 113

    (66) creationHashmap -> LBRACE RBRACE .

    PRINT           reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    RETURN          reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    PUTS            reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    ID              reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    IF              reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    WHILE           reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    $end            reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    END             reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    ELSE            reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)
    ELSIF           reduce using rule 66 (creationHashmap -> LBRACE RBRACE .)


state 114

    (68) pairs -> pair .
    (69) pairs -> pair . COMMA pairs

    RBRACE          reduce using rule 68 (pairs -> pair .)
    COMMA           shift and go to state 152


state 115

    (67) pair -> STRING . COLON value

    COLON           shift and go to state 153


state 116

    (86) operation -> LPAREN operationValue . arithmeticOperator operationValue RPAREN
    (75) arithmeticOperator -> . PLUS
    (76) arithmeticOperator -> . MINUS
    (77) arithmeticOperator -> . POWER
    (78) arithmeticOperator -> . MULTIPLICATION
    (79) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    POWER           shift and go to state 102
    MULTIPLICATION  shift and go to state 103
    DIVISION        shift and go to state 104

    arithmeticOperator             shift and go to state 154

state 117

    (81) operationValue -> ID .
    (80) attribute -> ID . DOT ID
    (101) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET

    PLUS            reduce using rule 81 (operationValue -> ID .)
    MINUS           reduce using rule 81 (operationValue -> ID .)
    POWER           reduce using rule 81 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 81 (operationValue -> ID .)
    DIVISION        reduce using rule 81 (operationValue -> ID .)
    PRINT           reduce using rule 81 (operationValue -> ID .)
    RETURN          reduce using rule 81 (operationValue -> ID .)
    PUTS            reduce using rule 81 (operationValue -> ID .)
    ID              reduce using rule 81 (operationValue -> ID .)
    IF              reduce using rule 81 (operationValue -> ID .)
    WHILE           reduce using rule 81 (operationValue -> ID .)
    $end            reduce using rule 81 (operationValue -> ID .)
    END             reduce using rule 81 (operationValue -> ID .)
    ELSE            reduce using rule 81 (operationValue -> ID .)
    ELSIF           reduce using rule 81 (operationValue -> ID .)
    RPAREN          reduce using rule 81 (operationValue -> ID .)
    CLOSEDBRACKET   reduce using rule 81 (operationValue -> ID .)
    DOT             shift and go to state 92
    OPENBRACKET     shift and go to state 91


state 118

    (82) operationValue -> number .

    PLUS            reduce using rule 82 (operationValue -> number .)
    MINUS           reduce using rule 82 (operationValue -> number .)
    POWER           reduce using rule 82 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 82 (operationValue -> number .)
    DIVISION        reduce using rule 82 (operationValue -> number .)
    PRINT           reduce using rule 82 (operationValue -> number .)
    RETURN          reduce using rule 82 (operationValue -> number .)
    PUTS            reduce using rule 82 (operationValue -> number .)
    ID              reduce using rule 82 (operationValue -> number .)
    IF              reduce using rule 82 (operationValue -> number .)
    WHILE           reduce using rule 82 (operationValue -> number .)
    $end            reduce using rule 82 (operationValue -> number .)
    END             reduce using rule 82 (operationValue -> number .)
    ELSE            reduce using rule 82 (operationValue -> number .)
    ELSIF           reduce using rule 82 (operationValue -> number .)
    RPAREN          reduce using rule 82 (operationValue -> number .)
    CLOSEDBRACKET   reduce using rule 82 (operationValue -> number .)


state 119

    (83) operationValue -> attribute .

    PLUS            reduce using rule 83 (operationValue -> attribute .)
    MINUS           reduce using rule 83 (operationValue -> attribute .)
    POWER           reduce using rule 83 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 83 (operationValue -> attribute .)
    DIVISION        reduce using rule 83 (operationValue -> attribute .)
    PRINT           reduce using rule 83 (operationValue -> attribute .)
    RETURN          reduce using rule 83 (operationValue -> attribute .)
    PUTS            reduce using rule 83 (operationValue -> attribute .)
    ID              reduce using rule 83 (operationValue -> attribute .)
    IF              reduce using rule 83 (operationValue -> attribute .)
    WHILE           reduce using rule 83 (operationValue -> attribute .)
    $end            reduce using rule 83 (operationValue -> attribute .)
    END             reduce using rule 83 (operationValue -> attribute .)
    ELSE            reduce using rule 83 (operationValue -> attribute .)
    ELSIF           reduce using rule 83 (operationValue -> attribute .)
    RPAREN          reduce using rule 83 (operationValue -> attribute .)
    CLOSEDBRACKET   reduce using rule 83 (operationValue -> attribute .)


state 120

    (84) operationValue -> indexation .

    PLUS            reduce using rule 84 (operationValue -> indexation .)
    MINUS           reduce using rule 84 (operationValue -> indexation .)
    POWER           reduce using rule 84 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 84 (operationValue -> indexation .)
    DIVISION        reduce using rule 84 (operationValue -> indexation .)
    PRINT           reduce using rule 84 (operationValue -> indexation .)
    RETURN          reduce using rule 84 (operationValue -> indexation .)
    PUTS            reduce using rule 84 (operationValue -> indexation .)
    ID              reduce using rule 84 (operationValue -> indexation .)
    IF              reduce using rule 84 (operationValue -> indexation .)
    WHILE           reduce using rule 84 (operationValue -> indexation .)
    $end            reduce using rule 84 (operationValue -> indexation .)
    END             reduce using rule 84 (operationValue -> indexation .)
    ELSE            reduce using rule 84 (operationValue -> indexation .)
    ELSIF           reduce using rule 84 (operationValue -> indexation .)
    RPAREN          reduce using rule 84 (operationValue -> indexation .)
    CLOSEDBRACKET   reduce using rule 84 (operationValue -> indexation .)


state 121

    (56) functionCall -> ID LPAREN arguments RPAREN .

    PRINT           reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    RETURN          reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    PUTS            reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    ID              reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    IF              reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    WHILE           reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    $end            reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    END             reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSE            reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)
    ELSIF           reduce using rule 56 (functionCall -> ID LPAREN arguments RPAREN .)


state 122

    (5) conditional -> IF condition instructionBody END .

    IF              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    $end            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PRINT           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    RETURN          reduce using rule 5 (conditional -> IF condition instructionBody END .)
    PUTS            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ID              reduce using rule 5 (conditional -> IF condition instructionBody END .)
    WHILE           reduce using rule 5 (conditional -> IF condition instructionBody END .)
    END             reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSE            reduce using rule 5 (conditional -> IF condition instructionBody END .)
    ELSIF           reduce using rule 5 (conditional -> IF condition instructionBody END .)


state 123

    (6) conditional -> IF condition instructionBody conditionalElsif . END
    (8) conditional -> IF condition instructionBody conditionalElsif . ELSE instructionBody END

    END             shift and go to state 155
    ELSE            shift and go to state 156


state 124

    (7) conditional -> IF condition instructionBody ELSE . instructionBody END
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 157
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 125

    (12) conditionalElsif -> elsif .
    (13) conditionalElsif -> elsif . conditionalElsif
    (12) conditionalElsif -> . elsif
    (13) conditionalElsif -> . elsif conditionalElsif
    (9) elsif -> . ELSIF condition instructionBody

    END             reduce using rule 12 (conditionalElsif -> elsif .)
    ELSE            reduce using rule 12 (conditionalElsif -> elsif .)
    ELSIF           shift and go to state 126

    elsif                          shift and go to state 125
    conditionalElsif               shift and go to state 158

state 126

    (9) elsif -> ELSIF . condition instructionBody
    (103) condition -> . conditionValue comparator conditionValue
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 31
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    condition                      shift and go to state 159
    conditionValue                 shift and go to state 30
    number                         shift and go to state 32
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 127

    (103) condition -> conditionValue comparator conditionValue .

    PRINT           reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    RETURN          reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    PUTS            reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    ID              reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    IF              reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    WHILE           reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    $end            reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    END             reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    ELSE            reduce using rule 103 (condition -> conditionValue comparator conditionValue .)
    ELSIF           reduce using rule 103 (condition -> conditionValue comparator conditionValue .)


state 128

    (95) conditionValue -> ID .
    (81) operationValue -> ID .
    (101) indexation -> ID . OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> ID . OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> ID . DOT ID

    CLOSEDBRACKET   reduce using rule 95 (conditionValue -> ID .)
    COMMA           reduce using rule 95 (conditionValue -> ID .)
    PLUS            reduce using rule 81 (operationValue -> ID .)
    MINUS           reduce using rule 81 (operationValue -> ID .)
    POWER           reduce using rule 81 (operationValue -> ID .)
    MULTIPLICATION  reduce using rule 81 (operationValue -> ID .)
    DIVISION        reduce using rule 81 (operationValue -> ID .)
    OPENBRACKET     shift and go to state 91
    DOT             shift and go to state 92


state 129

    (101) indexation -> ID OPENBRACKET element_list . CLOSEDBRACKET
    (94) element_list -> element_list . COMMA conditionValue

    CLOSEDBRACKET   shift and go to state 160
    COMMA           shift and go to state 147


state 130

    (102) indexation -> ID OPENBRACKET operation . CLOSEDBRACKET

    CLOSEDBRACKET   shift and go to state 161


state 131

    (85) operation -> operationValue . arithmeticOperator operationValue
    (75) arithmeticOperator -> . PLUS
    (76) arithmeticOperator -> . MINUS
    (77) arithmeticOperator -> . POWER
    (78) arithmeticOperator -> . MULTIPLICATION
    (79) arithmeticOperator -> . DIVISION

    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    POWER           shift and go to state 102
    MULTIPLICATION  shift and go to state 103
    DIVISION        shift and go to state 104

    arithmeticOperator             shift and go to state 162

state 132

    (96) conditionValue -> number .
    (82) operationValue -> number .

    CLOSEDBRACKET   reduce using rule 96 (conditionValue -> number .)
    COMMA           reduce using rule 96 (conditionValue -> number .)
    PLUS            reduce using rule 82 (operationValue -> number .)
    MINUS           reduce using rule 82 (operationValue -> number .)
    POWER           reduce using rule 82 (operationValue -> number .)
    MULTIPLICATION  reduce using rule 82 (operationValue -> number .)
    DIVISION        reduce using rule 82 (operationValue -> number .)


state 133

    (97) conditionValue -> indexation .
    (84) operationValue -> indexation .

    CLOSEDBRACKET   reduce using rule 97 (conditionValue -> indexation .)
    COMMA           reduce using rule 97 (conditionValue -> indexation .)
    PLUS            reduce using rule 84 (operationValue -> indexation .)
    MINUS           reduce using rule 84 (operationValue -> indexation .)
    POWER           reduce using rule 84 (operationValue -> indexation .)
    MULTIPLICATION  reduce using rule 84 (operationValue -> indexation .)
    DIVISION        reduce using rule 84 (operationValue -> indexation .)


state 134

    (98) conditionValue -> attribute .
    (83) operationValue -> attribute .

    CLOSEDBRACKET   reduce using rule 98 (conditionValue -> attribute .)
    COMMA           reduce using rule 98 (conditionValue -> attribute .)
    PLUS            reduce using rule 83 (operationValue -> attribute .)
    MINUS           reduce using rule 83 (operationValue -> attribute .)
    POWER           reduce using rule 83 (operationValue -> attribute .)
    MULTIPLICATION  reduce using rule 83 (operationValue -> attribute .)
    DIVISION        reduce using rule 83 (operationValue -> attribute .)


state 135

    (80) attribute -> ID DOT ID .

    GREATERTHAN     reduce using rule 80 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 80 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 80 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 80 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 80 (attribute -> ID DOT ID .)
    COMMA           reduce using rule 80 (attribute -> ID DOT ID .)
    PRINT           reduce using rule 80 (attribute -> ID DOT ID .)
    RETURN          reduce using rule 80 (attribute -> ID DOT ID .)
    PUTS            reduce using rule 80 (attribute -> ID DOT ID .)
    ID              reduce using rule 80 (attribute -> ID DOT ID .)
    IF              reduce using rule 80 (attribute -> ID DOT ID .)
    WHILE           reduce using rule 80 (attribute -> ID DOT ID .)
    $end            reduce using rule 80 (attribute -> ID DOT ID .)
    END             reduce using rule 80 (attribute -> ID DOT ID .)
    ELSE            reduce using rule 80 (attribute -> ID DOT ID .)
    ELSIF           reduce using rule 80 (attribute -> ID DOT ID .)
    PLUS            reduce using rule 80 (attribute -> ID DOT ID .)
    MINUS           reduce using rule 80 (attribute -> ID DOT ID .)
    POWER           reduce using rule 80 (attribute -> ID DOT ID .)
    MULTIPLICATION  reduce using rule 80 (attribute -> ID DOT ID .)
    DIVISION        reduce using rule 80 (attribute -> ID DOT ID .)
    RPAREN          reduce using rule 80 (attribute -> ID DOT ID .)
    CLOSEDBRACKET   reduce using rule 80 (attribute -> ID DOT ID .)


state 136

    (15) whileLoop -> WHILE condition instructionBody END .

    WHILE           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    $end            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PRINT           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    RETURN          reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    PUTS            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ID              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    IF              reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    END             reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSE            reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)
    ELSIF           reduce using rule 15 (whileLoop -> WHILE condition instructionBody END .)


state 137

    (80) attribute -> ID DOT ID .
    (56) functionCall -> ID . LPAREN arguments RPAREN
    (57) functionCall -> ID . LPAREN RPAREN

    GREATERTHAN     reduce using rule 80 (attribute -> ID DOT ID .)
    LESSTHAN        reduce using rule 80 (attribute -> ID DOT ID .)
    EQUALS          reduce using rule 80 (attribute -> ID DOT ID .)
    GREATEROREQUALS reduce using rule 80 (attribute -> ID DOT ID .)
    LESSOREQUALS    reduce using rule 80 (attribute -> ID DOT ID .)
    LPAREN          shift and go to state 21


state 138

    (52) arguments -> argument COMMA arguments .

    PRINT           reduce using rule 52 (arguments -> argument COMMA arguments .)
    RETURN          reduce using rule 52 (arguments -> argument COMMA arguments .)
    PUTS            reduce using rule 52 (arguments -> argument COMMA arguments .)
    ID              reduce using rule 52 (arguments -> argument COMMA arguments .)
    IF              reduce using rule 52 (arguments -> argument COMMA arguments .)
    WHILE           reduce using rule 52 (arguments -> argument COMMA arguments .)
    $end            reduce using rule 52 (arguments -> argument COMMA arguments .)
    END             reduce using rule 52 (arguments -> argument COMMA arguments .)
    ELSE            reduce using rule 52 (arguments -> argument COMMA arguments .)
    ELSIF           reduce using rule 52 (arguments -> argument COMMA arguments .)
    RPAREN          reduce using rule 52 (arguments -> argument COMMA arguments .)


state 139

    (55) parameters -> ID COMMA . parameters
    (54) parameters -> . ID
    (55) parameters -> . ID COMMA parameters

    ID              shift and go to state 96

    parameters                     shift and go to state 163

state 140

    (2) instruction -> DEF ID LPAREN parameters RPAREN . instructionBody END
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 164
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 141

    (3) instruction -> DEF ID LPAREN RPAREN END .

    $end            reduce using rule 3 (instruction -> DEF ID LPAREN RPAREN END .)


state 142

    (88) operations -> operation arithmeticOperator operations .

    PRINT           reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    RETURN          reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    PUTS            reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    ID              reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    IF              reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    WHILE           reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    $end            reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    END             reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    ELSE            reduce using rule 88 (operations -> operation arithmeticOperator operations .)
    ELSIF           reduce using rule 88 (operations -> operation arithmeticOperator operations .)


state 143

    (89) operations -> operation arithmeticOperator operationValue .
    (90) operations -> operationValue . arithmeticOperator operation
    (85) operation -> operationValue . arithmeticOperator operationValue
    (75) arithmeticOperator -> . PLUS
    (76) arithmeticOperator -> . MINUS
    (77) arithmeticOperator -> . POWER
    (78) arithmeticOperator -> . MULTIPLICATION
    (79) arithmeticOperator -> . DIVISION

    PRINT           reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    RETURN          reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    PUTS            reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    ID              reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    IF              reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    WHILE           reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    $end            reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    END             reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    ELSE            reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    ELSIF           reduce using rule 89 (operations -> operation arithmeticOperator operationValue .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    POWER           shift and go to state 102
    MULTIPLICATION  shift and go to state 103
    DIVISION        shift and go to state 104

    arithmeticOperator             shift and go to state 105

state 144

    (85) operation -> operationValue arithmeticOperator operationValue .
    (85) operation -> operationValue . arithmeticOperator operationValue
    (75) arithmeticOperator -> . PLUS
    (76) arithmeticOperator -> . MINUS
    (77) arithmeticOperator -> . POWER
    (78) arithmeticOperator -> . MULTIPLICATION
    (79) arithmeticOperator -> . DIVISION

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    PRINT           reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101
    POWER           shift and go to state 102
    MULTIPLICATION  shift and go to state 103
    DIVISION        shift and go to state 104

  ! PLUS            [ reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MINUS           [ reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! POWER           [ reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! MULTIPLICATION  [ reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .) ]
  ! DIVISION        [ reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .) ]

    arithmeticOperator             shift and go to state 162

state 145

    (90) operations -> operationValue arithmeticOperator operation .

    PRINT           reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    RETURN          reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    PUTS            reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    ID              reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    IF              reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    WHILE           reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    $end            reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    END             reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    ELSE            reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)
    ELSIF           reduce using rule 90 (operations -> operationValue arithmeticOperator operation .)


state 146

    (91) array -> OPENBRACKET element_list CLOSEDBRACKET .

    PRINT           reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 91 (array -> OPENBRACKET element_list CLOSEDBRACKET .)


state 147

    (94) element_list -> element_list COMMA . conditionValue
    (95) conditionValue -> . ID
    (96) conditionValue -> . number
    (97) conditionValue -> . indexation
    (98) conditionValue -> . attribute
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET
    (80) attribute -> . ID DOT ID

    ID              shift and go to state 31
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    conditionValue                 shift and go to state 165
    number                         shift and go to state 32
    indexation                     shift and go to state 33
    attribute                      shift and go to state 34

state 148

    (58) creationStack -> STACK DOT NEW .

    PRINT           reduce using rule 58 (creationStack -> STACK DOT NEW .)
    RETURN          reduce using rule 58 (creationStack -> STACK DOT NEW .)
    PUTS            reduce using rule 58 (creationStack -> STACK DOT NEW .)
    ID              reduce using rule 58 (creationStack -> STACK DOT NEW .)
    IF              reduce using rule 58 (creationStack -> STACK DOT NEW .)
    WHILE           reduce using rule 58 (creationStack -> STACK DOT NEW .)
    $end            reduce using rule 58 (creationStack -> STACK DOT NEW .)
    END             reduce using rule 58 (creationStack -> STACK DOT NEW .)
    ELSE            reduce using rule 58 (creationStack -> STACK DOT NEW .)
    ELSIF           reduce using rule 58 (creationStack -> STACK DOT NEW .)


state 149

    (60) creationLinkedList -> LINKEDLIST DOT NEW .

    PRINT           reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    RETURN          reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    PUTS            reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ID              reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    IF              reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    WHILE           reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    $end            reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    END             reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSE            reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)
    ELSIF           reduce using rule 60 (creationLinkedList -> LINKEDLIST DOT NEW .)


state 150

    (64) creationHashmap -> HASH DOT NEW .

    PRINT           reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    RETURN          reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    PUTS            reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    ID              reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    IF              reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    WHILE           reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    $end            reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    END             reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    ELSE            reduce using rule 64 (creationHashmap -> HASH DOT NEW .)
    ELSIF           reduce using rule 64 (creationHashmap -> HASH DOT NEW .)


state 151

    (65) creationHashmap -> LBRACE pairs RBRACE .

    PRINT           reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    RETURN          reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    PUTS            reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    ID              reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    IF              reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    WHILE           reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    $end            reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    END             reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSE            reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)
    ELSIF           reduce using rule 65 (creationHashmap -> LBRACE pairs RBRACE .)


state 152

    (69) pairs -> pair COMMA . pairs
    (68) pairs -> . pair
    (69) pairs -> . pair COMMA pairs
    (67) pair -> . STRING COLON value

    STRING          shift and go to state 115

    pair                           shift and go to state 114
    pairs                          shift and go to state 166

state 153

    (67) pair -> STRING COLON . value
    (70) value -> . ID
    (71) value -> . STRING
    (72) value -> . number
    (73) value -> . LBRACE pairs RBRACE
    (74) value -> . LBRACE RBRACE
    (109) number -> . FLOAT
    (110) number -> . INTEGER

    ID              shift and go to state 169
    STRING          shift and go to state 167
    LBRACE          shift and go to state 171
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    value                          shift and go to state 168
    number                         shift and go to state 170

state 154

    (86) operation -> LPAREN operationValue arithmeticOperator . operationValue RPAREN
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 117
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    operationValue                 shift and go to state 172
    number                         shift and go to state 118
    attribute                      shift and go to state 119
    indexation                     shift and go to state 120

state 155

    (6) conditional -> IF condition instructionBody conditionalElsif END .

    IF              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    $end            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PRINT           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    RETURN          reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    PUTS            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ID              reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    WHILE           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    END             reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSE            reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)
    ELSIF           reduce using rule 6 (conditional -> IF condition instructionBody conditionalElsif END .)


state 156

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE . instructionBody END
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 173
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 157

    (7) conditional -> IF condition instructionBody ELSE instructionBody . END

    END             shift and go to state 174


state 158

    (13) conditionalElsif -> elsif conditionalElsif .

    END             reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)
    ELSE            reduce using rule 13 (conditionalElsif -> elsif conditionalElsif .)


state 159

    (9) elsif -> ELSIF condition . instructionBody
    (37) instructionBody -> . bodyLine
    (38) instructionBody -> . bodyLine instructionBody
    (28) bodyLine -> . assignmentRule
    (29) bodyLine -> . PRINT printBody
    (30) bodyLine -> . nestedConditional
    (31) bodyLine -> . nestedWhile
    (32) bodyLine -> . functionCall
    (33) bodyLine -> . arrayConcat
    (34) bodyLine -> . RETURN arguments
    (35) bodyLine -> . PUTS printBody
    (36) bodyLine -> . method
    (18) assignmentRule -> . ID ASSIGNMENT number
    (19) assignmentRule -> . ID ASSIGNMENT ID
    (20) assignmentRule -> . ID ASSIGNMENT condition
    (21) assignmentRule -> . ID ASSIGNMENT TRUE
    (22) assignmentRule -> . ID ASSIGNMENT FALSE
    (23) assignmentRule -> . ID ASSIGNMENT creationTDA
    (24) assignmentRule -> . ID ASSIGNMENT operations
    (25) assignmentRule -> . ID ASSIGNMENT array
    (26) assignmentRule -> . ID ASSIGNMENT indexation
    (27) assignmentRule -> . ID ASSIGNMENT attribute
    (10) nestedConditional -> . conditional
    (11) nestedConditional -> . conditional nestedConditional
    (16) nestedWhile -> . whileLoop
    (17) nestedWhile -> . whileLoop nestedWhile
    (56) functionCall -> . ID LPAREN arguments RPAREN
    (57) functionCall -> . ID LPAREN RPAREN
    (99) arrayConcat -> . ID ARRAYAPPEND ID
    (100) arrayConcat -> . ID ARRAYAPPEND number
    (53) method -> . ID DOT functionCall
    (5) conditional -> . IF condition instructionBody END
    (6) conditional -> . IF condition instructionBody conditionalElsif END
    (7) conditional -> . IF condition instructionBody ELSE instructionBody END
    (8) conditional -> . IF condition instructionBody conditionalElsif ELSE instructionBody END
    (15) whileLoop -> . WHILE condition instructionBody END

    PRINT           shift and go to state 11
    RETURN          shift and go to state 16
    PUTS            shift and go to state 17
    ID              shift and go to state 4
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    instructionBody                shift and go to state 175
    bodyLine                       shift and go to state 7
    assignmentRule                 shift and go to state 10
    nestedConditional              shift and go to state 12
    nestedWhile                    shift and go to state 13
    functionCall                   shift and go to state 14
    arrayConcat                    shift and go to state 15
    method                         shift and go to state 18
    conditional                    shift and go to state 24
    whileLoop                      shift and go to state 26

state 160

    (101) indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    EQUALS          reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    COMMA           reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PRINT           reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RETURN          reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PUTS            reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ID              reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    IF              reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    WHILE           reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    $end            reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    END             reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSE            reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    ELSIF           reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    PLUS            reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MINUS           reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    POWER           reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    DIVISION        reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    RPAREN          reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 101 (indexation -> ID OPENBRACKET element_list CLOSEDBRACKET .)


state 161

    (102) indexation -> ID OPENBRACKET operation CLOSEDBRACKET .

    GREATERTHAN     reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSTHAN        reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    EQUALS          reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    GREATEROREQUALS reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    LESSOREQUALS    reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    COMMA           reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PRINT           reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RETURN          reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PUTS            reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ID              reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    IF              reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    WHILE           reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    $end            reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    END             reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSE            reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    ELSIF           reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    PLUS            reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MINUS           reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    POWER           reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    MULTIPLICATION  reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    DIVISION        reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    RPAREN          reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)
    CLOSEDBRACKET   reduce using rule 102 (indexation -> ID OPENBRACKET operation CLOSEDBRACKET .)


state 162

    (85) operation -> operationValue arithmeticOperator . operationValue
    (81) operationValue -> . ID
    (82) operationValue -> . number
    (83) operationValue -> . attribute
    (84) operationValue -> . indexation
    (109) number -> . FLOAT
    (110) number -> . INTEGER
    (80) attribute -> . ID DOT ID
    (101) indexation -> . ID OPENBRACKET element_list CLOSEDBRACKET
    (102) indexation -> . ID OPENBRACKET operation CLOSEDBRACKET

    ID              shift and go to state 117
    FLOAT           shift and go to state 35
    INTEGER         shift and go to state 36

    operationValue                 shift and go to state 176
    number                         shift and go to state 118
    attribute                      shift and go to state 119
    indexation                     shift and go to state 120

state 163

    (55) parameters -> ID COMMA parameters .

    RPAREN          reduce using rule 55 (parameters -> ID COMMA parameters .)


state 164

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody . END

    END             shift and go to state 177


state 165

    (94) element_list -> element_list COMMA conditionValue .

    CLOSEDBRACKET   reduce using rule 94 (element_list -> element_list COMMA conditionValue .)
    COMMA           reduce using rule 94 (element_list -> element_list COMMA conditionValue .)


state 166

    (69) pairs -> pair COMMA pairs .

    RBRACE          reduce using rule 69 (pairs -> pair COMMA pairs .)


state 167

    (71) value -> STRING .

    COMMA           reduce using rule 71 (value -> STRING .)
    RBRACE          reduce using rule 71 (value -> STRING .)


state 168

    (67) pair -> STRING COLON value .

    COMMA           reduce using rule 67 (pair -> STRING COLON value .)
    RBRACE          reduce using rule 67 (pair -> STRING COLON value .)


state 169

    (70) value -> ID .

    COMMA           reduce using rule 70 (value -> ID .)
    RBRACE          reduce using rule 70 (value -> ID .)


state 170

    (72) value -> number .

    COMMA           reduce using rule 72 (value -> number .)
    RBRACE          reduce using rule 72 (value -> number .)


state 171

    (73) value -> LBRACE . pairs RBRACE
    (74) value -> LBRACE . RBRACE
    (68) pairs -> . pair
    (69) pairs -> . pair COMMA pairs
    (67) pair -> . STRING COLON value

    RBRACE          shift and go to state 179
    STRING          shift and go to state 115

    pairs                          shift and go to state 178
    pair                           shift and go to state 114

state 172

    (86) operation -> LPAREN operationValue arithmeticOperator operationValue . RPAREN

    RPAREN          shift and go to state 180


state 173

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody . END

    END             shift and go to state 181


state 174

    (7) conditional -> IF condition instructionBody ELSE instructionBody END .

    IF              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    $end            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PRINT           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    RETURN          reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    PUTS            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ID              reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    WHILE           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    END             reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSE            reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)
    ELSIF           reduce using rule 7 (conditional -> IF condition instructionBody ELSE instructionBody END .)


state 175

    (9) elsif -> ELSIF condition instructionBody .

    ELSIF           reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    END             reduce using rule 9 (elsif -> ELSIF condition instructionBody .)
    ELSE            reduce using rule 9 (elsif -> ELSIF condition instructionBody .)


state 176

    (85) operation -> operationValue arithmeticOperator operationValue .

    CLOSEDBRACKET   reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    PRINT           reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    RETURN          reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    PUTS            reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    ID              reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    IF              reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    WHILE           reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    $end            reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    END             reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    ELSE            reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)
    ELSIF           reduce using rule 85 (operation -> operationValue arithmeticOperator operationValue .)


state 177

    (2) instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .

    $end            reduce using rule 2 (instruction -> DEF ID LPAREN parameters RPAREN instructionBody END .)


state 178

    (73) value -> LBRACE pairs . RBRACE

    RBRACE          shift and go to state 182


state 179

    (74) value -> LBRACE RBRACE .

    COMMA           reduce using rule 74 (value -> LBRACE RBRACE .)
    RBRACE          reduce using rule 74 (value -> LBRACE RBRACE .)


state 180

    (86) operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .

    PLUS            reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MINUS           reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    POWER           reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    MULTIPLICATION  reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    DIVISION        reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PRINT           reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    RETURN          reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    PUTS            reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ID              reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    IF              reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    WHILE           reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    $end            reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    END             reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSE            reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    ELSIF           reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)
    CLOSEDBRACKET   reduce using rule 86 (operation -> LPAREN operationValue arithmeticOperator operationValue RPAREN .)


state 181

    (8) conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .

    IF              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    $end            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PRINT           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    RETURN          reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    PUTS            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ID              reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    WHILE           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    END             reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSE            reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)
    ELSIF           reduce using rule 8 (conditional -> IF condition instructionBody conditionalElsif ELSE instructionBody END .)


state 182

    (73) value -> LBRACE pairs RBRACE .

    COMMA           reduce using rule 73 (value -> LBRACE pairs RBRACE .)
    RBRACE          reduce using rule 73 (value -> LBRACE pairs RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 24 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 26 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 144 resolved as shift
WARNING: shift/reduce conflict for POWER in state 144 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 144 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 144 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (instruction -> conditional)
WARNING: rejected rule (nestedConditional -> conditional) in state 5
WARNING: reduce/reduce conflict in state 6 resolved using rule (instruction -> whileLoop)
WARNING: rejected rule (nestedWhile -> whileLoop) in state 6
WARNING: reduce/reduce conflict in state 107 resolved using rule (creationStack -> OPENBRACKET CLOSEDBRACKET)
WARNING: rejected rule (array -> OPENBRACKET CLOSEDBRACKET) in state 107
WARNING: Rule (array -> OPENBRACKET CLOSEDBRACKET) is never reduced
